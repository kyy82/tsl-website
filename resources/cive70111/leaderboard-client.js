class LeaderboardClient{constructor(t={}){this.config={serverUrl:t.serverUrl||"http://localhost:3001",roomId:t.roomId||"demo",userId:t.userId||this.generateAnonymousId(),autoConnect:!1!==t.autoConnect,debug:t.debug||!1,roomConfig:t.roomConfig||null,statusElementId:t.statusElementId||"status-text",statusDotElementId:t.statusDotElementId||"status-dot",positionElementId:t.positionElementId||"your-position",leaderboardElementId:t.leaderboardElementId||"leaderboard-list",scoreFormat:t.scoreFormat||["r2","mse"],scoreLabels:t.scoreLabels||{r2:"RÂ²",mse:"MSE"},maxDisplayUsers:t.maxDisplayUsers||10,...t},this.state={socket:null,connected:!1,joined:!1,currentPosition:null,totalUsers:0,autoJoinOnConnect:!1},this.callbacks={onConnect:t.onConnect||(()=>{}),onDisconnect:t.onDisconnect||(()=>{}),onLeaderboardUpdate:t.onLeaderboardUpdate||(()=>{}),onPositionUpdate:t.onPositionUpdate||(()=>{}),onError:t.onError||(()=>{}),onStatusChange:t.onStatusChange||(()=>{}),onUsernameAssigned:t.onUsernameAssigned||(()=>{})},this.config.autoConnect&&this.connect()}generateAnonymousId(){return"User-"+Math.floor(9999*Math.random()).toString().padStart(4,"0")}connect(){if(this.state.connected)this.log("Already connected");else try{this.state.socket=io(this.config.serverUrl,{transports:["websocket"],timeout:5e3}),this.setupEventHandlers(),this.log("Connecting to leaderboard server...")}catch(t){this.log("Failed to connect:",t.message),this.callbacks.onError(t)}}setupEventHandlers(){this.state.socket.on("connect",()=>{this.state.connected=!0,this.log("Connected to leaderboard server"),this.callbacks.onConnect(),this.callbacks.onStatusChange("connected"),this.state.autoJoinOnConnect&&(this.state.autoJoinOnConnect=!1,this.join())}),this.state.socket.on("disconnect",()=>{this.state.connected=!1,this.state.joined=!1,this.log("Disconnected from leaderboard server"),this.callbacks.onDisconnect(),this.callbacks.onStatusChange("disconnected")}),this.state.socket.on("connect_error",()=>{this.state.connected=!1,this.log("Connection error"),this.callbacks.onStatusChange("error")}),this.state.socket.on("leaderboard",t=>{this.state.totalUsers=t.count,this.callbacks.onLeaderboardUpdate(t)}),this.state.socket.on("userPosition",t=>{this.state.currentPosition=t,this.callbacks.onPositionUpdate(t)}),this.state.socket.on("error",t=>{this.log("Server error:",t.message),this.callbacks.onError(t)}),this.state.socket.on("usernameAssigned",t=>{this.log("Server assigned username:",t.username),this.config.userId=t.username,this.callbacks.onUsernameAssigned&&this.callbacks.onUsernameAssigned(t.username)})}join(t={}){if(!this.state.connected)return this.log("Not connected, will join when connection is established"),void(this.state.autoJoinOnConnect=!0);const e={room:this.config.roomId,userId:this.config.userId,metadata:t};this.config.roomConfig&&(e.roomConfig=this.config.roomConfig),this.state.socket.emit("join",e),this.state.joined=!0,this.log(`Joined room: ${this.config.roomId} as ${this.config.userId}`),this.callbacks.onStatusChange("joined")}leave(){this.state.connected&&(this.state.joined=!1,this.log(`Left room: ${this.config.roomId}`),this.callbacks.onStatusChange("connected"))}updateScores(t){this.state.connected&&this.state.joined?(this.state.socket.emit("updateScore",{userId:this.config.userId,scores:t}),this.log("Updated scores:",t)):this.log("Cannot update scores - not connected or not joined")}getLeaderboard(){this.state.connected&&this.state.socket.emit("getLeaderboard",{room:this.config.roomId})}disconnect(){this.state.socket&&(this.state.socket.disconnect(),this.state.connected=!1,this.state.joined=!1,this.log("Disconnected"))}updateConfig(t){this.config={...this.config,...t}}setUserId(t){this.config.userId=t,this.log(`User ID updated to: ${t}`)}setRoomId(t){const e=this.state.joined;e&&this.leave(),this.config.roomId=t,this.log(`Room ID updated to: ${t}`),e&&this.join()}getState(){return{connected:this.state.connected,joined:this.state.joined,userId:this.config.userId,roomId:this.config.roomId,currentPosition:this.state.currentPosition,totalUsers:this.state.totalUsers}}isReady(){return this.state.connected&&this.state.joined}updateStatus(t,e){const s=document.getElementById(this.config.statusElementId),o=document.getElementById(this.config.statusDotElementId);s&&(s.textContent=t),o&&(o.className="status-indicator "+e)}updateUserPosition(t){const e=document.getElementById(this.config.positionElementId);if(e)if(t){const s=this.formatScores(t.scores);e.innerHTML=`\n                <strong>Your Position:</strong> #${t.rank} of ${t.totalUsers||this.state.totalUsers||"?"} participants<br>\n                ${s}\n            `,e.style.display="block"}else e.style.display="none"}updateUserPositionFromLeaderboard(t){if(!t.users||!this.config.userId)return;const e=t.users.find(t=>t.userId===this.config.userId);if(e){const s={rank:e.rank,scores:e.scores,totalUsers:t.count||t.users.length};this.updateUserPosition(s)}}updateLeaderboard(t){const e=document.getElementById(this.config.leaderboardElementId);if(!e)return;if(!t.users||0===t.users.length)return void(e.innerHTML='<div class="empty-leaderboard">No participants yet</div>');const s=t.users.slice(0,this.config.maxDisplayUsers);let o="";s.forEach(t=>{const e=t.userId===this.config.userId,s=this.formatScores(t.scores);o+=`\n                <div class="leaderboard-entry ${e?"highlight":""}">\n                    <span class="leaderboard-rank">#${t.rank}</span>\n                    <span class="leaderboard-user">${t.userId}</span>\n                    <span class="leaderboard-scores">${s}</span>\n                </div>\n            `});if(!s.find(t=>t.userId===this.config.userId)&&t.users.length>this.config.maxDisplayUsers){const e=t.users.find(t=>t.userId===this.config.userId);if(e){const t=this.formatScores(e.scores);o+=`\n                    <div class="leaderboard-separator">...</div>\n                    <div class="leaderboard-entry highlight">\n                        <span class="leaderboard-rank">#${e.rank}</span>\n                        <span class="leaderboard-user">${e.userId}</span>\n                        <span class="leaderboard-scores">${t}</span>\n                    </div>\n                `}}e.innerHTML=o}formatScores(t){return`<span style="font-size: 14px; font-weight: normal;">${this.config.scoreFormat.map(e=>`${this.config.scoreLabels[e]||e.toUpperCase()} = ${t[e]}`).join(", ")}</span>`}log(...t){this.config.debug&&console.log("[LeaderboardClient]",...t)}}window.createLeaderboardClient=t=>new LeaderboardClient(t),"undefined"!=typeof module&&module.exports&&(module.exports=LeaderboardClient);