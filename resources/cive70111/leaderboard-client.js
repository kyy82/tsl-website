class LeaderboardClient{constructor(options={}){this.config={serverUrl:options.serverUrl||this.autoDetectServerUrl(),roomId:options.roomId||"demo",userId:options.userId||this.generateAnonymousId(),autoConnect:!1!==options.autoConnect,debug:options.debug||!1,roomConfig:options.roomConfig||null,statusElementId:options.statusElementId||"status-text",statusDotElementId:options.statusDotElementId||"status-dot",positionElementId:options.positionElementId||"your-position",leaderboardElementId:options.leaderboardElementId||"leaderboard-list",scoreFormat:options.scoreFormat||["r2","mse"],scoreLabels:options.scoreLabels||{r2:"RÂ²",mse:"MSE"},maxDisplayUsers:options.maxDisplayUsers||10},this.state={socket:null,connected:!1,joined:!1,currentPosition:null,totalUsers:0,autoJoinOnConnect:!1},this.assignedUsername=null,this.wasJoined=!1,this.lastScores=null,this.lastInputs=null,this.isInBackground=!1,this.backgroundKeepAliveInterval=null,this.callbacks={onConnect:options.onConnect||(()=>{}),onDisconnect:options.onDisconnect||(()=>{}),onLeaderboardUpdate:options.onLeaderboardUpdate||(()=>{}),onPositionUpdate:options.onPositionUpdate||(()=>{}),onError:options.onError||(()=>{}),onStatusChange:options.onStatusChange||(()=>{}),onUsernameAssigned:options.onUsernameAssigned||(()=>{})},this.setupVisibilityHandling(),this.config.autoConnect&&this.connect()}setupVisibilityHandling(){"undefined"!=typeof document&&(document.addEventListener("visibilitychange",()=>{document.hidden?(this.log("Tab went to background - switching to background mode"),this.isInBackground=!0,this.startBackgroundKeepAlive()):(this.log("Tab came to foreground - switching to active mode"),this.isInBackground=!1,this.stopBackgroundKeepAlive(),this.state.connected?this.handleReconnection():(this.log("Reconnecting after tab became visible"),this.connect()))}),window.addEventListener("beforeunload",()=>{this.state.socket&&this.state.socket.emit("disconnect_clean")}))}autoDetectServerUrl(){return"transport-systems.imperial.ac.uk"===window.location.hostname?"https://tsl-leaderboard-6fe23a1f7285.herokuapp.com":"http://localhost:3001"}generateAnonymousId(){return"User-"+Math.floor(9999*Math.random()).toString().padStart(4,"0")}connect(){if(this.state.connected&&this.state.socket)this.log("Already connected");else{this.state.socket&&(this.state.socket.removeAllListeners(),this.state.socket.disconnect());try{this.state.socket=io(this.config.serverUrl,{transports:["websocket","polling"],upgrade:!0,timeout:2e4,reconnection:!1,forceNew:!1,pingTimeout:3e5,pingInterval:12e4}),this.setupEventHandlers(),this.log("Connecting to leaderboard server...")}catch(error){this.log("Failed to connect:",error.message),this.callbacks.onError(error)}}}setupEventHandlers(){this.state.socket.on("connect",()=>{this.state.connected=!0,this.log("Connected to leaderboard server"),this.callbacks.onConnect(),this.callbacks.onStatusChange("connected"),this.assignedUsername&&(this.config.userId=this.assignedUsername,this.log("Reusing assigned username on connect:",this.assignedUsername)),this.state.autoJoinOnConnect&&(this.state.autoJoinOnConnect=!1,this.join()),this.handleReconnection()}),this.state.socket.on("disconnect",reason=>{this.state.connected=!1,this.wasJoined=this.state.joined,this.state.joined=!1,this.log("Disconnected from leaderboard server. Reason:",reason),this.callbacks.onDisconnect(),this.callbacks.onStatusChange("disconnected")}),this.state.socket.on("connect_error",()=>{this.state.connected=!1,this.log("Connection error"),this.callbacks.onStatusChange("error")}),this.state.socket.on("leaderboard",data=>{this.state.totalUsers=data.count,this.callbacks.onLeaderboardUpdate(data)}),this.state.socket.on("userPosition",position=>{this.state.currentPosition=position,this.callbacks.onPositionUpdate(position)}),this.state.socket.on("error",error=>{this.log("Server error:",error.message),this.callbacks.onError(error)}),this.state.socket.on("usernameAssigned",data=>{this.log("Server assigned username:",data.username),this.config.userId=data.username,this.assignedUsername=data.username,this.callbacks.onUsernameAssigned(data.username)})}join(metadata={}){if(!this.state.connected)return this.log("Not connected, will join when connection is established"),void(this.state.autoJoinOnConnect=!0);const joinData={room:this.config.roomId,userId:this.config.userId,metadata:metadata};this.config.roomConfig&&(joinData.roomConfig=this.config.roomConfig),this.state.socket.emit("join",joinData),this.state.joined=!0,this.wasJoined=!1,this.log(`Joined room: ${this.config.roomId} as ${this.config.userId}`),this.callbacks.onStatusChange("joined")}leave(){this.state.connected&&(this.state.socket.emit("leave",{room:this.config.roomId,userId:this.config.userId}),this.state.joined=!1,this.wasJoined=!1,this.log(`Left room: ${this.config.roomId}`),this.callbacks.onStatusChange("connected"))}updateScores(scores,inputs=null){if(!this.state.connected||!this.state.joined)return void this.log("Cannot update scores - not connected or not joined");const updateData={userId:this.config.userId,scores:scores};inputs&&(updateData.inputs=inputs),this.lastScores=scores,this.lastInputs=inputs,this.state.socket.emit("updateScore",updateData),this.log("Updated scores:",scores,inputs?"with inputs:":"",inputs||"")}getLeaderboard(){this.state.connected&&this.state.socket.emit("getLeaderboard",{room:this.config.roomId})}handleReconnection(){this.wasJoined&&(this.log("Rejoining room after reconnection"),this.join(),this.lastScores&&setTimeout(()=>{this.log("Resending scores after reconnection"),this.updateScores(this.lastScores,this.lastInputs)},100))}startBackgroundKeepAlive(){this.stopBackgroundKeepAlive(),this.state.connected&&this.state.socket&&this.state.socket.emit("background_active",{timestamp:Date.now()}),this.backgroundKeepAliveInterval=setInterval(()=>{this.sendBackgroundHeartbeat()},9e4),this.log("Background keep-alive started")}sendBackgroundHeartbeat(){if(this.state.connected&&this.state.socket&&this.isInBackground)try{this.state.socket.emit("heartbeat",{timestamp:Date.now(),background:!0}),this.log("Background heartbeat sent")}catch(error){this.log("Heartbeat failed:",error.message)}}stopBackgroundKeepAlive(){this.backgroundKeepAliveInterval&&(clearInterval(this.backgroundKeepAliveInterval),this.backgroundKeepAliveInterval=null,this.log("Background keep-alive stopped"))}disconnect(){this.stopBackgroundKeepAlive(),this.state.socket&&(this.state.socket.disconnect(),this.state.connected=!1,this.state.joined=!1,this.log("Disconnected"))}updateConfig(newConfig){this.config={...this.config,...newConfig}}setUserId(userId){this.config.userId=userId,this.log(`User ID updated to: ${userId}`)}setRoomId(roomId){const wasJoined=this.state.joined;wasJoined&&this.leave(),this.config.roomId=roomId,this.log(`Room ID updated to: ${roomId}`),wasJoined&&this.join()}getState(){return{connected:this.state.connected,joined:this.state.joined,userId:this.config.userId,roomId:this.config.roomId,currentPosition:this.state.currentPosition,totalUsers:this.state.totalUsers}}isReady(){return this.state.connected&&this.state.joined}updateStatus(text,status){const statusElement=document.getElementById(this.config.statusElementId),statusDotElement=document.getElementById(this.config.statusDotElementId);statusElement&&(statusElement.textContent=text),statusDotElement&&(statusDotElement.className="status-indicator "+status)}updateUserPosition(position){const positionElement=document.getElementById(this.config.positionElementId);if(positionElement)if(position){const scoreText=this.formatScores(position.scores);positionElement.innerHTML=`\n                <strong>Your Position:</strong> #${position.rank} of ${position.totalUsers||this.state.totalUsers||"?"} participants<br>\n                ${scoreText}\n            `,positionElement.style.display="block"}else positionElement.style.display="none"}updateUserPositionFromLeaderboard(data){if(!data.users||!this.config.userId)return;const currentUser=data.users.find(user=>user.userId===this.config.userId);if(currentUser){const position={rank:currentUser.rank,scores:currentUser.scores,totalUsers:data.count||data.users.length};this.updateUserPosition(position)}}updateLeaderboard(data){const listElement=document.getElementById(this.config.leaderboardElementId);if(!listElement)return;if(!data.users||0===data.users.length)return void(listElement.innerHTML='<div class="empty-leaderboard">No participants yet</div>');const topUsers=data.users.slice(0,this.config.maxDisplayUsers);let html="";topUsers.forEach(user=>{const isCurrentUser=user.userId===this.config.userId,scoreText=this.formatScores(user.scores);html+=`\n                <div class="leaderboard-entry ${isCurrentUser?"highlight":""}">\n                    <span class="leaderboard-rank">#${user.rank}</span>\n                    <span class="leaderboard-user">${user.userId}</span>\n                    <span class="leaderboard-scores">${scoreText}</span>\n                </div>\n            `});if(!topUsers.find(user=>user.userId===this.config.userId)&&data.users.length>this.config.maxDisplayUsers){const currentUser=data.users.find(user=>user.userId===this.config.userId);if(currentUser){const scoreText=this.formatScores(currentUser.scores);html+=`\n                    <div class="leaderboard-separator">...</div>\n                    <div class="leaderboard-entry highlight">\n                        <span class="leaderboard-rank">#${currentUser.rank}</span>\n                        <span class="leaderboard-user">${currentUser.userId}</span>\n                        <span class="leaderboard-scores">${scoreText}</span>\n                    </div>\n                `}}listElement.innerHTML=html}formatScores(scores){if(!scores||"object"!=typeof scores)return'<span style="font-size: 14px; font-weight: normal;">No scores available</span>';return`<span style="font-size: 14px; font-weight: normal;">${this.config.scoreFormat.map(key=>{const label=this.config.scoreLabels[key]||key.toUpperCase(),value=scores[key];return`${label} = ${null!=value?value:"N/A"}`}).join(", ")}</span>`}log(...args){if(this.config.debug){const timestamp=(new Date).toLocaleTimeString();console.log(`[${timestamp}] [LeaderboardClient]`,...args)}}}window.createLeaderboardClient=options=>new LeaderboardClient(options),"undefined"!=typeof module&&module.exports&&(module.exports=LeaderboardClient);