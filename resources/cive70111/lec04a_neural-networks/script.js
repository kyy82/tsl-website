class NeuralNetworkDemo{constructor(){this.networkContainer=document.getElementById("network-container"),this.layerControls=document.getElementById("layer-controls"),this.addLayerBtn=document.getElementById("add-layer-btn"),this.removeLayerBtn=document.getElementById("remove-layer-btn"),this.randomInputsBtn=document.getElementById("random-inputs-btn"),this.input1Slider=document.getElementById("input1"),this.input2Slider=document.getElementById("input2"),this.input3Slider=document.getElementById("input3"),this.input1Num=document.getElementById("input1-num"),this.input2Num=document.getElementById("input2-num"),this.input3Num=document.getElementById("input3-num"),this.layers=[{type:"input",units:3,activation:"linear"},{type:"hidden",units:4,activation:"relu"},{type:"hidden",units:3,activation:"relu"},{type:"output",units:1,activation:"sigmoid"}],this.weights=[],this.biases=[],this.layerValues=[],this.preActivationValues=[],this.selectedNode=null,this.animationActive=!1,this.initializeNetwork(),this.setupEventListeners(),this.renderLayerControls(),this.updateLayerButtons(),this.renderNetwork(),this.updateNetwork()}initializeNetwork(){this.weights=[],this.biases=[];for(let t=0;t<this.layers.length-1;t++){const e=this.layers[t],i=this.layers[t+1],n=[];for(let t=0;t<i.units;t++){const t=[];for(let i=0;i<e.units;i++)t.push(2*(Math.random()-.5));n.push(t)}this.weights.push(n);const s=[];for(let t=0;t<i.units;t++)s.push(2*(Math.random()-.5));this.biases.push(s)}}setupEventListeners(){[this.input1Slider,this.input2Slider,this.input3Slider].forEach((t,e)=>{t.addEventListener("input",t=>{[this.input1Num,this.input2Num,this.input3Num][e].value=t.target.value,this.updateNetwork()})}),[this.input1Num,this.input2Num,this.input3Num].forEach((t,e)=>{t.addEventListener("input",t=>{const i=[this.input1Slider,this.input2Slider,this.input3Slider][e],n=Math.max(-5,Math.min(5,parseFloat(t.target.value)||0));i.value=n,t.target.value=n,this.updateNetwork()})}),this.addLayerBtn.addEventListener("click",()=>this.addLayer()),this.removeLayerBtn.addEventListener("click",()=>this.removeLayer()),this.randomInputsBtn.addEventListener("click",()=>this.generateRandomInputs()),document.getElementById("weight-modal").addEventListener("click",t=>{"weight-modal"===t.target.id&&this.closeWeightModal()})}addLayer(){if(this.layers.filter(t=>"hidden"===t.type).length>=3)return;this.layers.splice(this.layers.length-1,0,{type:"hidden",units:3,activation:"relu"}),this.initializeNetwork(),this.renderLayerControls(),this.renderNetwork(),this.updateNetwork(),this.updateLayerButtons()}removeLayer(){this.layers.length>2&&(this.layers.splice(this.layers.length-2,1),this.initializeNetwork(),this.renderLayerControls(),this.renderNetwork(),this.updateNetwork(),this.updateLayerButtons())}generateRandomInputs(){this.input1Slider.value=8*(Math.random()-.5),this.input2Slider.value=8*(Math.random()-.5),this.input3Slider.value=8*(Math.random()-.5),this.input1Num.value=this.input1Slider.value,this.input2Num.value=this.input2Slider.value,this.input3Num.value=this.input3Slider.value,this.updateNetwork()}updateLayerButtons(){const t=this.layers.filter(t=>"hidden"===t.type).length;this.addLayerBtn.disabled=t>=3,this.removeLayerBtn.disabled=t<=0,this.addLayerBtn.textContent=t>=3?"+ Add Layer (Max: 3)":"+ Add Layer",this.removeLayerBtn.textContent=t<=0?"- Remove Layer (Min: 0)":"- Remove Layer"}renderLayerControls(){this.layerControls.innerHTML="",this.layers.forEach((t,e)=>{if("input"===t.type)return;const i=document.createElement("div");i.className="layer-control-group";const n="output"===t.type?"Output Layer":`Hidden Layer ${e}`;i.innerHTML=`\n                <label style="flex: 1; font-weight: bold;">${n}:</label>\n                <label style="width: 60px;">Units:</label>\n                <input type="number" min="1" max="10" value="${t.units}" \n                       onchange="demo.updateLayerUnits(${e}, this.value)" style="width: 60px;">\n                <label style="width: 80px;">Activation:</label>\n                <select onchange="demo.updateLayerActivation(${e}, this.value)" style="width: 100px;">\n                    <option value="linear" ${"linear"===t.activation?"selected":""}>Linear</option>\n                    <option value="relu" ${"relu"===t.activation?"selected":""}>ReLU</option>\n                    <option value="sigmoid" ${"sigmoid"===t.activation?"selected":""}>Sigmoid</option>\n                    <option value="tanh" ${"tanh"===t.activation?"selected":""}>Tanh</option>\n                </select>\n            `,this.layerControls.appendChild(i)})}updateLayerUnits(t,e){const i=Math.max(1,Math.min(10,parseInt(e)));this.layers[t].units=i,this.initializeNetwork(),this.renderNetwork(),this.updateNetwork()}updateLayerActivation(t,e){this.layers[t].activation=e,this.updateNetwork()}renderNetwork(){this.networkContainer.innerHTML="";const t=this.networkContainer.clientWidth-40,e=(this.networkContainer.clientHeight-40)/(this.layers.length+1);this.nodePositions=[],this.layers.forEach((i,n)=>{const s=[],a=Math.max(...this.layers.map(t=>t.units)),o=t/(a+1),l=(t-(i.units-1)*o)/2,r=document.createElement("div");r.className="network-layer-label",r.style.left="10px",r.style.top=(n+1)*e-10+"px",r.textContent=i.type.charAt(0).toUpperCase()+i.type.slice(1),this.networkContainer.appendChild(r);for(let t=0;t<i.units;t++){const a=document.createElement("div");a.className=`network-node ${i.type}`;const r=l+t*o,d=(n+1)*e-20;a.style.left=`${r}px`,a.style.top=`${d}px`;const h=document.createElement("span");if(h.style.background="white",h.style.border="1px solid white",h.style.borderRadius="3px",h.style.padding="1px 3px",h.style.fontSize="10px",h.style.fontWeight="bold",h.style.fontFamily="monospace",h.style.zIndex="10",h.style.position="relative",h.textContent="0.00",h.id=`value-${n}-${t}`,"input"===i.type?h.style.color="#1976d2":"output"===i.type?h.style.color="#388e3c":h.style.color="#7b1fa2",a.appendChild(h),n>0){a.addEventListener("click",()=>this.openWeightModal(n,t));const e=document.createElement("div");e.className="pre-activation-label",e.style.left=`${r+10}px`,e.style.top=d-25+"px",e.textContent="0.00",e.id=`pre-${n}-${t}`,this.networkContainer.appendChild(e)}s.push({x:r+20,y:d+20}),this.networkContainer.appendChild(a)}this.nodePositions.push(s)}),this.drawConnections()}drawConnections(){document.querySelectorAll(".network-edge").forEach(t=>t.remove());for(let t=0;t<this.layers.length-1;t++){const e=this.nodePositions[t],i=this.nodePositions[t+1];e.forEach((e,n)=>{i.forEach((i,s)=>{const a=document.createElement("div");a.className="network-edge";const o=i.x-e.x,l=i.y-e.y,r=Math.sqrt(o*o+l*l),d=Math.atan2(l,o);a.style.left=`${e.x}px`,a.style.top=`${e.y}px`,a.style.width=`${r}px`,a.style.transform=`rotate(${d}rad)`;const h=this.weights[t][s][n],u=Math.min(Math.abs(h),2)/2;a.style.opacity=.3+.7*u,a.style.height=1+3*u+"px",a.style.background=h>=0?"#4caf50":"#f44336",a.dataset.layerIndex=t,a.dataset.fromIndex=n,a.dataset.toIndex=s,this.networkContainer.appendChild(a)})})}}updateNetwork(){const t=[parseFloat(this.input1Slider.value),parseFloat(this.input2Slider.value),parseFloat(this.input3Slider.value)];this.layerValues=[t],this.preActivationValues=[t];for(let t=0;t<this.layers.length-1;t++){const e=this.layerValues[t],i=this.weights[t],n=this.biases[t],s=this.layers[t+1].activation,a=[],o=[];for(let t=0;t<i.length;t++){let l=n[t];for(let n=0;n<e.length;n++)l+=e[n]*i[t][n];a.push(l),o.push(this.applyActivation(l,s))}this.preActivationValues.push(a),this.layerValues.push(o)}this.updateNodeColors()}applyActivation(t,e){switch(e){case"linear":default:return t;case"relu":return Math.max(0,t);case"sigmoid":return 1/(1+Math.exp(-t));case"tanh":return Math.tanh(t)}}updateNodeColors(){this.layerValues.forEach((t,e)=>{t.forEach((t,i)=>{const n=document.getElementById(`value-${e}-${i}`);n&&(n.textContent=t.toFixed(2),n.style.background="white",n.style.border="1px solid white",0===e?n.style.color="#1976d2":e===this.layers.length-1?n.style.color="#388e3c":n.style.color="#7b1fa2");const s=document.querySelectorAll(".network-node");let a=0;for(let t=0;t<e;t++)a+=this.layers[t].units;a+=i;const o=s[a];if(o){const i=t>=0,n=.3+.7*(Math.min(Math.abs(t),3)/3);let s;s=0===e?i?[25,118,210]:[63,81,181]:e===this.layers.length-1?i?[56,142,60]:[76,175,80]:i?[123,31,162]:[156,39,176],o.style.background=`rgba(${s[0]}, ${s[1]}, ${s[2]}, ${n})`,o.style.borderColor=i?"#4caf50":"#f44336",o.style.borderWidth="2px"}if(e>0){const t=document.getElementById(`pre-${e}-${i}`);if(t){const n=this.preActivationValues[e][i];t.textContent=n.toFixed(2),n>=0?(t.style.color="#2e7d32",t.style.background="rgba(232, 245, 232, 0.9)"):(t.style.color="#d32f2f",t.style.background="rgba(255, 235, 238, 0.9)")}}})})}openWeightModal(t,e){const i=document.getElementById("weight-modal"),n=document.getElementById("modal-title"),s=document.getElementById("modal-weights");this.selectedNode={layerIndex:t,nodeIndex:e};const a="output"===this.layers[t].type?"Output":`Hidden Layer ${t}`;n.textContent=`Edit Weights - ${a} Node ${e+1}`,s.innerHTML="";const o=this.weights[t-1][e],l=this.biases[t-1][e];o.forEach((t,e)=>{const i=document.createElement("div");i.style.marginBottom="10px",i.innerHTML=`\n                <label style="display: inline-block; width: 120px;">\n                    From Input ${e+1}:\n                </label>\n                <input type="number" class="weight-input" value="${t.toFixed(3)}" \n                       step="0.01" data-weight-index="${e}">\n            `,s.appendChild(i)});const r=document.createElement("div");r.style.marginBottom="10px",r.innerHTML=`\n            <label style="display: inline-block; width: 120px;">\n                Bias:\n            </label>\n            <input type="number" class="weight-input" value="${l.toFixed(3)}" \n                   step="0.01" id="bias-input">\n        `,s.appendChild(r),s.querySelectorAll(".weight-input").forEach(t=>{t.addEventListener("input",()=>this.updateWeights())}),i.style.display="flex"}updateWeights(){if(!this.selectedNode)return;const{layerIndex:t,nodeIndex:e}=this.selectedNode,i=document.querySelectorAll(".weight-input[data-weight-index]"),n=document.getElementById("bias-input");i.forEach((i,n)=>{this.weights[t-1][e][n]=parseFloat(i.value)}),n&&(this.biases[t-1][e]=parseFloat(n.value)),this.drawConnections(),this.updateNetwork()}closeWeightModal(){document.getElementById("weight-modal").style.display="none",this.selectedNode=null}randomizeWeights(){if(!this.selectedNode)return;const{layerIndex:t,nodeIndex:e}=this.selectedNode,i=document.querySelectorAll(".weight-input[data-weight-index]"),n=document.getElementById("bias-input");if(i.forEach((i,n)=>{const s=2*(Math.random()-.5);i.value=s.toFixed(3),this.weights[t-1][e][n]=s}),n){const i=2*(Math.random()-.5);n.value=i.toFixed(3),this.biases[t-1][e]=i}this.drawConnections(),this.updateNetwork()}}function closeWeightModal(){window.demo&&window.demo.closeWeightModal()}function randomizeWeights(){window.demo&&window.demo.randomizeWeights()}document.addEventListener("DOMContentLoaded",()=>{window.demo=new NeuralNetworkDemo});