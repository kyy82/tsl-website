class NeuralNetworkDemo{constructor(){this.networkContainer=document.getElementById("network-container"),this.layerControls=document.getElementById("layer-controls"),this.addLayerBtn=document.getElementById("add-layer-btn"),this.removeLayerBtn=document.getElementById("remove-layer-btn"),this.randomInputsBtn=document.getElementById("random-inputs-btn"),this.input1Slider=document.getElementById("input1"),this.input2Slider=document.getElementById("input2"),this.input3Slider=document.getElementById("input3"),this.input1Num=document.getElementById("input1-num"),this.input2Num=document.getElementById("input2-num"),this.input3Num=document.getElementById("input3-num"),this.layers=[{type:"input",units:3,activation:"linear"},{type:"hidden",units:4,activation:"relu"},{type:"hidden",units:3,activation:"relu"},{type:"output",units:1,activation:"sigmoid"}],this.weights=[],this.biases=[],this.layerValues=[],this.preActivationValues=[],this.selectedNode=null,this.animationActive=!1,this.initializeNetwork(),this.setupEventListeners(),this.tabController=new DemoTabController,this.renderLayerControls(),this.updateLayerButtons(),this.renderNetwork(),this.updateNetwork()}initializeNetwork(){this.weights=[],this.biases=[];for(let i=0;i<this.layers.length-1;i++){const currentLayer=this.layers[i],nextLayer=this.layers[i+1],layerWeights=[];for(let j=0;j<nextLayer.units;j++){const neuronWeights=[];for(let k=0;k<currentLayer.units;k++)neuronWeights.push(2*(Math.random()-.5));layerWeights.push(neuronWeights)}this.weights.push(layerWeights);const layerBiases=[];for(let j=0;j<nextLayer.units;j++)layerBiases.push(2*(Math.random()-.5));this.biases.push(layerBiases)}}setupEventListeners(){[this.input1Slider,this.input2Slider,this.input3Slider].forEach((slider,index)=>{slider.addEventListener("input",e=>{[this.input1Num,this.input2Num,this.input3Num][index].value=e.target.value,this.updateNetwork()})}),[this.input1Num,this.input2Num,this.input3Num].forEach((input,index)=>{input.addEventListener("input",e=>{const slider=[this.input1Slider,this.input2Slider,this.input3Slider][index],value=Math.max(-5,Math.min(5,parseFloat(e.target.value)||0));slider.value=value,e.target.value=value,this.updateNetwork()})}),this.addLayerBtn.addEventListener("click",()=>this.addLayer()),this.removeLayerBtn.addEventListener("click",()=>this.removeLayer()),this.randomInputsBtn.addEventListener("click",()=>this.generateRandomInputs())}addLayer(){if(this.layers.filter(layer=>"hidden"===layer.type).length>=3)return;this.layers.splice(this.layers.length-1,0,{type:"hidden",units:3,activation:"relu"}),this.initializeNetwork(),this.renderLayerControls(),this.renderNetwork(),this.updateNetwork(),this.updateLayerButtons()}removeLayer(){this.layers.length>2&&(this.layers.splice(this.layers.length-2,1),this.initializeNetwork(),this.renderLayerControls(),this.renderNetwork(),this.updateNetwork(),this.updateLayerButtons())}generateRandomInputs(){this.input1Slider.value=8*(Math.random()-.5),this.input2Slider.value=8*(Math.random()-.5),this.input3Slider.value=8*(Math.random()-.5),this.input1Num.value=this.input1Slider.value,this.input2Num.value=this.input2Slider.value,this.input3Num.value=this.input3Slider.value,this.updateNetwork()}updateLayerButtons(){const hiddenLayerCount=this.layers.filter(layer=>"hidden"===layer.type).length;this.addLayerBtn.disabled=hiddenLayerCount>=3,this.removeLayerBtn.disabled=hiddenLayerCount<=0,this.addLayerBtn.textContent=hiddenLayerCount>=3?"+ Add Layer (Max: 3)":"+ Add Layer",this.removeLayerBtn.textContent=hiddenLayerCount<=0?"- Remove Layer (Min: 0)":"- Remove Layer"}renderLayerControls(){this.layerControls.innerHTML="",this.layers.forEach((layer,index)=>{if("input"===layer.type)return;const controlGroup=document.createElement("div");controlGroup.className="layer-control-group";const layerName="output"===layer.type?"Output Layer":`Hidden Layer ${index}`;controlGroup.innerHTML=`\n                <label style="flex: 1; font-weight: bold;">${layerName}:</label>\n                <label style="width: 60px;">Units:</label>\n                <input type="number" min="1" max="10" value="${layer.units}" \n                       onchange="demo.updateLayerUnits(${index}, this.value)" style="width: 60px;">\n                <label style="width: 80px;">Activation:</label>\n                <select onchange="demo.updateLayerActivation(${index}, this.value)" style="width: 100px;">\n                    <option value="linear" ${"linear"===layer.activation?"selected":""}>Linear</option>\n                    <option value="relu" ${"relu"===layer.activation?"selected":""}>ReLU</option>\n                    <option value="sigmoid" ${"sigmoid"===layer.activation?"selected":""}>Sigmoid</option>\n                    <option value="tanh" ${"tanh"===layer.activation?"selected":""}>Tanh</option>\n                </select>\n            `,this.layerControls.appendChild(controlGroup)})}updateLayerUnits(layerIndex,units){const newUnits=Math.max(1,Math.min(10,parseInt(units)));this.layers[layerIndex].units=newUnits,this.initializeNetwork(),this.renderNetwork(),this.updateNetwork()}updateLayerActivation(layerIndex,activation){this.layers[layerIndex].activation=activation,this.updateNetwork()}renderNetwork(){this.networkContainer.innerHTML="";const containerWidth=this.networkContainer.clientWidth-40,layerSpacing=(this.networkContainer.clientHeight-40)/(this.layers.length+1);this.nodePositions=[],this.layers.forEach((layer,layerIndex)=>{const layerPositions=[],maxUnits=Math.max(...this.layers.map(l=>l.units)),nodeSpacing=containerWidth/(maxUnits+1),layerStartX=(containerWidth-(layer.units-1)*nodeSpacing)/2,layerLabel=document.createElement("div");layerLabel.className="network-layer-label",layerLabel.style.left="10px",layerLabel.style.top=(layerIndex+1)*layerSpacing-10+"px",layerLabel.textContent=layer.type.charAt(0).toUpperCase()+layer.type.slice(1),this.networkContainer.appendChild(layerLabel);for(let nodeIndex=0;nodeIndex<layer.units;nodeIndex++){const node=document.createElement("div");node.className=`network-node ${layer.type}`;const x=layerStartX+nodeIndex*nodeSpacing,y=(layerIndex+1)*layerSpacing-20;node.style.left=`${x}px`,node.style.top=`${y}px`;const valueSpan=document.createElement("span");if(valueSpan.style.background="white",valueSpan.style.border="1px solid white",valueSpan.style.borderRadius="3px",valueSpan.style.padding="1px 3px",valueSpan.style.fontSize="10px",valueSpan.style.fontWeight="bold",valueSpan.style.fontFamily="monospace",valueSpan.style.zIndex="10",valueSpan.style.position="relative",valueSpan.textContent="0.00",valueSpan.id=`value-${layerIndex}-${nodeIndex}`,"input"===layer.type?valueSpan.style.color="#1976d2":"output"===layer.type?valueSpan.style.color="#388e3c":valueSpan.style.color="#7b1fa2",node.appendChild(valueSpan),layerIndex>0){node.addEventListener("click",()=>this.openWeightModal(layerIndex,nodeIndex));const preLabel=document.createElement("div");preLabel.className="pre-activation-label",preLabel.style.left=`${x+10}px`,preLabel.style.top=y-25+"px",preLabel.textContent="0.00",preLabel.id=`pre-${layerIndex}-${nodeIndex}`,this.networkContainer.appendChild(preLabel)}layerPositions.push({x:x+20,y:y+20}),this.networkContainer.appendChild(node)}this.nodePositions.push(layerPositions)}),this.drawConnections()}drawConnections(){document.querySelectorAll(".network-edge").forEach(edge=>edge.remove());for(let layerIndex=0;layerIndex<this.layers.length-1;layerIndex++){const currentPositions=this.nodePositions[layerIndex],nextPositions=this.nodePositions[layerIndex+1];currentPositions.forEach((fromPos,fromIndex)=>{nextPositions.forEach((toPos,toIndex)=>{const edge=document.createElement("div");edge.className="network-edge";const dx=toPos.x-fromPos.x,dy=toPos.y-fromPos.y,length=Math.sqrt(dx*dx+dy*dy),angle=Math.atan2(dy,dx);edge.style.left=`${fromPos.x}px`,edge.style.top=`${fromPos.y}px`,edge.style.width=`${length}px`,edge.style.transform=`rotate(${angle}rad)`;const weight=this.weights[layerIndex][toIndex][fromIndex],intensity=Math.min(Math.abs(weight),2)/2;edge.style.opacity=.3+.7*intensity,edge.style.height=1+3*intensity+"px",edge.style.background=weight>=0?"#4caf50":"#f44336",edge.dataset.layerIndex=layerIndex,edge.dataset.fromIndex=fromIndex,edge.dataset.toIndex=toIndex,this.networkContainer.appendChild(edge)})})}}updateNetwork(){const inputs=[parseFloat(this.input1Slider.value),parseFloat(this.input2Slider.value),parseFloat(this.input3Slider.value)];this.layerValues=[inputs],this.preActivationValues=[inputs];for(let i=0;i<this.layers.length-1;i++){const currentValues=this.layerValues[i],layerWeights=this.weights[i],layerBiases=this.biases[i],activation=this.layers[i+1].activation,nextPreActivationValues=[],nextValues=[];for(let j=0;j<layerWeights.length;j++){let sum=layerBiases[j];for(let k=0;k<currentValues.length;k++)sum+=currentValues[k]*layerWeights[j][k];nextPreActivationValues.push(sum),nextValues.push(this.applyActivation(sum,activation))}this.preActivationValues.push(nextPreActivationValues),this.layerValues.push(nextValues)}this.updateNodeColors()}applyActivation(x,activation){switch(activation){case"linear":default:return x;case"relu":return Math.max(0,x);case"sigmoid":return 1/(1+Math.exp(-x));case"tanh":return Math.tanh(x)}}updateNodeColors(){this.layerValues.forEach((values,layerIndex)=>{values.forEach((value,valueIndex)=>{const valueSpan=document.getElementById(`value-${layerIndex}-${valueIndex}`);valueSpan&&(valueSpan.textContent=value.toFixed(2),valueSpan.style.background="white",valueSpan.style.border="1px solid white",0===layerIndex?valueSpan.style.color="#1976d2":layerIndex===this.layers.length-1?valueSpan.style.color="#388e3c":valueSpan.style.color="#7b1fa2");const nodes=document.querySelectorAll(".network-node");let nodeIndex=0;for(let i=0;i<layerIndex;i++)nodeIndex+=this.layers[i].units;nodeIndex+=valueIndex;const node=nodes[nodeIndex];if(node){const isPositive=value>=0,alpha=.3+.7*(Math.min(Math.abs(value),3)/3);let baseColor;baseColor=0===layerIndex?isPositive?[25,118,210]:[63,81,181]:layerIndex===this.layers.length-1?isPositive?[56,142,60]:[76,175,80]:isPositive?[123,31,162]:[156,39,176],node.style.background=`rgba(${baseColor[0]}, ${baseColor[1]}, ${baseColor[2]}, ${alpha})`,node.style.borderColor=isPositive?"#4caf50":"#f44336",node.style.borderWidth="2px"}if(layerIndex>0){const preLabel=document.getElementById(`pre-${layerIndex}-${valueIndex}`);if(preLabel){const preValue=this.preActivationValues[layerIndex][valueIndex];preLabel.textContent=preValue.toFixed(2),preValue>=0?(preLabel.style.color="#2e7d32",preLabel.style.background="rgba(232, 245, 232, 0.9)"):(preLabel.style.color="#d32f2f",preLabel.style.background="rgba(255, 235, 238, 0.9)")}}})})}openWeightModal(layerIndex,nodeIndex){const modal=document.getElementById("weight-modal"),modalTitle=document.getElementById("modal-title"),modalWeights=document.getElementById("modal-weights");this.selectedNode={layerIndex:layerIndex,nodeIndex:nodeIndex};const layerName="output"===this.layers[layerIndex].type?"Output":`Hidden Layer ${layerIndex}`;modalTitle.textContent=`Edit Weights - ${layerName} Node ${nodeIndex+1}`,modalWeights.innerHTML="";const weights=this.weights[layerIndex-1][nodeIndex],bias=this.biases[layerIndex-1][nodeIndex];weights.forEach((weight,index)=>{const inputGroup=document.createElement("div");inputGroup.style.marginBottom="10px",inputGroup.innerHTML=`\n                <label style="display: inline-block; width: 120px;">\n                    From Input ${index+1}:\n                </label>\n                <input type="number" class="weight-input" value="${weight.toFixed(3)}" \n                       step="0.01" data-weight-index="${index}">\n            `,modalWeights.appendChild(inputGroup)});const biasGroup=document.createElement("div");biasGroup.style.marginBottom="10px",biasGroup.innerHTML=`\n            <label style="display: inline-block; width: 120px;">\n                Bias:\n            </label>\n            <input type="number" class="weight-input" value="${bias.toFixed(3)}" \n                   step="0.01" id="bias-input">\n        `,modalWeights.appendChild(biasGroup),modalWeights.querySelectorAll(".weight-input").forEach(input=>{input.addEventListener("input",()=>this.updateWeights())}),modal.style.display="flex"}updateWeights(){if(!this.selectedNode)return;const{layerIndex:layerIndex,nodeIndex:nodeIndex}=this.selectedNode,weightInputs=document.querySelectorAll(".weight-input[data-weight-index]"),biasInput=document.getElementById("bias-input");weightInputs.forEach((input,index)=>{this.weights[layerIndex-1][nodeIndex][index]=parseFloat(input.value)}),biasInput&&(this.biases[layerIndex-1][nodeIndex]=parseFloat(biasInput.value)),this.drawConnections(),this.updateNetwork()}closeWeightModal(){document.getElementById("weight-modal").style.display="none",this.selectedNode=null}randomizeWeights(){if(!this.selectedNode)return;const{layerIndex:layerIndex,nodeIndex:nodeIndex}=this.selectedNode,weightInputs=document.querySelectorAll(".weight-input[data-weight-index]"),biasInput=document.getElementById("bias-input");if(weightInputs.forEach((input,index)=>{const newWeight=2*(Math.random()-.5);input.value=newWeight.toFixed(3),this.weights[layerIndex-1][nodeIndex][index]=newWeight}),biasInput){const newBias=2*(Math.random()-.5);biasInput.value=newBias.toFixed(3),this.biases[layerIndex-1][nodeIndex]=newBias}this.drawConnections(),this.updateNetwork()}}function closeWeightModal(){window.demo&&window.demo.closeWeightModal()}function randomizeWeights(){window.demo&&window.demo.randomizeWeights()}document.addEventListener("DOMContentLoaded",()=>{window.demo=new NeuralNetworkDemo});