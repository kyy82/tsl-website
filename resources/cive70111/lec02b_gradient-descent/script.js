class GradientDescentDemo{constructor(){this.dataCanvas=document.getElementById("dataCanvas"),this.costCanvas=document.getElementById("costCanvas"),this.deltaJCanvas=document.getElementById("deltaJCanvas"),this.dataCtx=this.dataCanvas.getContext("2d"),this.costCtx=this.costCanvas.getContext("2d"),this.structuresBtn=document.getElementById("structures-btn"),this.geotechBtn=document.getElementById("geotech-btn"),this.transportBtn=document.getElementById("transport-btn"),this.environmentBtn=document.getElementById("environment-btn"),this.alpha0Input=document.getElementById("alpha0"),this.beta0Input=document.getElementById("beta0"),this.etaInput=document.getElementById("eta"),this.alpha0Value=document.getElementById("alpha0-value"),this.beta0Value=document.getElementById("beta0-value"),this.etaValue=document.getElementById("eta-value"),this.stepBtn=document.getElementById("stepBtn"),this.resetBtn=document.getElementById("resetBtn"),this.iterOut=document.getElementById("iter"),this.alphaOut=document.getElementById("alphaOut"),this.betaOut=document.getElementById("betaOut"),this.jOut=document.getElementById("jOut"),this.historyScroll=document.getElementById("historyScroll"),this.historyIterationRow=document.querySelector(".history-row-iteration"),this.historyAlphaRow=document.querySelector(".history-row-alpha"),this.historyBetaRow=document.querySelector(".history-row-beta"),this.historyCostRow=document.querySelector(".history-row-cost"),this.historyDeltaRow=document.querySelector(".history-row-delta"),this.state={alpha:0,beta:0,eta:.01,iter:0,history:[]},this.datasets={sample:{data:[{x:1,y:2.2},{x:2,y:3.8},{x:3,y:5.1},{x:4,y:6.9},{x:5,y:8.2},{x:6,y:9.8},{x:7,y:11.1}],optimal:{alpha:1.4,beta:.8}},structures:{file:"example-data/structures_concrete.csv",xColumn:"Cement_kg_per_m3",yColumn:"Compressive_Strength_MPa",optimal:{alpha:0,beta:0}},geotech:{file:"example-data/geotechnics_soil.csv",xColumn:"Sand_Percent",yColumn:"Uniformity_Coefficient",optimal:{alpha:0,beta:0}},transport:{file:"example-data/transport_traffic.csv",xColumn:"Vehicle_Count",yColumn:"Vehicle_Speed_kmh",optimal:{alpha:0,beta:0}},environment:{file:"example-data/environment_wastewater.csv",xColumn:"Inflow_m3_s",yColumn:"Energy_Consumption_MWh",optimal:{alpha:0,beta:0}}},this.normStats={xMean:0,xStd:1,yMean:0,yStd:1},this.costGrid=null,this.gridBounds={alphaMin:-2,alphaMax:2,betaMin:-2,betaMax:2,resolution:100},this.setupHighDPICanvas(),this.setupEventListeners(),this.initializeDataChart(),this.initializeDeltaJChart(),this.tabController=new DemoTabController,this.setRandomInitialValues(),this.loadDataset("structures").catch(error=>{console.error("Failed to load structures dataset, falling back to sample:",error);try{this.loadSampleDataset()}catch(fallbackError){console.error("Failed to load fallback dataset:",fallbackError)}})}setupHighDPICanvas(){const dpr=window.devicePixelRatio||1,costRect=this.costCanvas.getBoundingClientRect();this.costCanvas.width=costRect.width*dpr,this.costCanvas.height=300*dpr,this.costCanvas.style.width=costRect.width+"px",this.costCanvas.style.height="300px",this.costCtx.scale(dpr,dpr),this.costWidth=costRect.width,this.costHeight=300}initializeDataChart(){this.dataChart=new Chart(this.dataCanvas.getContext("2d"),{type:"scatter",data:{datasets:[{label:"Data Points",data:[],backgroundColor:"#ff6b6b",borderColor:"#d63447",borderWidth:2,pointRadius:5,pointHoverRadius:7},{label:"Regression Line",data:[],type:"line",borderColor:"#4ecdc4",backgroundColor:"transparent",borderWidth:3,pointRadius:0,pointHoverRadius:0,fill:!1,tension:0}]},options:{responsive:!0,maintainAspectRatio:!0,aspectRatio:1,plugins:{legend:{display:!1},tooltip:{callbacks:{label:function(context){return 0===context.datasetIndex?`Data: (${context.parsed.x.toFixed(2)}, ${context.parsed.y.toFixed(2)})`:context.dataset.label}}}},scales:{x:{type:"linear",position:"bottom",title:{display:!0,text:"x (normalized)",font:{size:14,weight:"bold"}},grid:{display:!0,color:"#e0e0e0"},ticks:{callback:function(value){return value.toFixed(1)}}},y:{title:{display:!0,text:"y (normalized)",font:{size:14,weight:"bold"}},grid:{display:!0,color:"#e0e0e0"},ticks:{callback:function(value){return value.toFixed(1)}}}},interaction:{intersect:!1,mode:"point"}}})}initializeDeltaJChart(){this.deltaJChart=new Chart(this.deltaJCanvas.getContext("2d"),{type:"line",data:{labels:[],datasets:[{data:[],backgroundColor:"rgba(76, 175, 80, 0.2)",borderColor:"rgba(76, 175, 80, 1)",borderWidth:2,pointRadius:4,pointBackgroundColor:"rgba(76, 175, 80, 1)",pointBorderColor:"#fff",pointBorderWidth:1,pointHoverRadius:6,fill:!0,tension:.3}]},options:{responsive:!0,maintainAspectRatio:!0,aspectRatio:2.5,plugins:{legend:{display:!1}},scales:{x:{title:{display:!0,text:"Iteration",font:{size:11,weight:"bold"}},grid:{display:!1},ticks:{font:{size:10}}},y:{title:{display:!0,text:"|ΔJ|",font:{size:11,weight:"bold"}},beginAtZero:!0,grid:{display:!0,color:"#e0e0e0"},ticks:{callback:function(value){return value.toFixed(3)},font:{size:10}}}}}})}setupEventListeners(){this.structuresBtn.addEventListener("click",()=>{this.loadDataset("structures")}),this.geotechBtn.addEventListener("click",()=>{this.loadDataset("geotech")}),this.transportBtn.addEventListener("click",()=>{this.loadDataset("transport")}),this.environmentBtn.addEventListener("click",()=>{this.loadDataset("environment")}),this.alpha0Input.addEventListener("input",()=>{this.alpha0Value.textContent=parseFloat(this.alpha0Input.value).toFixed(1),this.initialize()}),this.beta0Input.addEventListener("input",()=>{this.beta0Value.textContent=parseFloat(this.beta0Input.value).toFixed(1),this.initialize()}),this.etaInput.addEventListener("input",()=>{this.etaValue.textContent=parseFloat(this.etaInput.value).toFixed(3),this.initialize()}),this.stepBtn.addEventListener("click",()=>this.step()),this.resetBtn.addEventListener("click",()=>this.reset())}updateGridBounds(datasetKey){this.gridBounds={alphaMin:-3,alphaMax:3,betaMin:-3,betaMax:3,resolution:100}}getDataBounds(datasetKey){const bounds={sample:{xMin:-3,xMax:3,yMin:-3,yMax:3},structures:{xMin:-3,xMax:3,yMin:-3,yMax:3},geotech:{xMin:-3,xMax:3,yMin:-3,yMax:3},transport:{xMin:-3,xMax:3,yMin:-3,yMax:3},environment:{xMin:-3,xMax:3,yMin:-3,yMax:3}};return bounds[datasetKey]||bounds.sample}getDefaultLearningRate(datasetKey){const rates={sample:.1,structures:.1,geotech:.1,transport:.1,environment:.1};return rates[datasetKey]||rates.sample}updateSliderRanges(optimal){this.alpha0Input.min=-3,this.alpha0Input.max=3,this.beta0Input.min=-3,this.beta0Input.max=3,console.log("Set slider ranges: α=[-3, 3], β=[-3, 3]"),console.log(`Optimal solution: α=${optimal.alpha.toFixed(3)}, β=${optimal.beta.toFixed(3)}`)}setRandomInitialValues(){const alphaMin=parseFloat(this.alpha0Input.min),alphaMax=parseFloat(this.alpha0Input.max),betaMin=parseFloat(this.beta0Input.min),betaMax=parseFloat(this.beta0Input.max),randomAlpha=alphaMin+Math.random()*(alphaMax-alphaMin),randomBeta=betaMin+Math.random()*(betaMax-betaMin);this.alpha0Input.value=randomAlpha.toFixed(1),this.beta0Input.value=randomBeta.toFixed(1),this.alpha0Value.textContent=randomAlpha.toFixed(1),this.beta0Value.textContent=randomBeta.toFixed(1)}normalizeData(data){const xMean=data.reduce((sum,point)=>sum+point.x,0)/data.length,yMean=data.reduce((sum,point)=>sum+point.y,0)/data.length,xVariance=data.reduce((sum,point)=>sum+Math.pow(point.x-xMean,2),0)/data.length,yVariance=data.reduce((sum,point)=>sum+Math.pow(point.y-yMean,2),0)/data.length,xStd=Math.sqrt(xVariance),yStd=Math.sqrt(yVariance);return this.normStats={xMean:xMean,xStd:xStd,yMean:yMean,yStd:yStd},data.map(point=>({x:(point.x-xMean)/xStd,y:(point.y-yMean)/yStd}))}calculateOptimalSolution(data){const n=data.length;let sumX=0,sumY=0,sumXY=0,sumXX=0;for(const{x:x,y:y}of data)sumX+=x,sumY+=y,sumXY+=x*y,sumXX+=x*x;const denominator=n*sumXX-sumX*sumX;if(Math.abs(denominator)<1e-10)return{alpha:0,beta:0};const beta=(n*sumXY-sumX*sumY)/denominator;return{alpha:(sumY-beta*sumX)/n,beta:beta}}loadSampleDataset(){const rawData=this.datasets.sample.data;this.dataset=this.normalizeData(rawData);const optimal=this.calculateOptimalSolution(this.dataset);this.datasets.sample.optimal=optimal,this.currentDatasetKey="sample",this.updateSliderRanges(optimal),this.updateGridBounds("sample"),this.setRandomInitialValues();const defaultEta=this.getDefaultLearningRate("sample");this.etaInput.value=defaultEta,this.etaValue.textContent=defaultEta.toFixed(3),this.initialize()}async loadDataset(datasetKey){const datasetConfig=this.datasets[datasetKey];if(!datasetConfig||!datasetConfig.file)throw console.error("Dataset config not found for:",datasetKey),new Error(`Dataset config not found for: ${datasetKey}`);console.log("Loading dataset:",datasetKey,"from:",datasetConfig.file);try{const response=await fetch(datasetConfig.file);if(!response.ok)throw new Error(`HTTP error! status: ${response.status} for ${datasetConfig.file}`);const text=await response.text();if(!text||0===text.trim().length)throw new Error(`Empty CSV file: ${datasetConfig.file}`);console.log("CSV loaded, parsing data...");const lines=text.trim().split("\n");if(lines.length<2)throw new Error(`CSV file has insufficient data: ${datasetConfig.file}`);const headers=lines[0].split(",").map(h=>h.trim()),xIndex=headers.indexOf(datasetConfig.xColumn),yIndex=headers.indexOf(datasetConfig.yColumn);if(-1===xIndex||-1===yIndex)throw new Error(`Column names not found in CSV. Expected: ${datasetConfig.xColumn}, ${datasetConfig.yColumn}`);const data=[];for(let i=1;i<lines.length;i++){const values=lines[i].split(",");if(values.length>1){const x=parseFloat(values[xIndex]),y=parseFloat(values[yIndex]);isNaN(x)||isNaN(y)||data.push({x:x,y:y})}}if(0===data.length)throw new Error(`No valid data points found in: ${datasetConfig.file}`);const normalizedData=this.normalizeData(data);this.dataset=normalizedData;const optimal=this.calculateOptimalSolution(normalizedData);this.datasets[datasetKey].optimal=optimal,this.currentDatasetKey=datasetKey,this.updateSliderRanges(optimal),this.updateGridBounds(datasetKey),this.setRandomInitialValues();const defaultEta=this.getDefaultLearningRate(datasetKey);this.etaInput.value=defaultEta,this.etaValue.textContent=defaultEta.toFixed(3),console.log("Initializing with",this.dataset.length,"normalized data points"),this.initialize(),console.log("Dataset loaded successfully:",datasetKey)}catch(error){throw console.error("Error loading dataset:",datasetKey,error.message),error}}initialize(){this.state.alpha=parseFloat(this.alpha0Input.value)||0,this.state.beta=parseFloat(this.beta0Input.value)||0,this.state.eta=parseFloat(this.etaInput.value)||.1,this.state.iter=0,this.state.history=[{alpha:this.state.alpha,beta:this.state.beta,J:this.costJ(this.state.alpha,this.state.beta),deltaJ:0}],this.computeCostGrid(),this.updateReadouts(),this.deltaJChart&&(this.deltaJChart.data.labels=[],this.deltaJChart.data.datasets[0].data=[],this.deltaJChart.update("none")),this.render(),this.resetHistoryTable(),this.stepBtn.disabled=!1}costJ(alpha,beta){const n=this.dataset.length;let sum=0;for(const{x:x,y:y}of this.dataset){const residual=alpha+beta*x-y;sum+=residual*residual}return sum/(2*n)}gradients(alpha,beta){const n=this.dataset.length;let dAlpha=0,dBeta=0;for(const{x:x,y:y}of this.dataset){const residual=alpha+beta*x-y;dAlpha+=residual,dBeta+=residual*x}return{dAlpha:dAlpha/n,dBeta:dBeta/n}}step(){const{dAlpha:dAlpha,dBeta:dBeta}=this.gradients(this.state.alpha,this.state.beta),oldAlpha=this.state.alpha,oldBeta=this.state.beta,oldJ=this.costJ(oldAlpha,oldBeta);this.state.alpha=this.state.alpha-this.state.eta*dAlpha,this.state.beta=this.state.beta-this.state.eta*dBeta,this.state.iter++;const newJ=this.costJ(this.state.alpha,this.state.beta),deltaJ=oldJ-newJ;this.state.history.push({alpha:this.state.alpha,beta:this.state.beta,J:newJ,deltaJ:deltaJ}),this.updateDeltaJChart(),this.updateReadouts(),this.addHistoryColumn(this.state.iter,this.state.alpha,this.state.beta,newJ,deltaJ),this.render()}reset(){this.setRandomInitialValues(),this.initialize()}computeCostGrid(){const{alphaMin:alphaMin,alphaMax:alphaMax,betaMin:betaMin,betaMax:betaMax,resolution:resolution}=this.gridBounds;this.costGrid=[];for(let i=0;i<resolution;i++){const row=[];for(let j=0;j<resolution;j++){const alpha=alphaMin+(alphaMax-alphaMin)*i/(resolution-1),beta=betaMin+(betaMax-betaMin)*j/(resolution-1);row.push(this.costJ(alpha,beta))}this.costGrid.push(row)}}updateReadouts(){this.iterOut.textContent=this.state.iter,this.alphaOut.textContent=this.state.alpha.toFixed(3),this.betaOut.textContent=this.state.beta.toFixed(3),this.jOut.textContent=this.costJ(this.state.alpha,this.state.beta).toFixed(3)}updateDeltaJChart(){if(!this.deltaJChart)return;const labels=[],deltaJValues=[];for(let i=1;i<this.state.history.length;i++)labels.push(i.toString()),deltaJValues.push(Math.abs(this.state.history[i].deltaJ));this.deltaJChart.data.labels=labels,this.deltaJChart.data.datasets[0].data=deltaJValues,this.deltaJChart.update("none")}resetHistoryTable(){for(;this.historyIterationRow.children.length>2;)this.historyIterationRow.removeChild(this.historyIterationRow.lastChild),this.historyAlphaRow.removeChild(this.historyAlphaRow.lastChild),this.historyBetaRow.removeChild(this.historyBetaRow.lastChild),this.historyCostRow.removeChild(this.historyCostRow.lastChild),this.historyDeltaRow.removeChild(this.historyDeltaRow.lastChild);this.historyIterationRow.children[1].textContent="0",this.historyAlphaRow.children[1].textContent=this.state.alpha.toFixed(3),this.historyBetaRow.children[1].textContent=this.state.beta.toFixed(3),this.historyCostRow.children[1].textContent=this.state.history[0].J.toFixed(3),this.historyDeltaRow.children[1].textContent="—",this.historyIterationRow.children[1].classList.add("current-iteration"),this.historyAlphaRow.children[1].classList.add("current-iteration"),this.historyBetaRow.children[1].classList.add("current-iteration"),this.historyCostRow.children[1].classList.add("current-iteration"),this.historyDeltaRow.children[1].classList.add("current-iteration")}addHistoryColumn(iteration,alpha,beta,cost,deltaJ){document.querySelectorAll(".history-table td.current-iteration").forEach(cell=>{cell.classList.remove("current-iteration")});const iterCell=document.createElement("td");iterCell.textContent=iteration,iterCell.classList.add("current-iteration"),this.historyIterationRow.appendChild(iterCell);const alphaCell=document.createElement("td");alphaCell.textContent=alpha.toFixed(3),alphaCell.classList.add("current-iteration"),this.historyAlphaRow.appendChild(alphaCell);const betaCell=document.createElement("td");betaCell.textContent=beta.toFixed(3),betaCell.classList.add("current-iteration"),this.historyBetaRow.appendChild(betaCell);const costCell=document.createElement("td");costCell.textContent=cost.toFixed(3),costCell.classList.add("current-iteration"),this.historyCostRow.appendChild(costCell);const deltaCell=document.createElement("td");deltaCell.textContent=deltaJ.toFixed(4),deltaCell.classList.add("current-iteration"),this.historyDeltaRow.appendChild(deltaCell),this.historyScroll.scrollLeft=this.historyScroll.scrollWidth}render(){this.renderDataView(),this.renderCostView()}renderDataView(){if(!this.dataChart||!this.dataset)return;const dataBounds=this.getDataBounds(this.currentDatasetKey),{xMin:xMin,xMax:xMax,yMin:yMin,yMax:yMax}=dataBounds,dataPoints=this.dataset.map(point=>({x:point.x,y:point.y})),linePoints=[{x:xMin,y:this.state.alpha+this.state.beta*xMin},{x:xMax,y:this.state.alpha+this.state.beta*xMax}];this.dataChart.data.datasets[0].data=dataPoints,this.dataChart.data.datasets[1].data=linePoints,this.dataChart.options.scales.x.min=xMin,this.dataChart.options.scales.x.max=xMax,this.dataChart.options.scales.y.min=yMin,this.dataChart.options.scales.y.max=yMax,this.dataChart.update("none")}renderCostView(){const ctx=this.costCtx,width=this.costWidth,height=this.costHeight;ctx.clearRect(0,0,width,height);const{alphaMin:alphaMin,alphaMax:alphaMax,betaMin:betaMin,betaMax:betaMax,resolution:resolution}=this.gridBounds,xScale=alpha=>40+(alpha-alphaMin)/(alphaMax-alphaMin)*(width-80),yScale=beta=>height-40-(beta-betaMin)/(betaMax-betaMin)*(height-80);if(ctx.strokeStyle="#333",ctx.lineWidth=2,ctx.beginPath(),ctx.moveTo(40,height-40),ctx.lineTo(width-40,height-40),ctx.moveTo(40,40),ctx.lineTo(40,height-40),ctx.stroke(),ctx.fillStyle="#666",ctx.font="12px Arial",ctx.textAlign="center",ctx.fillText("α (normalized intercept)",width/2,height-10),ctx.save(),ctx.translate(15,height/2),ctx.rotate(-Math.PI/2),ctx.fillText("β (normalized slope)",0,0),ctx.restore(),this.costGrid){const cellWidth=(width-80)/resolution,cellHeight=(height-80)/resolution;let minCost=1/0,maxCost=-1/0;for(let i=0;i<resolution;i++)for(let j=0;j<resolution;j++){const cost=this.costGrid[i][j];minCost=Math.min(minCost,cost),maxCost=Math.max(maxCost,cost)}for(let i=0;i<resolution;i++)for(let j=0;j<resolution;j++){const normalized=(this.costGrid[i][j]-minCost)/(maxCost-minCost),r=Math.floor(255*normalized),g=Math.floor(100*(1-normalized)),b=Math.floor(255*(1-normalized));ctx.fillStyle=`rgb(${r}, ${g}, ${b})`,ctx.fillRect(40+i*cellWidth,40+(resolution-1-j)*cellHeight,cellWidth+1,cellHeight+1)}ctx.strokeStyle="rgba(255, 255, 255, 0.3)",ctx.lineWidth=1;const numContours=10;for(let c=1;c<numContours;c++){const threshold=minCost+(maxCost-minCost)*c/numContours;for(let i=0;i<resolution-1;i++)for(let j=0;j<resolution-1;j++){const v00=this.costGrid[i][j],v10=this.costGrid[i+1][j],v01=this.costGrid[i][j+1],v11=this.costGrid[i+1][j+1];if([v00<threshold&&v10>=threshold||v00>=threshold&&v10<threshold,v10<threshold&&v11>=threshold||v10>=threshold&&v11<threshold,v11<threshold&&v01>=threshold||v11>=threshold&&v01<threshold,v01<threshold&&v00>=threshold||v01>=threshold&&v00<threshold].some(c=>c)){const alpha=alphaMin+(alphaMax-alphaMin)*(i+.5)/(resolution-1),beta=betaMin+(betaMax-betaMin)*(j+.5)/(resolution-1);ctx.beginPath(),ctx.arc(xScale(alpha),yScale(beta),1,0,2*Math.PI),ctx.fill()}}}}if(this.state.history.length>1){ctx.strokeStyle="rgba(255, 255, 0, 0.8)",ctx.lineWidth=2,ctx.beginPath();for(let i=0;i<this.state.history.length;i++){const{alpha:alpha,beta:beta}=this.state.history[i];0===i?ctx.moveTo(xScale(alpha),yScale(beta)):ctx.lineTo(xScale(alpha),yScale(beta))}ctx.stroke(),ctx.fillStyle="rgba(255, 255, 0, 0.6)";for(let i=0;i<this.state.history.length-1;i++){const{alpha:alpha,beta:beta}=this.state.history[i];ctx.beginPath(),ctx.arc(xScale(alpha),yScale(beta),3,0,2*Math.PI),ctx.fill()}}ctx.fillStyle="#ff0000",ctx.strokeStyle="#ffffff",ctx.lineWidth=2,ctx.beginPath(),ctx.arc(xScale(this.state.alpha),yScale(this.state.beta),6,0,2*Math.PI),ctx.fill(),ctx.stroke(),ctx.fillStyle="#666",ctx.font="10px Arial";for(let i=0;i<=5;i++){const alphaVal=alphaMin+i*(alphaMax-alphaMin)/5,betaVal=betaMin+i*(betaMax-betaMin)/5;ctx.textAlign="center",ctx.fillText(alphaVal.toFixed(1),xScale(alphaVal),height-40+15),ctx.textAlign="right",ctx.fillText(betaVal.toFixed(1),35,yScale(betaVal)+3)}}}document.addEventListener("DOMContentLoaded",()=>{new GradientDescentDemo});