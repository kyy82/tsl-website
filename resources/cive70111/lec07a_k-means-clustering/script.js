class KMeansDemo{constructor(){this.canvas=document.getElementById("plot"),this.ctx=this.canvas.getContext("2d"),this.kSlider=document.getElementById("k-clusters"),this.kValue=document.getElementById("k-value"),this.stepBtn=document.getElementById("step-btn"),this.finalBtn=document.getElementById("final-btn"),this.resetBtn=document.getElementById("reset-btn"),this.generateDataBtn=document.getElementById("generate-data-btn"),this.showDistancesCheckbox=document.getElementById("show-distances"),this.addDataModeCheckbox=document.getElementById("add-data-mode"),this.iterationDisplay=document.getElementById("iteration-display"),this.statusDisplay=document.getElementById("status-display"),this.pointsCount=document.getElementById("points-count"),this.setupHighDPICanvas(),this.plotWidth=this.displayWidth-80,this.plotHeight=this.displayHeight-80,this.plotX=40,this.plotY=40,this.xMin=-5,this.xMax=5,this.yMin=-5,this.yMax=5,this.k=3,this.dataPoints=[],this.centroids=[],this.assignments=[],this.iteration=0,this.converged=!1,this.isRunning=!1,this.centroidHistory=[],this.addedCentroids=[],this.hoveredCentroid=null,this.draggedCentroid=null,this.isDragging=!1,this.dragOffset={x:0,y:0},this.dragStarted=!1,this.lastMouseX=0,this.lastMouseY=0,this.clusterColors=["#e74c3c","#3498db","#2ecc71","#f39c12","#9b59b6","#1abc9c","#34495e","#e67e22","#8e44ad","#16a085"],this.setupEventListeners(),this.generateInitialData(),this.initializeCentroids(),this.render()}setupHighDPICanvas(){const t=this.canvas.getBoundingClientRect(),i=window.devicePixelRatio||1;this.displayWidth=t.width,this.displayHeight=t.height,this.canvas.width=this.displayWidth*i,this.canvas.height=this.displayHeight*i,this.ctx.scale(i,i),this.canvas.style.width=this.displayWidth+"px",this.canvas.style.height=this.displayHeight+"px"}setupEventListeners(){this.kSlider.addEventListener("input",t=>{const i=parseInt(t.target.value);this.updateK(i),this.kValue.textContent=this.k}),this.stepBtn.addEventListener("click",()=>this.stepForward()),this.finalBtn.addEventListener("click",()=>this.runToCompletion()),this.resetBtn.addEventListener("click",()=>this.resetTraining()),this.generateDataBtn.addEventListener("click",()=>this.generateNewData()),this.showDistancesCheckbox.addEventListener("change",()=>{this.render()}),this.addDataModeCheckbox.addEventListener("change",()=>{if(!this.isRunning&&!this.isDragging){const t=this.getCentroidAtPosition(this.lastMouseX||0,this.lastMouseY||0);this.canvas.style.cursor=null!==t?"grab":this.addDataModeCheckbox.checked?"crosshair":"default"}}),this.canvas.addEventListener("mousedown",t=>this.handleMouseDown(t)),this.canvas.addEventListener("mousemove",t=>this.handleMouseMove(t)),this.canvas.addEventListener("mouseup",t=>this.handleMouseUp(t)),this.canvas.addEventListener("click",t=>{this.isRunning||this.dragStarted||!this.addDataModeCheckbox.checked||this.addDataPoint(t),this.dragStarted=!1}),this.canvas.addEventListener("mouseleave",()=>{null!==this.hoveredCentroid&&(this.hoveredCentroid=null,this.render())})}generateInitialData(){this.dataPoints=[];for(let t=0;t<20;t++)this.dataPoints.push({x:Math.random()*(this.xMax-this.xMin)+this.xMin,y:Math.random()*(this.yMax-this.yMin)+this.yMin});this.updatePointsCount()}initializeCentroids(){this.centroids=[],this.centroidHistory=[],this.addedCentroids=[];for(let t=0;t<this.k;t++)this.centroids.push({x:Math.random()*(this.xMax-this.xMin)+this.xMin,y:Math.random()*(this.yMax-this.yMin)+this.yMin});this.assignments=new Array(this.dataPoints.length).fill(0)}updateK(t){const i=this.k;if(this.k=t,t>i)for(let s=i;s<t;s++)if(this.centroidHistory.length>0){const t=this.centroidHistory.pop();this.centroids.push(t)}else{const t={x:Math.random()*(this.xMax-this.xMin)+this.xMin,y:Math.random()*(this.yMax-this.yMin)+this.yMin};this.centroids.push(t),this.addedCentroids.push(t)}else if(t<i)for(let s=i;s>t;s--){let t;if(this.addedCentroids.length>0){const i=this.addedCentroids.pop(),s=this.centroids.findIndex(t=>t===i);-1!==s&&(t=this.centroids.splice(s,1)[0])}t||(t=this.centroids.pop()),this.centroidHistory.push(t)}this.iteration=0,this.converged=!1,this.isRunning=!1,this.iterationDisplay.textContent="0",this.statusDisplay.textContent="Ready";for(let i=0;i<this.assignments.length;i++)if(this.assignments[i]>=t){const s=this.dataPoints[i];let e=1/0,n=0;for(let i=0;i<t;i++){const t=this.euclideanDistance(s,this.centroids[i]);t<e&&(e=t,n=i)}this.assignments[i]=n}this.render()}handleMouseDown(t){if(this.isRunning)return;const i=this.canvas.getBoundingClientRect(),s=t.clientX-i.left,e=t.clientY-i.top,n=this.getCentroidAtPosition(s,e);if(null!==n){this.isDragging=!0,this.draggedCentroid=n,this.dragStarted=!1;const i=this.centroids[n],h=this.dataToCanvasX(i.x),a=this.dataToCanvasY(i.y);this.dragOffset.x=s-h,this.dragOffset.y=e-a,this.canvas.style.cursor="grabbing",t.preventDefault()}}handleMouseMove(t){if(this.isRunning)return void(this.canvas.style.cursor="default");const i=this.canvas.getBoundingClientRect(),s=t.clientX-i.left,e=t.clientY-i.top;if(this.lastMouseX=s,this.lastMouseY=e,this.isDragging&&null!==this.draggedCentroid){this.dragStarted=!0;const t=this.canvasToDataX(s-this.dragOffset.x),i=this.canvasToDataY(e-this.dragOffset.y),n=Math.max(this.xMin,Math.min(this.xMax,t)),h=Math.max(this.yMin,Math.min(this.yMax,i));this.centroids[this.draggedCentroid].x=n,this.centroids[this.draggedCentroid].y=h,this.iteration>0&&(this.converged=!1,this.statusDisplay.textContent="Ready",this.assignPoints()),this.render()}else{const t=this.getCentroidAtPosition(s,e);null!==t?(this.canvas.style.cursor="grab",this.hoveredCentroid!==t&&(this.hoveredCentroid=t,this.render())):(this.canvas.style.cursor=this.addDataModeCheckbox.checked?"crosshair":"default",null!==this.hoveredCentroid&&(this.hoveredCentroid=null,this.render()))}}handleMouseUp(t){if(this.isDragging){this.isDragging=!1,this.draggedCentroid=null,this.canvas.style.cursor=this.addDataModeCheckbox.checked?"crosshair":"default";const i=this.canvas.getBoundingClientRect(),s=t.clientX-i.left,e=t.clientY-i.top,n=this.getCentroidAtPosition(s,e);null!==n?(this.canvas.style.cursor="grab",this.hoveredCentroid=n):this.hoveredCentroid=null,this.render()}}getCentroidAtPosition(t,i){for(let s=0;s<this.centroids.length;s++){const e=this.centroids[s],n=this.dataToCanvasX(e.x),h=this.dataToCanvasY(e.y);if(Math.sqrt(Math.pow(t-n,2)+Math.pow(i-h,2))<=12)return s}return null}addDataPoint(t){const i=this.canvas.getBoundingClientRect(),s=t.clientX-i.left,e=t.clientY-i.top,n=this.canvasToDataX(s),h=this.canvasToDataY(e);n>=this.xMin&&n<=this.xMax&&h>=this.yMin&&h<=this.yMax&&(this.dataPoints.push({x:n,y:h}),this.assignments.push(0),this.updatePointsCount(),this.iteration>0&&this.assignPoint(this.dataPoints.length-1),this.converged&&(this.converged=!1,this.statusDisplay.textContent="Ready"),this.render())}stepForward(){if(this.converged)return;const t=this.centroids.map(t=>({...t}));this.assignPoints(),this.updateCentroids(),this.iteration++,this.iterationDisplay.textContent=this.iteration,this.checkConvergence(t),this.render()}assignPoints(){for(let t=0;t<this.dataPoints.length;t++)this.assignPoint(t)}assignPoint(t){const i=this.dataPoints[t];let s=1/0,e=0;for(let t=0;t<this.centroids.length;t++){const n=this.euclideanDistance(i,this.centroids[t]);n<s&&(s=n,e=t)}this.assignments[t]=e}updateCentroids(){for(let t=0;t<this.k;t++){const i=this.dataPoints.filter((i,s)=>this.assignments[s]===t);if(i.length>0){const s=i.reduce((t,i)=>t+i.x,0),e=i.reduce((t,i)=>t+i.y,0);this.centroids[t]={x:s/i.length,y:e/i.length}}}}checkConvergence(t){let i=0;for(let s=0;s<this.k;s++){const e=this.euclideanDistance(this.centroids[s],t[s]);i=Math.max(i,e)}this.converged=i<.01,this.statusDisplay.textContent=this.converged?"Converged":"Running"}runToCompletion(){if(this.converged)return;this.isRunning=!0,this.statusDisplay.textContent="Running to completion...";const t=()=>{this.converged?this.isRunning=!1:(this.stepForward(),this.converged?this.isRunning=!1:setTimeout(t,200))};t()}resetTraining(){this.iteration=0,this.converged=!1,this.isRunning=!1,this.iterationDisplay.textContent="0",this.statusDisplay.textContent="Ready",this.initializeCentroids(),this.render()}generateNewData(){this.generateInitialData(),this.centroidHistory=[],this.addedCentroids=[],this.initializeCentroids(),this.resetTraining()}reset(){this.iteration=0,this.converged=!1,this.isRunning=!1,this.iterationDisplay.textContent="0",this.statusDisplay.textContent="Ready",this.generateInitialData(),this.initializeCentroids(),this.render()}euclideanDistance(t,i){const s=t.x-i.x,e=t.y-i.y;return Math.sqrt(s*s+e*e)}updatePointsCount(){this.pointsCount.textContent=this.dataPoints.length}dataToCanvasX(t){return this.plotX+(t-this.xMin)*(this.plotWidth/(this.xMax-this.xMin))}dataToCanvasY(t){return this.plotY+(this.yMax-t)*(this.plotHeight/(this.yMax-this.yMin))}canvasToDataX(t){return this.xMin+(t-this.plotX)*(this.xMax-this.xMin)/this.plotWidth}canvasToDataY(t){return this.yMax-(t-this.plotY)*(this.yMax-this.yMin)/this.plotHeight}render(){this.ctx.clearRect(0,0,this.displayWidth,this.displayHeight),this.drawGrid(),this.drawAxes(),this.drawDataPoints(),this.drawClusterLines(),this.drawCentroids()}drawGrid(){this.ctx.strokeStyle="#e0e0e0",this.ctx.lineWidth=.5;for(let t=Math.ceil(this.xMin);t<=Math.floor(this.xMax);t++){const i=this.dataToCanvasX(t);this.ctx.beginPath(),this.ctx.moveTo(i,this.plotY),this.ctx.lineTo(i,this.plotY+this.plotHeight),this.ctx.stroke()}for(let t=Math.ceil(this.yMin);t<=Math.floor(this.yMax);t++){const i=this.dataToCanvasY(t);this.ctx.beginPath(),this.ctx.moveTo(this.plotX,i),this.ctx.lineTo(this.plotX+this.plotWidth,i),this.ctx.stroke()}}drawAxes(){this.ctx.strokeStyle="#333",this.ctx.lineWidth=1;const t=this.dataToCanvasY(0);this.ctx.beginPath(),this.ctx.moveTo(this.plotX,t),this.ctx.lineTo(this.plotX+this.plotWidth,t),this.ctx.stroke();const i=this.dataToCanvasX(0);this.ctx.beginPath(),this.ctx.moveTo(i,this.plotY),this.ctx.lineTo(i,this.plotY+this.plotHeight),this.ctx.stroke(),this.ctx.fillStyle="#666",this.ctx.font="12px sans-serif",this.ctx.textAlign="center",this.ctx.fillText("X",this.plotX+this.plotWidth-10,t-5),this.ctx.textAlign="left",this.ctx.fillText("Y",i+5,this.plotY+15)}drawDataPoints(){this.dataPoints.forEach((t,i)=>{const s=this.dataToCanvasX(t.x),e=this.dataToCanvasY(t.y),n=this.assignments[i]||0,h=this.clusterColors[n%this.clusterColors.length];this.ctx.strokeStyle=h,this.ctx.fillStyle="white",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.arc(s,e,6,0,2*Math.PI),this.ctx.fill(),this.ctx.stroke()})}drawClusterLines(){const t=this.showDistancesCheckbox.checked,i=!t&&null!==this.hoveredCentroid;if(t||i){if(this.ctx.lineWidth=1,this.ctx.setLineDash([5,5]),t)for(let t=0;t<this.centroids.length;t++){const i=this.centroids[t],s=this.clusterColors[t%this.clusterColors.length];this.ctx.strokeStyle=s;const e=this.dataToCanvasX(i.x),n=this.dataToCanvasY(i.y);this.dataPoints.forEach((i,s)=>{if(this.assignments[s]===t){const t=this.dataToCanvasX(i.x),s=this.dataToCanvasY(i.y);this.ctx.beginPath(),this.ctx.moveTo(e,n),this.ctx.lineTo(t,s),this.ctx.stroke()}})}else if(i){const t=this.hoveredCentroid,i=this.centroids[t],s=this.clusterColors[t%this.clusterColors.length];this.ctx.strokeStyle=s;const e=this.dataToCanvasX(i.x),n=this.dataToCanvasY(i.y);this.dataPoints.forEach((i,s)=>{if(this.assignments[s]===t){const t=this.dataToCanvasX(i.x),s=this.dataToCanvasY(i.y);this.ctx.beginPath(),this.ctx.moveTo(e,n),this.ctx.lineTo(t,s),this.ctx.stroke()}})}this.ctx.setLineDash([])}}drawCentroids(){this.centroids.forEach((t,i)=>{const s=this.dataToCanvasX(t.x),e=this.dataToCanvasY(t.y),n=this.clusterColors[i%this.clusterColors.length];this.ctx.fillStyle=n,this.ctx.strokeStyle="#333",this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.arc(s,e,8,0,2*Math.PI),this.ctx.fill(),this.ctx.stroke()})}}document.addEventListener("DOMContentLoaded",()=>{new KMeansDemo});