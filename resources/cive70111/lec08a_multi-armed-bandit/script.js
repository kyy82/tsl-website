class MultiarmedBanditDemo{constructor(){this.banditSession=new BanditSession(50),this.banditSimulator=new BanditSimulator,this.armButtons={1:document.getElementById("arm1-btn"),2:document.getElementById("arm2-btn"),3:document.getElementById("arm3-btn")},this.statElements={1:{total:document.getElementById("arm1-total"),count:document.getElementById("arm1-count"),mean:document.getElementById("arm1-mean")},2:{total:document.getElementById("arm2-total"),count:document.getElementById("arm2-count"),mean:document.getElementById("arm2-mean")},3:{total:document.getElementById("arm3-total"),count:document.getElementById("arm3-count"),mean:document.getElementById("arm3-mean")}},this.totalPullsElement=document.getElementById("total-pulls"),this.totalRewardsElement=document.getElementById("total-rewards"),this.resultsContainer=document.getElementById("results-container"),this.explorationDisplay=document.getElementById("exploration-display"),this.performanceDisplay=document.getElementById("performance-display"),this.explorationProgress=document.getElementById("exploration-progress"),this.distributionReveal=document.getElementById("distribution-reveal"),this.distributionDisplay=document.getElementById("distribution-display"),this.exploreBtn=document.getElementById("explore-btn"),this.trainedBtn=document.getElementById("trained-btn"),this.revealBtn=document.getElementById("reveal-btn"),this.isAnimating=!1,this.initializeDemo()}async initializeDemo(){try{await this.initializeFrontend(),this.resetUserSession(!1),console.log("Multi-armed bandit demo initialized successfully")}catch(error){console.error("Failed to initialize demo:",error),this.showError("Failed to initialize frontend components.")}}async initializeFrontend(){console.log("Initializing frontend bandit components...");try{return await this.banditSimulator.loadBanditData(),console.log("Frontend initialization successful"),{status:"ready",message:"Frontend components initialized"}}catch(error){throw console.error("Frontend initialization error:",error),error}}updateSessionState(){try{const statistics=this.banditSession.getStatistics(),canPull=this.banditSession.canPull();this.updateUI(statistics),this.updateButtonStates(canPull)}catch(error){console.error("Error updating session state:",error)}}updateUI(statistics){this.totalPullsElement.textContent=statistics.total_pulls;const totalRewards=statistics.arm_rewards.reduce((sum,reward)=>sum+reward,0);this.totalRewardsElement.textContent=totalRewards,this.totalRewardsElement.style.color=totalRewards>0?"#28a745":totalRewards<0?"#dc3545":"#007bff";for(let arm=1;arm<=3;arm++){const armIndex=arm-1;this.statElements[arm].total.textContent=statistics.arm_rewards[armIndex],this.statElements[arm].count.textContent=statistics.arm_pulls[armIndex],this.statElements[arm].mean.textContent=statistics.arm_means[armIndex].toFixed(3)}}updateButtonStates(canPull){const disabled=!canPull||this.isAnimating;for(let arm=1;arm<=3;arm++)this.armButtons[arm].disabled=disabled}showError(message){alert(`Error: ${message}`)}showSuccess(reward,unused=null,armIndex=null){const color=reward>0?"#28a745":reward<0?"#dc3545":"#6c757d",prefix=reward>0?"+":"";this.showToast(`${prefix}${reward}`,color,armIndex)}showToast(message,color="blue",armIndex=null){const toast=document.createElement("div");let position="";if(armIndex&&this.armButtons[armIndex]){const buttonRect=this.armButtons[armIndex].getBoundingClientRect();position=`\n                position: fixed;\n                left: ${buttonRect.left+buttonRect.width/2}px;\n                top: ${buttonRect.top-10}px;\n                transform: translateX(-50%) translateY(-100%);\n            `}else position="\n                position: fixed;\n                top: 20px;\n                left: 50%;\n                transform: translateX(-50%);\n            ";if(toast.style.cssText=`\n            ${position}\n            background: ${color};\n            color: white;\n            padding: 12px 20px;\n            border-radius: 8px;\n            z-index: 1000;\n            font-weight: bold;\n            font-size: 14px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n            border: 2px solid rgba(255,255,255,0.2);\n            animation: toastSlideIn 0.3s ease-out;\n        `,toast.textContent=message,!document.querySelector("#toast-styles")){const styleSheet=document.createElement("style");styleSheet.id="toast-styles",styleSheet.textContent="\n                @keyframes toastSlideIn {\n                    from {\n                        opacity: 0;\n                        transform: translateX(-50%) translateY(-120%) scale(0.8);\n                    }\n                    to {\n                        opacity: 1;\n                        transform: translateX(-50%) translateY(-100%) scale(1);\n                    }\n                }\n                @keyframes toastSlideOut {\n                    from {\n                        opacity: 1;\n                        transform: translateX(-50%) translateY(-100%) scale(1);\n                    }\n                    to {\n                        opacity: 0;\n                        transform: translateX(-50%) translateY(-120%) scale(0.8);\n                    }\n                }\n            ",document.head.appendChild(styleSheet)}document.body.appendChild(toast),setTimeout(()=>{toast.style.animation="toastSlideOut 0.3s ease-in forwards",setTimeout(()=>{toast.parentNode&&toast.parentNode.removeChild(toast)},300)},2500)}pullArm(arm){if(!this.isAnimating)try{this.armButtons[arm].style.transform="scale(0.95)",setTimeout(()=>{this.armButtons[arm].style.transform=""},150);const result=this.banditSession.pullArm(arm);result.success?(this.updateUI(result.statistics),this.updateButtonStates(result.statistics.total_pulls<result.statistics.max_pulls),this.showSuccess(result.reward,null,arm)):this.showError(result.message)}catch(error){console.error("Error pulling arm:",error),this.showError("Failed to pull arm. Please try again.")}}resetUserSession(showMessage=!0){try{this.banditSession.reset();const statistics=this.banditSession.getStatistics();this.updateUI(statistics),this.updateButtonStates(!0),showMessage&&this.showToast("Game reset successfully!","#28a745"),this.resultsContainer.style.display="none",this.distributionReveal.classList.add("hidden")}catch(error){console.error("Error resetting session:",error),this.showError("Failed to reset session. Please try again.")}}async demonstrateExploration(){if(!this.isAnimating)try{this.isAnimating=!0,this.updateButtonStates(!1),this.setDemoButtonStates(!1),this.resultsContainer.style.display="grid",this.explorationDisplay.textContent="Starting exploration demonstration...",this.performanceDisplay.textContent="Algorithm estimates will appear here...",this.explorationProgress.style.width="0%",this.resultsContainer.offsetHeight;const results=await this.banditSimulator.demonstrateExploration(50);await this.animateExploration(results)}catch(error){console.error("Error in exploration demo:",error),this.showError("Failed to run exploration demo. Please try again.")}finally{this.isAnimating=!1,this.updateButtonStates(!0),this.setDemoButtonStates(!0)}}async animateExploration(results){const history=results.simulation_steps,summary=results.summary,trueMeans=[0,.4,.5];for(let i=0;i<history.length;i++){const step=history[i],progress=(i+1)/history.length*100;this.explorationProgress.style.width=`${progress}%`;const actionType="explore"===step.action_type?"🔍 EXPLORE":"⚡ EXPLOIT";this.explorationDisplay.innerHTML=`\n                <strong>Step ${step.step+1}/${history.length}</strong><br>\n                Action: ${actionType}<br>\n                Chose Arm ${step.arm+1}, Got Reward: ${step.reward}<br>\n                Cumulative Reward: ${step.total_reward.toFixed(1)}\n            `;let estimatesText="<strong>Algorithm Estimates:</strong><br>";for(let j=0;j<3;j++){estimatesText+=`Arm ${j+1}: ${step.estimates[j].toFixed(3)} (true: ${trueMeans[j].toFixed(3)}, pulls: ${step.counts[j]})<br>`}this.performanceDisplay.innerHTML=estimatesText,await new Promise(resolve=>setTimeout(resolve,100))}this.explorationDisplay.innerHTML=`\n            <strong>Exploration Complete!</strong><br>\n            Total Reward: ${summary.total_reward.toFixed(1)}<br>\n            Average Reward: ${summary.average_reward.toFixed(3)}<br>\n            Algorithm has learned the arm values!\n        `}async demonstrateTrained(){if(!this.isAnimating)try{this.isAnimating=!0,this.updateButtonStates(!1),this.setDemoButtonStates(!1),this.resultsContainer.style.display="grid",this.explorationDisplay.textContent="Running trained algorithm demonstration...",this.performanceDisplay.textContent="Performance metrics will appear here...",this.explorationProgress.style.width="0%",this.resultsContainer.offsetHeight;const results=await this.banditSimulator.demonstrateTrained(50);await this.animateTrainedPerformance(results)}catch(error){console.error("Error in trained demo:",error),this.showError("Failed to run trained demo. Please try again.")}finally{this.isAnimating=!1,this.updateButtonStates(!0),this.setDemoButtonStates(!0)}}async animateTrainedPerformance(results){const history=results.simulation_steps,trueMeans=[0,.4,.5],finalEstimates=results.summary.initial_estimates;let cumulativeReward=0,armPulls=[0,0,0],armRewards=[0,0,0];for(let i=0;i<history.length;i++){const step=history[i];cumulativeReward+=step.reward,armPulls[step.arm]++,armRewards[step.arm]+=step.reward;const progress=(i+1)/history.length*100;this.explorationProgress.style.width=`${progress}%`;const actionType="explore"===step.action_type?"🔍 EXPLORE":"⚡ EXPLOIT";this.explorationDisplay.innerHTML=`\n                <strong>Step ${step.step+1}/${history.length}</strong><br>\n                Action: ${actionType}<br>\n                Chose Arm ${step.arm+1}, Got Reward: ${step.reward}<br>\n                Cumulative Reward: ${cumulativeReward.toFixed(1)}\n            `;let performanceText="<strong>Pure Greedy Performance:</strong><br>";for(let j=0;j<3;j++){performanceText+=`Arm ${j+1}: Mean=${armPulls[j]>0?(armRewards[j]/armPulls[j]).toFixed(3):"0.000"}, Pulls=${armPulls[j]}<br>`}performanceText+=`<br>Overall Average: ${(cumulativeReward/(i+1)).toFixed(3)}`,this.performanceDisplay.innerHTML=performanceText,await new Promise(resolve=>setTimeout(resolve,80))}setTimeout(()=>{let finalText="<strong>Pure Greedy Demo Results:</strong><br>";for(let j=0;j<3;j++){finalText+=`Arm ${j+1}: Mean=${armPulls[j]>0?(armRewards[j]/armPulls[j]).toFixed(3):"0.000"}, Pulls=${armPulls[j]}<br>`}finalText+="<br><strong>Agent's Learned Estimates (Fixed):</strong><br>";for(let j=0;j<3;j++){finalText+=`Arm ${j+1}: Learned=${finalEstimates[j].toFixed(3)}, True=${trueMeans[j].toFixed(3)}<br>`}this.performanceDisplay.innerHTML=finalText},1e3),this.explorationDisplay.innerHTML=`\n            <strong>Pure Greedy Performance Complete!</strong><br>\n            Total Reward: ${cumulativeReward.toFixed(1)}<br>\n            Average Reward: ${(cumulativeReward/history.length).toFixed(3)}<br>\n            Optimal Arm Usage: ${results.summary.optimal_percentage.toFixed(1)}%\n        `}async revealDistributions(){try{const data=await this.banditSimulator.revealDistributions();this.displayDistributions(data)}catch(error){console.error("Error revealing distributions:",error),this.showError("Failed to reveal distributions. Please try again.")}}displayDistributions(data){let distributionText="<h4>True Probability Distributions</h4>";data.arms_info.forEach(armInfo=>{distributionText+='<div style="margin: 10px 0; padding: 10px; background: #f8f9fa; border-radius: 4px;">',distributionText+=`<strong>Arm ${armInfo.arm}:</strong><br>`;let distText="";for(let i=0;i<armInfo.rewards.length;i++)i>0&&(distText+=", "),distText+=`P(${armInfo.rewards[i]}) = ${armInfo.probabilities[i]}`;distributionText+=`${distText}<br>`,distributionText+=`<strong>Expected Reward: ${armInfo.expected_reward.toFixed(3)}</strong>`,distributionText+="</div>"}),distributionText+='<div style="margin: 15px 0; padding: 10px; background: #e8f5e8; border-radius: 4px;">',distributionText+=`<strong>Optimal Strategy:</strong> Choose Arm ${data.optimal_arm} (highest expected reward)`,distributionText+="</div>",distributionText+='<div style="margin: 10px 0; font-size: 14px; line-height: 1.5;">',distributionText+="The epsilon-greedy algorithm balances exploration and exploitation by choosing the best-known arm most of the time, but occasionally exploring other options to gather more information.",distributionText+="</div>",this.distributionDisplay.innerHTML=distributionText,this.distributionReveal.classList.remove("hidden"),this.distributionReveal.scrollIntoView({behavior:"smooth"})}setDemoButtonStates(enabled){this.exploreBtn.disabled=!enabled,this.trainedBtn.disabled=!enabled,this.revealBtn.disabled=!enabled}}function pullArm(arm){window.banditDemo&&window.banditDemo.pullArm(arm)}function resetUserSession(){window.banditDemo&&window.banditDemo.resetUserSession()}function demonstrateExploration(){window.banditDemo&&window.banditDemo.demonstrateExploration()}function demonstrateTrained(){window.banditDemo&&window.banditDemo.demonstrateTrained()}function revealDistributions(){window.banditDemo&&window.banditDemo.revealDistributions()}document.addEventListener("DOMContentLoaded",()=>{new DemoTabController,window.banditDemo=new MultiarmedBanditDemo});