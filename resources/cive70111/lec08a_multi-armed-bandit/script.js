class MultiarmedBanditDemo{constructor(){this.banditSession=new BanditSession(50),this.banditSimulator=new BanditSimulator,this.armButtons={1:document.getElementById("arm1-btn"),2:document.getElementById("arm2-btn"),3:document.getElementById("arm3-btn")},this.statElements={1:{total:document.getElementById("arm1-total"),count:document.getElementById("arm1-count"),mean:document.getElementById("arm1-mean")},2:{total:document.getElementById("arm2-total"),count:document.getElementById("arm2-count"),mean:document.getElementById("arm2-mean")},3:{total:document.getElementById("arm3-total"),count:document.getElementById("arm3-count"),mean:document.getElementById("arm3-mean")}},this.totalPullsElement=document.getElementById("total-pulls"),this.totalRewardsElement=document.getElementById("total-rewards"),this.resultsContainer=document.getElementById("results-container"),this.explorationDisplay=document.getElementById("exploration-display"),this.performanceDisplay=document.getElementById("performance-display"),this.explorationProgress=document.getElementById("exploration-progress"),this.distributionReveal=document.getElementById("distribution-reveal"),this.distributionDisplay=document.getElementById("distribution-display"),this.exploreBtn=document.getElementById("explore-btn"),this.trainedBtn=document.getElementById("trained-btn"),this.revealBtn=document.getElementById("reveal-btn"),this.isAnimating=!1,this.initializeDemo()}async initializeDemo(){try{await this.initializeFrontend(),this.resetUserSession(!1),console.log("Multi-armed bandit demo initialized successfully")}catch(t){console.error("Failed to initialize demo:",t),this.showError("Failed to initialize frontend components.")}}async initializeFrontend(){console.log("Initializing frontend bandit components...");try{return await this.banditSimulator.loadBanditData(),console.log("Frontend initialization successful"),{status:"ready",message:"Frontend components initialized"}}catch(t){throw console.error("Frontend initialization error:",t),t}}updateSessionState(){try{const t=this.banditSession.getStatistics(),e=this.banditSession.canPull();this.updateUI(t),this.updateButtonStates(e)}catch(t){console.error("Error updating session state:",t)}}updateUI(t){this.totalPullsElement.textContent=t.total_pulls;const e=t.arm_rewards.reduce(((t,e)=>t+e),0);this.totalRewardsElement.textContent=e,this.totalRewardsElement.style.color=e>0?"#28a745":e<0?"#dc3545":"#007bff";for(let e=1;e<=3;e++){const n=e-1;this.statElements[e].total.textContent=t.arm_rewards[n],this.statElements[e].count.textContent=t.arm_pulls[n],this.statElements[e].mean.textContent=t.arm_means[n].toFixed(3)}}updateButtonStates(t){const e=!t||this.isAnimating;for(let t=1;t<=3;t++)this.armButtons[t].disabled=e}showError(t){alert(`Error: ${t}`)}showSuccess(t,e=null,n=null){const i=t>0?"#28a745":t<0?"#dc3545":"#6c757d",s=t>0?"+":"";this.showToast(`${s}${t}`,i,n)}showToast(t,e="blue",n=null){const i=document.createElement("div");let s="";if(n&&this.armButtons[n]){const t=this.armButtons[n].getBoundingClientRect();s=`\n                position: fixed;\n                left: ${t.left+t.width/2}px;\n                top: ${t.top-10}px;\n                transform: translateX(-50%) translateY(-100%);\n            `}else s="\n                position: fixed;\n                top: 20px;\n                left: 50%;\n                transform: translateX(-50%);\n            ";if(i.style.cssText=`\n            ${s}\n            background: ${e};\n            color: white;\n            padding: 12px 20px;\n            border-radius: 8px;\n            z-index: 1000;\n            font-weight: bold;\n            font-size: 14px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n            border: 2px solid rgba(255,255,255,0.2);\n            animation: toastSlideIn 0.3s ease-out;\n        `,i.textContent=t,!document.querySelector("#toast-styles")){const t=document.createElement("style");t.id="toast-styles",t.textContent="\n                @keyframes toastSlideIn {\n                    from {\n                        opacity: 0;\n                        transform: translateX(-50%) translateY(-120%) scale(0.8);\n                    }\n                    to {\n                        opacity: 1;\n                        transform: translateX(-50%) translateY(-100%) scale(1);\n                    }\n                }\n                @keyframes toastSlideOut {\n                    from {\n                        opacity: 1;\n                        transform: translateX(-50%) translateY(-100%) scale(1);\n                    }\n                    to {\n                        opacity: 0;\n                        transform: translateX(-50%) translateY(-120%) scale(0.8);\n                    }\n                }\n            ",document.head.appendChild(t)}document.body.appendChild(i),setTimeout((()=>{i.style.animation="toastSlideOut 0.3s ease-in forwards",setTimeout((()=>{i.parentNode&&i.parentNode.removeChild(i)}),300)}),2500)}pullArm(t){if(!this.isAnimating)try{this.armButtons[t].style.transform="scale(0.95)",setTimeout((()=>{this.armButtons[t].style.transform=""}),150);const e=this.banditSession.pullArm(t);e.success?(this.updateUI(e.statistics),this.updateButtonStates(e.statistics.total_pulls<e.statistics.max_pulls),this.showSuccess(e.reward,null,t)):this.showError(e.message)}catch(t){console.error("Error pulling arm:",t),this.showError("Failed to pull arm. Please try again.")}}resetUserSession(t=!0){try{this.banditSession.reset();const e=this.banditSession.getStatistics();this.updateUI(e),this.updateButtonStates(!0),t&&this.showToast("Game reset successfully!","#28a745"),this.resultsContainer.style.display="none",this.distributionReveal.classList.add("hidden")}catch(t){console.error("Error resetting session:",t),this.showError("Failed to reset session. Please try again.")}}async demonstrateExploration(){if(!this.isAnimating)try{this.isAnimating=!0,this.updateButtonStates(!1),this.setDemoButtonStates(!1),this.resultsContainer.style.display="grid",this.explorationDisplay.textContent="Starting exploration demonstration...",this.performanceDisplay.textContent="Algorithm estimates will appear here...",this.explorationProgress.style.width="0%",this.resultsContainer.offsetHeight;const t=await this.banditSimulator.demonstrateExploration(50);await this.animateExploration(t)}catch(t){console.error("Error in exploration demo:",t),this.showError("Failed to run exploration demo. Please try again.")}finally{this.isAnimating=!1,this.updateButtonStates(!0),this.setDemoButtonStates(!0)}}async animateExploration(t){const e=t.simulation_steps,n=t.summary,i=[0,.4,.5];for(let t=0;t<e.length;t++){const n=e[t],s=(t+1)/e.length*100;this.explorationProgress.style.width=`${s}%`;const o="explore"===n.action_type?"🔍 EXPLORE":"⚡ EXPLOIT";this.explorationDisplay.innerHTML=`\n                <strong>Step ${n.step+1}/${e.length}</strong><br>\n                Action: ${o}<br>\n                Chose Arm ${n.arm+1}, Got Reward: ${n.reward}<br>\n                Cumulative Reward: ${n.total_reward.toFixed(1)}\n            `;let r="<strong>Algorithm Estimates:</strong><br>";for(let t=0;t<3;t++){r+=`Arm ${t+1}: ${n.estimates[t].toFixed(3)} (true: ${i[t].toFixed(3)}, pulls: ${n.counts[t]})<br>`}this.performanceDisplay.innerHTML=r,await new Promise((t=>setTimeout(t,100)))}this.explorationDisplay.innerHTML=`\n            <strong>Exploration Complete!</strong><br>\n            Total Reward: ${n.total_reward.toFixed(1)}<br>\n            Average Reward: ${n.average_reward.toFixed(3)}<br>\n            Algorithm has learned the arm values!\n        `}async demonstrateTrained(){if(!this.isAnimating)try{this.isAnimating=!0,this.updateButtonStates(!1),this.setDemoButtonStates(!1),this.resultsContainer.style.display="grid",this.explorationDisplay.textContent="Running trained algorithm demonstration...",this.performanceDisplay.textContent="Performance metrics will appear here...",this.explorationProgress.style.width="0%",this.resultsContainer.offsetHeight;const t=await this.banditSimulator.demonstrateTrained(50);await this.animateTrainedPerformance(t)}catch(t){console.error("Error in trained demo:",t),this.showError("Failed to run trained demo. Please try again.")}finally{this.isAnimating=!1,this.updateButtonStates(!0),this.setDemoButtonStates(!0)}}async animateTrainedPerformance(t){const e=t.simulation_steps,n=[0,.4,.5],i=t.summary.initial_estimates;let s=0,o=[0,0,0],r=[0,0,0];for(let t=0;t<e.length;t++){const n=e[t];s+=n.reward,o[n.arm]++,r[n.arm]+=n.reward;const i=(t+1)/e.length*100;this.explorationProgress.style.width=`${i}%`;const a="explore"===n.action_type?"🔍 EXPLORE":"⚡ EXPLOIT";this.explorationDisplay.innerHTML=`\n                <strong>Step ${n.step+1}/${e.length}</strong><br>\n                Action: ${a}<br>\n                Chose Arm ${n.arm+1}, Got Reward: ${n.reward}<br>\n                Cumulative Reward: ${s.toFixed(1)}\n            `;let l="<strong>Pure Greedy Performance:</strong><br>";for(let t=0;t<3;t++){l+=`Arm ${t+1}: Mean=${o[t]>0?(r[t]/o[t]).toFixed(3):"0.000"}, Pulls=${o[t]}<br>`}l+=`<br>Overall Average: ${(s/(t+1)).toFixed(3)}`,this.performanceDisplay.innerHTML=l,await new Promise((t=>setTimeout(t,80)))}setTimeout((()=>{let t="<strong>Pure Greedy Demo Results:</strong><br>";for(let e=0;e<3;e++){t+=`Arm ${e+1}: Mean=${o[e]>0?(r[e]/o[e]).toFixed(3):"0.000"}, Pulls=${o[e]}<br>`}t+="<br><strong>Agent's Learned Estimates (Fixed):</strong><br>";for(let e=0;e<3;e++){t+=`Arm ${e+1}: Learned=${i[e].toFixed(3)}, True=${n[e].toFixed(3)}<br>`}this.performanceDisplay.innerHTML=t}),1e3),this.explorationDisplay.innerHTML=`\n            <strong>Pure Greedy Performance Complete!</strong><br>\n            Total Reward: ${s.toFixed(1)}<br>\n            Average Reward: ${(s/e.length).toFixed(3)}<br>\n            Optimal Arm Usage: ${t.summary.optimal_percentage.toFixed(1)}%\n        `}async revealDistributions(){try{const t=await this.banditSimulator.revealDistributions();this.displayDistributions(t)}catch(t){console.error("Error revealing distributions:",t),this.showError("Failed to reveal distributions. Please try again.")}}displayDistributions(t){let e="<h4>True Probability Distributions</h4>";t.arms_info.forEach((t=>{e+='<div style="margin: 10px 0; padding: 10px; background: #f8f9fa; border-radius: 4px;">',e+=`<strong>Arm ${t.arm}:</strong><br>`;let n="";for(let e=0;e<t.rewards.length;e++)e>0&&(n+=", "),n+=`P(${t.rewards[e]}) = ${t.probabilities[e]}`;e+=`${n}<br>`,e+=`<strong>Expected Reward: ${t.expected_reward.toFixed(3)}</strong>`,e+="</div>"})),e+='<div style="margin: 15px 0; padding: 10px; background: #e8f5e8; border-radius: 4px;">',e+=`<strong>Optimal Strategy:</strong> Choose Arm ${t.optimal_arm} (highest expected reward)`,e+="</div>",e+='<div style="margin: 10px 0; font-size: 14px; line-height: 1.5;">',e+="The epsilon-greedy algorithm balances exploration and exploitation by choosing the best-known arm most of the time, but occasionally exploring other options to gather more information.",e+="</div>",this.distributionDisplay.innerHTML=e,this.distributionReveal.classList.remove("hidden"),this.distributionReveal.scrollIntoView({behavior:"smooth"})}setDemoButtonStates(t){this.exploreBtn.disabled=!t,this.trainedBtn.disabled=!t,this.revealBtn.disabled=!t}}function pullArm(t){window.banditDemo&&window.banditDemo.pullArm(t)}function resetUserSession(){window.banditDemo&&window.banditDemo.resetUserSession()}function demonstrateExploration(){window.banditDemo&&window.banditDemo.demonstrateExploration()}function demonstrateTrained(){window.banditDemo&&window.banditDemo.demonstrateTrained()}function revealDistributions(){window.banditDemo&&window.banditDemo.revealDistributions()}document.addEventListener("DOMContentLoaded",(()=>{window.banditDemo=new MultiarmedBanditDemo}));