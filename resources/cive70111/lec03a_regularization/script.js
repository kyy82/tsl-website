class PolynomialRegularizationDemo{constructor(){this.canvas=document.getElementById("plot"),this.ctx=this.canvas.getContext("2d"),this.equation=document.getElementById("equation"),this.mseDisplay=document.getElementById("mse"),this.maeDisplay=document.getElementById("mae"),this.generateDataBtn=document.getElementById("generate-data-btn"),this.clearDataBtn=document.getElementById("clear-data-btn"),this.degreeSlider=document.getElementById("degree"),this.degreeValue=document.getElementById("degree-value"),this.l1RegSlider=document.getElementById("l1-reg"),this.l1Value=document.getElementById("l1-value"),this.l2RegSlider=document.getElementById("l2-reg"),this.l2Value=document.getElementById("l2-value"),this.setupHighDPICanvas(),this.plotWidth=this.displayWidth-80,this.plotHeight=this.displayHeight-80,this.plotX=40,this.plotY=40,this.xMin=-10,this.xMax=10,this.yMin=-100,this.yMax=100,this.generateTruePolynomial(),this.generateDataPoints(),this.coefficients=[],this.setupEventListeners(),this.initializeDisplay()}generateTruePolynomial(){this.trueCoefficients=[60*(Math.random()-.5),8*(Math.random()-.5),2*(Math.random()-.5),.4*(Math.random()-.5)]}generateDataPoints(){this.dataPoints=[];for(let t=0;t<5;t++){let t,i,e=0;do{t=18*(Math.random()-.5);i=this.trueCoefficients[0]+this.trueCoefficients[1]*t+this.trueCoefficients[2]*t*t+this.trueCoefficients[3]*t*t*t+8*(Math.random()-.5)*2,e++}while((i<this.yMin||i>this.yMax)&&e<50);e>=50&&(i=Math.max(this.yMin+10,Math.min(this.yMax-10,i))),this.dataPoints.push({x:t,y:i})}}setupHighDPICanvas(){const t=window.devicePixelRatio||1,i=this.canvas.clientWidth||600,e=this.canvas.clientHeight||400;this.canvas.width=i*t,this.canvas.height=e*t,this.canvas.style.width=i+"px",this.canvas.style.height=e+"px",this.ctx.scale(t,t),this.ctx.imageSmoothingEnabled=!0,this.ctx.imageSmoothingQuality="high",this.dpr=t,this.displayWidth=i,this.displayHeight=e}initializeDisplay(){this.updateDegreeDisplay(),this.updateRegularizationDisplay(),this.fitPolynomial(),this.draw(),this.updateDisplayPlainText(),window.MathJax&&(MathJax.startup&&MathJax.startup.promise?MathJax.startup.promise.then(()=>{this.updateDisplay()}).catch(()=>{console.warn("MathJax failed to load, using plain text equations")}):setTimeout(()=>{this.updateDisplay()},100))}getSelectedPowers(){const t=parseInt(this.degreeSlider.value),i=[];for(let e=0;e<=t;e++)i.push(e);return i}updateDegreeDisplay(){const t=parseInt(this.degreeSlider.value);this.degreeValue.textContent=t.toString()}updateRegularizationDisplay(){const t=parseFloat(this.l1RegSlider.value),i=parseFloat(this.l2RegSlider.value);this.l1Value.textContent=t.toFixed(1),this.l2Value.textContent=i.toFixed(1)}createDesignMatrix(t,i){const e=t.length,s=i.length,a=[];for(let h=0;h<e;h++){const e=[],l=t[h].x;for(let t=0;t<s;t++){const s=i[t];e.push(Math.pow(l,s))}a.push(e)}return a}fitPolynomial(){if(0===this.dataPoints.length)return void(this.coefficients=[]);const t=this.getSelectedPowers();if(0===t.length)return void(this.coefficients=[]);const i=this.createDesignMatrix(this.dataPoints,t),e=this.dataPoints.map(t=>t.y),s=parseFloat(this.l1RegSlider.value),a=parseFloat(this.l2RegSlider.value);try{this.coefficients=this.solveRegularizedNormalEquations(i,e,s,a),this.selectedPowers=t}catch(i){console.warn("Matrix inversion failed, using zero coefficients"),this.coefficients=new Array(t.length).fill(0),this.selectedPowers=t}}solveNormalEquations(t,i){const e=t.length,s=t[0].length,a=[];for(let i=0;i<s;i++){const s=[];for(let a=0;a<e;a++)s.push(t[a][i]);a.push(s)}const h=[];for(let i=0;i<s;i++){const l=[];for(let h=0;h<s;h++){let s=0;for(let l=0;l<e;l++)s+=a[i][l]*t[l][h];l.push(s)}h.push(l)}const l=[];for(let t=0;t<s;t++){let s=0;for(let h=0;h<e;h++)s+=a[t][h]*i[h];l.push(s)}return this.gaussianElimination(h,l)}gaussianElimination(t,i){const e=t.length,s=[];for(let a=0;a<e;a++)s.push([...t[a],i[a]]);for(let t=0;t<e;t++){let i=t;for(let a=t+1;a<e;a++)Math.abs(s[a][t])>Math.abs(s[i][t])&&(i=a);[s[t],s[i]]=[s[i],s[t]];for(let i=t+1;i<e;i++){if(Math.abs(s[t][t])<1e-10)continue;const a=s[i][t]/s[t][t];for(let h=t;h<=e;h++)s[i][h]-=a*s[t][h]}}const a=new Array(e).fill(0);for(let t=e-1;t>=0;t--){a[t]=s[t][e];for(let i=t+1;i<e;i++)a[t]-=s[t][i]*a[i];Math.abs(s[t][t])>1e-10&&(a[t]/=s[t][t])}return a}solveRegularizedNormalEquations(t,i,e,s){return 0===e?this.solveRidgeRegression(t,i,s):this.solveElasticNet(t,i,e,s)}solveRidgeRegression(t,i,e){const s=t.length,a=t[0].length,h=[];for(let i=0;i<a;i++){const e=[];for(let a=0;a<s;a++)e.push(t[a][i]);h.push(e)}const l=[];for(let i=0;i<a;i++){const o=[];for(let l=0;l<a;l++){let a=0;for(let e=0;e<s;e++)a+=h[i][e]*t[e][l];i===l&&(a+=e),o.push(a)}l.push(o)}const o=[];for(let t=0;t<a;t++){let e=0;for(let a=0;a<s;a++)e+=h[t][a]*i[a];o.push(e)}return this.gaussianElimination(l,o)}solveElasticNet(t,i,e,s){const a=t.length,h=t[0].length;let l=new Array(h).fill(0);for(let o=0;o<100;o++){let o=0;for(let n=0;n<h;n++){const r=l[n];let c=0;for(let e=0;e<a;e++){let s=0;for(let i=0;i<h;i++)i!==n&&(s+=l[i]*t[e][i]);c+=t[e][n]*(i[e]-s)}let d=0;for(let i=0;i<a;i++)d+=t[i][n]*t[i][n];l[n]=c>e?(c-e)/(d+s):c<-e?(c+e)/(d+s):0,o=Math.max(o,Math.abs(l[n]-r))}if(o<1e-6)break}return l}evaluatePolynomial(t){if(!this.coefficients||0===this.coefficients.length)return 0;let i=0;for(let e=0;e<this.coefficients.length;e++){const s=this.selectedPowers[e];i+=this.coefficients[e]*Math.pow(t,s)}return i}setupEventListeners(){this.degreeSlider.addEventListener("input",()=>{this.updateDegreeDisplay(),this.fitPolynomial(),this.updateDisplay(),this.draw()}),this.l1RegSlider.addEventListener("input",()=>{this.updateRegularizationDisplay(),this.fitPolynomial(),this.updateDisplay(),this.draw()}),this.l2RegSlider.addEventListener("input",()=>{this.updateRegularizationDisplay(),this.fitPolynomial(),this.updateDisplay(),this.draw()}),this.generateDataBtn.addEventListener("click",()=>{this.generateNewData()}),this.clearDataBtn.addEventListener("click",()=>{this.clearAllData()}),this.canvas.addEventListener("click",t=>{this.handleCanvasClick(t)})}updateDisplay(){let t="y = ";if(this.coefficients&&0!==this.coefficients.length){const i=[];let e=!1;for(let t=0;t<this.coefficients.length;t++){const s=this.coefficients[t],a=this.selectedPowers[t],h=Math.abs(s)<1e-6;h||(e=!0);let l="";const o=Math.abs(s),n=s>=0?"+":"-";l=0===t?0===a?h?"0.00":s.toFixed(2):1===a?h?"0.00x":`${s.toFixed(2)}x`:h?`0.00x^{${a}}`:`${s.toFixed(2)}x^{${a}}`:0===a?h?"+ 0.00":`${n} ${o.toFixed(2)}`:1===a?h?"+ 0.00x":`${n} ${o.toFixed(2)}x`:h?`+ 0.00x^{${a}}`:`${n} ${o.toFixed(2)}x^{${a}}`,i.push(l)}e?t+=i.join(" "):t="y = 0"}else t="y = 0";this.equation.innerHTML=`$$${t}$$`,window.MathJax&&MathJax.typesetPromise([this.equation]).catch(t=>console.log(t));const i=this.calculateMSE(),e=this.calculateMAE();this.mseDisplay.innerHTML=`$$\\text{MSE} = ${i.toFixed(2)}$$`,this.maeDisplay.innerHTML=`$$\\text{MAE} = ${e.toFixed(2)}$$`,window.MathJax&&MathJax.typesetPromise([this.mseDisplay,this.maeDisplay]).catch(t=>console.log(t))}updateDisplayPlainText(){let t="y = ";if(this.coefficients&&0!==this.coefficients.length){const i=[];let e=!1;for(let t=0;t<this.coefficients.length;t++){const s=this.coefficients[t],a=this.selectedPowers[t],h=Math.abs(s)<1e-6;h||(e=!0);let l="";const o=Math.abs(s),n=s>=0?"+":"-";l=0===t?0===a?h?"0.00":s.toFixed(2):1===a?h?"0.00x":`${s.toFixed(2)}x`:h?`0.00x^${a}`:`${s.toFixed(2)}x^${a}`:0===a?h?"+ 0.00":`${n} ${o.toFixed(2)}`:1===a?h?"+ 0.00x":`${n} ${o.toFixed(2)}x`:h?`+ 0.00x^${a}`:`${n} ${o.toFixed(2)}x^${a}`,i.push(l)}e?t+=i.join(" "):t="y = 0"}else t="y = 0";this.equation.textContent=t;const i=this.calculateMSE(),e=this.calculateMAE();this.mseDisplay.textContent=`MSE = ${i.toFixed(2)}`,this.maeDisplay.textContent=`MAE = ${e.toFixed(2)}`}dataToCanvas(t,i){return{x:this.plotX+(t-this.xMin)/(this.xMax-this.xMin)*this.plotWidth,y:this.plotY+this.plotHeight-(i-this.yMin)/(this.yMax-this.yMin)*this.plotHeight}}drawAxes(){this.ctx.strokeStyle="#333",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(this.plotX,this.plotY+this.plotHeight),this.ctx.lineTo(this.plotX+this.plotWidth,this.plotY+this.plotHeight),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.moveTo(this.plotX,this.plotY),this.ctx.lineTo(this.plotX,this.plotY+this.plotHeight),this.ctx.stroke(),this.drawGrid(),this.drawLabels()}drawGrid(){this.ctx.strokeStyle="#e0e0e0",this.ctx.lineWidth=1;for(let t=this.xMin;t<=this.xMax;t+=2){const i=this.dataToCanvas(t,0);this.ctx.beginPath(),this.ctx.moveTo(i.x,this.plotY),this.ctx.lineTo(i.x,this.plotY+this.plotHeight),this.ctx.stroke()}for(let t=this.yMin;t<=this.yMax;t+=20){const i=this.dataToCanvas(0,t);this.ctx.beginPath(),this.ctx.moveTo(this.plotX,i.y),this.ctx.lineTo(this.plotX+this.plotWidth,i.y),this.ctx.stroke()}}drawLabels(){this.ctx.fillStyle="#666",this.ctx.font="12px Arial",this.ctx.textAlign="center";for(let t=this.xMin;t<=this.xMax;t+=2){const i=this.dataToCanvas(t,0);this.ctx.fillText(t.toString(),i.x,this.plotY+this.plotHeight+20)}this.ctx.textAlign="right";for(let t=this.yMin;t<=this.yMax;t+=20){const i=this.dataToCanvas(0,t);this.ctx.fillText(t.toString(),this.plotX-10,i.y+4)}this.ctx.fillStyle="#333",this.ctx.font="14px Arial",this.ctx.textAlign="center",this.ctx.fillText("X",this.plotX+this.plotWidth/2,this.displayHeight-10),this.ctx.save(),this.ctx.translate(15,this.plotY+this.plotHeight/2),this.ctx.rotate(-Math.PI/2),this.ctx.fillText("Y",0,0),this.ctx.restore()}drawDataPoints(){this.ctx.fillStyle="#ff6b6b",this.ctx.strokeStyle="#d63447",this.ctx.lineWidth=2,this.dataPoints.forEach(t=>{const i=this.dataToCanvas(t.x,t.y);this.ctx.beginPath(),this.ctx.arc(i.x,i.y,5,0,2*Math.PI),this.ctx.fill(),this.ctx.stroke()})}drawPolynomialCurve(){if(!this.coefficients||0===this.coefficients.length)return;this.ctx.save(),this.ctx.beginPath(),this.ctx.rect(this.plotX,this.plotY,this.plotWidth,this.plotHeight),this.ctx.clip(),this.ctx.strokeStyle="#4ecdc4",this.ctx.lineWidth=3,this.ctx.beginPath();let t=!0;const i=(this.xMax-this.xMin)/200;for(let e=this.xMin;e<=this.xMax;e+=i){const i=this.evaluatePolynomial(e),s=this.dataToCanvas(e,i);t?(this.ctx.moveTo(s.x,s.y),t=!1):this.ctx.lineTo(s.x,s.y)}this.ctx.stroke(),this.ctx.restore()}calculateMSE(){if(0===this.dataPoints.length)return 0;let t=0;return this.dataPoints.forEach(i=>{const e=this.evaluatePolynomial(i.x),s=i.y-e;t+=s*s}),t/this.dataPoints.length}calculateMAE(){if(0===this.dataPoints.length)return 0;let t=0;return this.dataPoints.forEach(i=>{const e=this.evaluatePolynomial(i.x),s=Math.abs(i.y-e);t+=s}),t/this.dataPoints.length}generateNewData(){this.generateTruePolynomial(),this.clearAllData(),this.generateDataPoints(),this.fitPolynomial(),this.updateDisplay(),this.draw()}clearAllData(){this.dataPoints=[],this.fitPolynomial(),this.updateDisplay(),this.draw()}handleCanvasClick(t){const i=this.canvas.getBoundingClientRect(),e=t.clientX-i.left,s=t.clientY-i.top,a=this.canvasToData(e,s);this.isWithinPlotArea(e,s)&&(this.dataPoints.push({x:a.x,y:a.y}),this.fitPolynomial(),this.updateDisplay(),this.draw())}canvasToData(t,i){return{x:this.xMin+(t-this.plotX)/this.plotWidth*(this.xMax-this.xMin),y:this.yMax-(i-this.plotY)/this.plotHeight*(this.yMax-this.yMin)}}isWithinPlotArea(t,i){return t>=this.plotX&&t<=this.plotX+this.plotWidth&&i>=this.plotY&&i<=this.plotY+this.plotHeight}drawErrorLines(){this.ctx.strokeStyle="#777777",this.ctx.lineWidth=1,this.ctx.setLineDash([2,2]),this.dataPoints.forEach(t=>{const i=this.evaluatePolynomial(t.x),e=this.dataToCanvas(t.x,t.y),s=this.dataToCanvas(t.x,i);this.ctx.beginPath(),this.ctx.moveTo(e.x,e.y),this.ctx.lineTo(s.x,s.y),this.ctx.stroke()}),this.ctx.setLineDash([])}draw(){this.ctx.clearRect(0,0,this.displayWidth,this.displayHeight),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.drawAxes(),this.drawErrorLines(),this.drawDataPoints(),this.drawPolynomialCurve()}}document.addEventListener("DOMContentLoaded",()=>{new PolynomialRegularizationDemo});