<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Backpropagation</title>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <script>
        window.MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],
                displayMath: [['$$', '$$'], ['\\[', '\\]']]
            }
        };
    </script>
    <link rel="stylesheet" href="../styles.css">
    <link rel="stylesheet" href="../scripts/demotab.css">
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="iframe-content">
        <div class="container">

        <div class="info-tabs">
            <div class="tab-header">
                <!-- Tab buttons will be auto-generated -->
            </div>
            <div class="tab-content">
                <div class="tab-panel" data-tab-title="Introduction">
                    <strong>Backpropagation Algorithm</strong><br>
                    Backpropagation is the key algorithm that enables neural networks to learn from data. It efficiently computes gradients by propagating errors backward through the network, allowing us to update weights to minimize prediction errors.<br><br>

                    In civil engineering applications, backpropagation trains networks to:
                    • <em>Structural analysis:</em> Learn relationships between loads and structural responses<br>
                    • <em>Material modeling:</em> Predict material properties from composition and processing parameters<br>
                    • <em>Geotechnical prediction:</em> Estimate soil behavior from test measurements<br>
                    • <em>Infrastructure monitoring:</em> Detect anomalies from sensor data patterns<br><br>

                    This demo shows how gradients flow backward through layers and how weights are updated to reduce prediction error.
                </div>

                <div class="tab-panel" data-tab-title="Instructions">
                    <strong>How to Use This Demo:</strong><br>
                    • Set <em>input values</em> and <em>target output</em> to define the learning task<br>
                    • Adjust <em>learning rate</em> to control the step size for weight updates<br>
                    • Click <em>"Step Optimization"</em> to perform one iteration of backpropagation<br>
                    • Use <em>"Reset Weights"</em> to start with new random weights<br>
                    • Hover over table entries to highlight corresponding network connections<br>
                    • Watch the loss decrease over multiple optimization steps<br><br>

                    <strong>Network Configuration:</strong><br>
                    • Architecture: 2 inputs → 3 hidden (ReLU) → 1 output (linear)<br>
                    • Loss function: Mean Squared Error (MSE)<br>
                    • Optimization: Gradient descent with adjustable learning rate
                </div>

                <div class="tab-panel" data-tab-title="Visual Guide">
                    <strong>Network Visualization:</strong><br>
                    • <span style="color: #1976d2;"><strong>Blue nodes:</strong></span> Input layer<br>
                    • <span style="color: #7b1fa2;"><strong>Purple nodes:</strong></span> Hidden layer with ReLU activation<br>
                    • <span style="color: #388e3c;"><strong>Green node:</strong></span> Output layer with linear activation<br>
                    • <em>Node values:</em> Show current activations after forward pass<br>
                    • <em>Connection thickness:</em> Represents weight magnitudes<br><br>

                    <strong>Parameter Tables:</strong><br>
                    • <em>Weights table:</em> Current weight values for all connections<br>
                    • <em>Gradients table:</em> Computed gradients for each weight (used for updates)<br>
                    • <em>Color coding:</em> Positive values in green, negative in red<br>
                    • <em>Hover highlighting:</em> Shows which connection each table entry represents<br><br>

                    <strong>Loss History Graph:</strong><br>
                    • Tracks MSE loss over optimization steps<br>
                    • Shows learning progress as loss decreases<br>
                    • Illustrates effect of learning rate on convergence
                </div>

                <div class="tab-panel" data-tab-title="Theory">
                    <strong>Mathematical Foundation:</strong><br>
                    Backpropagation uses the chain rule to compute gradients layer by layer:<br><br>

                    $$\frac{\partial L}{\partial w_{ij}} = \frac{\partial L}{\partial a_j} \cdot \frac{\partial a_j}{\partial z_j} \cdot \frac{\partial z_j}{\partial w_{ij}}$$<br><br>

                    Where $L$ is the loss, $w_{ij}$ is a weight, $z_j$ is pre-activation, and $a_j$ is post-activation.<br><br>

                    <strong>Forward Pass:</strong><br>
                    • Hidden layer: $z_h = W_1 x + b_1$, $a_h = \text{ReLU}(z_h)$<br>
                    • Output layer: $z_o = W_2 a_h + b_2$, $y = z_o$ (linear)<br>
                    • Loss: $L = \frac{1}{2}(y - t)^2$ where $t$ is target<br><br>

                    <strong>Backward Pass:</strong><br>
                    • Output gradients: $\frac{\partial L}{\partial W_2} = (y-t) \cdot a_h$<br>
                    • Hidden gradients: $\frac{\partial L}{\partial W_1} = \frac{\partial L}{\partial a_h} \cdot \frac{\partial a_h}{\partial z_h} \cdot x$<br>
                    • Weight updates: $w \leftarrow w - \eta \frac{\partial L}{\partial w}$
                </div>

                <div class="tab-panel" data-tab-title="Tips">
                    <strong>Learning Rate Guidelines:</strong><br>
                    • Start with learning rates around 0.01-0.1<br>
                    • Too high: Loss may oscillate or diverge<br>
                    • Too low: Very slow convergence<br>
                    • Observe loss curve to assess if rate is appropriate<br><br>

                    <strong>Training Observations:</strong><br>
                    • Watch how gradients propagate backward through layers<br>
                    • Notice that output layer gradients are typically larger<br>
                    • Hidden layer gradients depend on both forward activations and backward error signals<br>
                    • ReLU activation sets gradients to zero for negative inputs (dead neurons)<br><br>

                    <strong>Practical Insights:</strong><br>
                    • Multiple steps usually needed to reach good solutions<br>
                    • Different input-target pairs will produce different gradient patterns<br>
                    • Weight initialization affects convergence speed and final solution<br>
                    • Real applications use mini-batches and advanced optimizers (Adam, RMSprop)<br><br>

                    <strong>Engineering Applications:</strong><br>
                    • Start simple: Small networks often sufficient for many civil engineering problems<br>
                    • Monitor training: Always track loss to ensure learning is progressing<br>
                    • Validation data: Use separate data to check generalization<br>
                    • Feature engineering: Good input features often more important than complex architectures
                </div>
            </div>
        </div>

        <div class="demo-area">
            <div class="controls" style="flex: 1; margin-right: 20px;">

                <!-- Loss Display -->
                <div class="loss-display">
                    <div class="loss-value" id="loss-value">0.0000</div>
                    <div class="step-info">Step: <span id="step-count">0</span></div>
                </div>

                <!-- Input Controls -->
                <div class="control-group">
                    <label>Network Inputs</label>
                    <div class="input-controls">
                        <div class="input-group">
                            <label>Input 1:</label>
                            <input type="range" id="input1" min="-5" max="5" step="0.1" value="1.0">
                            <input type="number" id="input1-num" min="-5" max="5" step="0.1" value="1.0" style="width: 80px;">
                        </div>
                        <div class="input-group">
                            <label>Input 2:</label>
                            <input type="range" id="input2" min="-5" max="5" step="0.1" value="0.5">
                            <input type="number" id="input2-num" min="-5" max="5" step="0.1" value="0.5" style="width: 80px;">
                        </div>
                        <div class="input-group">
                            <label>Target Output:</label>
                            <input type="number" id="target" min="-5" max="5" step="0.1" value="2.0" style="width: 120px;">
                        </div>
                    </div>
                </div>

                <!-- Optimization Controls -->
                <div class="control-group">
                    <label>Optimization</label>
                    <div class="optimization-controls">
                        <div class="input-group" style="margin-bottom: 15px;">
                            <label>Learning Rate:</label>
                            <input type="range" id="learning-rate" min="0" max="1" step="0.01" value="0.01">
                            <input type="number" id="learning-rate-num" min="0" max="1.0" step="0.01" value="0.01" style="width: 80px;">
                        </div>
                        <div>
                            <button class="step-button" id="step-btn">Step Optimization</button>
                            <button class="reset-button" id="reset-btn">Reset Weights</button>
                        </div>
                    </div>
                </div>

                <!-- Loss Graph -->
                <div class="control-group">
                    <label>Loss History</label>
                    <div class="loss-graph">
                        <div class="graph-title">MSE Loss Over Time</div>
                        <canvas id="loss-canvas" width="400" height="200"></canvas>
                    </div>
                </div>

            </div>

            <div class="plot-container" style="flex: 2;">
                <div class="network-container" id="network-container">
                    <!-- Network diagram will be rendered here -->
                </div>

                <!-- Weights and Gradients Tables -->
                <div class="right-panel-tables">
                    <h3>Network Parameters</h3>
                    <div class="weights-table">
                        <h4>Weights</h4>
                        <div class="table-content" id="weights-table">
                            <!-- Weights table will be generated here -->
                        </div>
                    </div>
                    <div class="gradients-table">
                        <h4>Gradients</h4>
                        <div class="table-content" id="gradients-table">
                            <!-- Gradients table will be generated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>

    </div>
    </div>

    <script src="../scripts/demotab.js"></script>
    <script src="script.js"></script>
</body>
</html>