class LinearRegressionDemo{constructor(){this.competitionMode=!1,this.competitionUsername=null,this.scoreUpdateTimeout=null,this.canvas=document.getElementById("plot"),this.overlayCanvas=document.getElementById("overlay-canvas"),this.overlayCtx=this.overlayCanvas.getContext("2d"),this.chart=null,this.alphaSlider=document.getElementById("alpha"),this.betaSlider=document.getElementById("beta"),this.alphaValue=document.getElementById("alpha-value"),this.betaValue=document.getElementById("beta-value"),this.alphaPlusBtn=document.getElementById("alpha-plus"),this.alphaMinusBtn=document.getElementById("alpha-minus"),this.betaPlusBtn=document.getElementById("beta-plus"),this.betaMinusBtn=document.getElementById("beta-minus"),this.equation=document.getElementById("equation"),this.mseDisplay=document.getElementById("mse"),this.maeDisplay=document.getElementById("mae"),this.r2Display=document.getElementById("r2"),this.solutionBtn=document.getElementById("solution-btn"),this.generateDataBtn=document.getElementById("generate-data-btn"),this.clearDataBtn=document.getElementById("clear-data-btn"),this.showSquaresCheckbox=document.getElementById("show-squares"),this.showConfidenceCheckbox=document.getElementById("show-confidence"),this.structuresBtn=document.getElementById("structures-btn"),this.geotechBtn=document.getElementById("geotech-btn"),this.transportBtn=document.getElementById("transport-btn"),this.environmentBtn=document.getElementById("environment-btn"),this.leaderboard=new LeaderboardClient({roomId:"lec02a_linear-regression",autoConnect:!1,debug:!0,roomConfig:{display:"Linear Regression Challenge",metrics:["r2","mse"],sortBy:"r2",order:"desc",description:"Achieve the highest R² score on the linear regression demo",maxUsers:200,sessionTimeout:6e5},onConnect:()=>{this.competitionMode&&(document.getElementById("leaderboard-panel").style.display="block")},onDisconnect:()=>{this.leaderboard.updateStatus("Disconnected","disconnected")},onLeaderboardUpdate:data=>{this.leaderboard.updateLeaderboard(data),this.leaderboard.updateUserPositionFromLeaderboard(data)},onPositionUpdate:position=>{this.leaderboard.updateUserPosition(position)},onError:error=>{this.leaderboard.updateStatus("Connection error","disconnected")},onStatusChange:status=>{if("error"===status)this.leaderboard.updateStatus("Server unavailable","disconnected");else if("joined"===status){const statusElement=document.getElementById("status-text");if(statusElement&&statusElement.textContent.includes("DEBUG / LOCAL TESTING")){const statusDot=document.getElementById("status-dot");statusDot&&(statusDot.className="status-indicator connected")}else this.leaderboard.updateStatus("Competition active","connected")}},onUsernameAssigned:username=>{this.competitionUsername=username,document.getElementById("competition-username").textContent=username,"block"===document.getElementById("leaderboard-panel").style.display&&(document.getElementById("username-display").style.display="block")}}),this.tabController=new DemoTabController({onTabChange:tabName=>this.handleTabChange(tabName)}),this.setupHighDPICanvas(),this.plotWidth=this.displayWidth-90,this.plotHeight=this.displayHeight-80,this.plotX=50,this.plotY=40,this.xMin=-10,this.xMax=10,this.yMin=-100,this.yMax=100,this.xLabel="X",this.yLabel="Y",this.datasets={structures:{name:"Structures - Concrete Strength",file:"example-data/structures_concrete.csv",xLabel:"Cement (kg/m³)",yLabel:"Compressive Strength (MPa)",xColumn:"Cement_kg_per_m3",yColumn:"Compressive_Strength_MPa",title:"Structures: Concrete Strength",description:"This dataset shows how increasing cement content tends to increase concrete strength. The data comes from concrete compressive strength measurements.",variables:"Variables: Cement content (kg/m³) vs Compressive strength (MPa)"},geotech:{name:"Geotechnics - Soil Properties",file:"example-data/geotechnics_soil.csv",xLabel:"Sand Content (%)",yLabel:"Uniformity Coefficient",xColumn:"Sand_Percent",yColumn:"Uniformity_Coefficient",title:"Geotechnics: Soil Properties",description:"This dataset explores how soil composition relates to gradation properties. It demonstrates the relationship between sand percentage and uniformity coefficient in soil samples.",variables:"Variables: Sand percentage (%) vs Uniformity coefficient (measure of soil gradation)"},transport:{name:"Transport - Traffic Flow",file:"example-data/transport_traffic.csv",xLabel:"Vehicle Count",yLabel:"Vehicle Speed (km/h)",xColumn:"Vehicle_Count",yColumn:"Vehicle_Speed_kmh",title:"Transport: Urban Traffic Flow",description:"This dataset shows the negative relationship between vehicle count and speed, demonstrating traffic congestion effects in urban environments.",variables:"Variables: Number of vehicles detected vs Average vehicle speed (km/h)"},environment:{name:"Environment - Wastewater Energy",file:"example-data/environment_wastewater.csv",xLabel:"Inflow (m³/s)",yLabel:"Energy Consumption (MWh)",xColumn:"Inflow_m3_s",yColumn:"Energy_Consumption_MWh",title:"Environment: Wastewater Treatment",description:"This dataset explores how higher inflow rates are associated with greater energy use in wastewater treatment plants, showing the energy demands of processing larger volumes.",variables:"Variables: Average daily inflow (m³/s) vs Daily energy consumption (MWh)"}},this.generateDataPoints(),this.initializeChart(),this.setupHighDPIOverlayCanvas(),this.overlayCanvas.style.visibility="hidden",this.setupEventListeners(),this.initializeDisplay(),setTimeout(()=>{this.updateChart()},150),document.getElementById("username-display").style.display="none"}generateDataPoints(){this.dataPoints=[];const trueAlpha=14*(Math.random()-.5),trueBeta=40*(Math.random()-.5);for(let i=0;i<10;i++){const x=18*(Math.random()-.5),y=trueAlpha*x+trueBeta+25*(Math.random()-.5)*2;this.dataPoints.push({x:x,y:y})}}initializeChart(){this.chart=new Chart(this.canvas.getContext("2d"),{type:"scatter",data:{datasets:[{label:"Data Points",data:[],backgroundColor:"#ff6b6b",borderColor:"#d63447",borderWidth:2,pointRadius:5,pointHoverRadius:7,showLine:!1},{label:"Regression Line",data:[],backgroundColor:"transparent",borderColor:"#4ecdc4",borderWidth:2,pointRadius:0,pointHoverRadius:0,showLine:!0,fill:!1,tension:0}]},options:{responsive:!0,maintainAspectRatio:!1,scales:{x:{type:"linear",position:"bottom",min:this.xMin,max:this.xMax,title:{display:!0,text:this.xLabel},grid:{color:"#e0e0e0"}},y:{type:"linear",position:"left",min:this.yMin,max:this.yMax,title:{display:!0,text:this.yLabel},grid:{color:"#e0e0e0"}}},plugins:{legend:{display:!0,position:"top"},tooltip:{filter:tooltipItem=>0===tooltipItem.datasetIndex}},onClick:(event,activeElements)=>{this.handleChartClick(event)},animation:{duration:0}}})}setupHighDPICanvas(){this.displayWidth=this.canvas.clientWidth||600,this.displayHeight=this.canvas.clientHeight||400}setupHighDPIOverlayCanvas(){setTimeout(()=>{const dpr=window.devicePixelRatio||1,chartCanvas=this.chart.canvas,displayWidth=chartCanvas.clientWidth,displayHeight=chartCanvas.clientHeight;this.overlayCanvas.width=displayWidth*dpr,this.overlayCanvas.height=displayHeight*dpr,this.overlayCanvas.style.width=displayWidth+"px",this.overlayCanvas.style.height=displayHeight+"px",this.overlayCtx.scale(dpr,dpr),this.overlayCtx.imageSmoothingEnabled=!0,this.overlayCtx.imageSmoothingQuality="high",this.overlayDisplayWidth=displayWidth,this.overlayDisplayHeight=displayHeight,this.dpr=dpr,console.log("Overlay canvas setup:",{displayWidth:displayWidth,displayHeight:displayHeight,dpr:dpr})},100)}handleChartClick(event){if(this.competitionMode)return;const rect=this.canvas.getBoundingClientRect(),x=event.native.clientX-rect.left,y=event.native.clientY-rect.top,xScale=this.chart.scales.x,yScale=this.chart.scales.y,dataX=xScale.getValueForPixel(x),dataY=yScale.getValueForPixel(y);dataX>=this.xMin&&dataX<=this.xMax&&dataY>=this.yMin&&dataY<=this.yMax&&(this.dataPoints.push({x:dataX,y:dataY}),this.updateChart())}updateChart(){this.chart.data.datasets[0].data=this.dataPoints,this.updateRegressionLine(),this.chart.update("none"),this.drawOverlayVisualizations(),this.updateDisplay()}updateRegressionLine(){const alpha=parseFloat(this.alphaSlider.value),beta=parseFloat(this.betaSlider.value),linePoints=[{x:this.xMin,y:beta*this.xMin+alpha},{x:this.xMax,y:beta*this.xMax+alpha}];this.chart.data.datasets[1].data=linePoints}setupOverlayCanvasFallback(){if(this.chart&&this.chart.canvas){const dpr=window.devicePixelRatio||1,chartCanvas=this.chart.canvas,displayWidth=chartCanvas.clientWidth,displayHeight=chartCanvas.clientHeight;this.overlayCanvas.width=displayWidth*dpr,this.overlayCanvas.height=displayHeight*dpr,this.overlayCanvas.style.width=displayWidth+"px",this.overlayCanvas.style.height=displayHeight+"px",this.overlayCtx.setTransform(1,0,0,1,0,0),this.overlayCtx.scale(dpr,dpr),this.overlayDisplayWidth=displayWidth,this.overlayDisplayHeight=displayHeight,this.dpr=dpr,console.log("Fallback overlay setup:",{displayWidth:displayWidth,displayHeight:displayHeight,dpr:dpr})}}dataToCanvasCoords(dataX,dataY){const xScale=this.chart.scales.x,yScale=this.chart.scales.y;return{x:xScale.getPixelForValue(dataX),y:yScale.getPixelForValue(dataY)}}drawOverlayVisualizations(){(this.overlayDisplayWidth&&this.overlayDisplayHeight||(this.setupOverlayCanvasFallback(),this.overlayDisplayWidth&&this.overlayDisplayHeight))&&(this.overlayCtx.clearRect(0,0,this.overlayDisplayWidth,this.overlayDisplayHeight),this.showSquaresCheckbox.checked||this.showConfidenceCheckbox.checked?(this.overlayCanvas.style.visibility="visible",this.showSquaresCheckbox.checked&&this.drawErrorSquares(),this.showConfidenceCheckbox.checked&&this.drawConfidenceInterval()):this.overlayCanvas.style.visibility="hidden")}drawErrorSquares(){if(0===this.dataPoints.length)return;const alpha=parseFloat(this.alphaSlider.value),beta=parseFloat(this.betaSlider.value);this.overlayCtx.fillStyle="rgba(255, 107, 107, 0.1)",this.overlayCtx.strokeStyle="rgba(255, 107, 107, 0.3)",this.overlayCtx.lineWidth=1;for(const point of this.dataPoints){const predictedY=beta*point.x+alpha,error=point.y-predictedY,pointCoords=(Math.abs(error),this.dataToCanvasCoords(point.x,point.y)),predictedCoords=this.dataToCanvasCoords(point.x,predictedY),errorInPixels=Math.abs(pointCoords.y-predictedCoords.y),left=Math.min(pointCoords.x,pointCoords.x+errorInPixels),top=Math.min(pointCoords.y,predictedCoords.y);this.overlayCtx.fillRect(left,top,errorInPixels,errorInPixels),this.overlayCtx.strokeRect(left,top,errorInPixels,errorInPixels)}}drawConfidenceInterval(){if(this.dataPoints.length<3)return;const alpha=parseFloat(this.alphaSlider.value),beta=parseFloat(this.betaSlider.value),n=this.dataPoints.length;let sumSquaredErrors=0,sumX=0,sumXSquared=0;for(const point of this.dataPoints){const predicted=beta*point.x+alpha,error=point.y-predicted;sumSquaredErrors+=error*error,sumX+=point.x,sumXSquared+=point.x*point.x}const xMean=sumX/n,mse=sumSquaredErrors/(n-2),sxx=sumXSquared-sumX*sumX/n;let tCritical;tCritical=n<=5?2.78:n<=10?2.31:n<=20?2.09:1.96;const xStep=(this.xMax-this.xMin)/50,upperPoints=[],lowerPoints=[];for(let i=0;i<=50;i++){const x=this.xMin+i*xStep,yPredicted=beta*x+alpha,margin=tCritical*Math.sqrt(mse*(1/n+Math.pow(x-xMean,2)/sxx)),upperY=yPredicted+margin,lowerY=yPredicted-margin;upperPoints.push(this.dataToCanvasCoords(x,upperY)),lowerPoints.push(this.dataToCanvasCoords(x,lowerY))}this.overlayCtx.fillStyle="rgba(78, 205, 196, 0.1)",this.overlayCtx.strokeStyle="rgba(78, 205, 196, 0.3)",this.overlayCtx.lineWidth=1,this.overlayCtx.beginPath(),this.overlayCtx.moveTo(upperPoints[0].x,upperPoints[0].y);for(let i=1;i<upperPoints.length;i++)this.overlayCtx.lineTo(upperPoints[i].x,upperPoints[i].y);for(let i=lowerPoints.length-1;i>=0;i--)this.overlayCtx.lineTo(lowerPoints[i].x,lowerPoints[i].y);this.overlayCtx.closePath(),this.overlayCtx.fill(),this.overlayCtx.stroke()}seededRandom(seed){const x=1e4*Math.sin(seed);return x-Math.floor(x)}generateCompetitionDataset(){this.dataPoints=[];for(let i=0;i<24;i++){const x=20*(this.seededRandom(12345+3*i)-.5),y=2.8*x+12+(50*(this.seededRandom(12345+3*i+1)-.5)+30*(this.seededRandom(12345+3*i+2)-.5)*Math.sin(.8*i));this.dataPoints.push({x:x,y:y})}this.updateChart()}randomizeParameters(){const randomAlpha=Math.floor(151*Math.random())-50;this.alphaSlider.value=randomAlpha;const randomBeta=(20*Math.random()-5).toFixed(1);this.betaSlider.value=randomBeta,this.updateDisplay(),this.updateChart()}async enterCompetitionMode(){this.competitionMode=!0,this.generateCompetitionDataset(),this.randomizeParameters(),document.getElementById("solution-btn").style.display="none",document.getElementById("generate-data-btn").style.display="none",document.getElementById("clear-data-btn").style.display="none",document.querySelector(".dataset-buttons-section").style.display="none",document.getElementById("leaderboard-panel").style.display="block",document.getElementById("username-display").style.display="none",await this.leaderboard.connect(),this.leaderboard.setUserId("generate-username"),this.leaderboard.join(),setTimeout(()=>{this.sendScoreUpdate()},1e3)}exitCompetitionMode(){this.competitionMode&&(this.competitionMode=!1,document.getElementById("solution-btn").style.display="block",document.getElementById("generate-data-btn").style.display="block",document.getElementById("clear-data-btn").style.display="block",document.querySelector(".dataset-buttons-section").style.display="block",document.getElementById("leaderboard-panel").style.display="none",this.leaderboard.leave(),this.leaderboard.disconnect(),this.generateNewData(),console.log("Exited competition mode - generated new dataset"))}handleTabChange(tabName){"compete"===tabName?this.enterCompetitionMode():this.exitCompetitionMode()}sendScoreUpdate(){if(!this.leaderboard.isReady())return;const alpha=parseFloat(this.alphaSlider.value),beta=parseFloat(this.betaSlider.value),r2=this.calculateR2(alpha,beta),mse=this.calculateMSE(alpha,beta),scores={r2:Math.round(1e3*r2)/1e3,mse:Math.round(100*mse)/100},inputs={alpha:Math.round(1e3*alpha)/1e3,beta:Math.round(1e3*beta)/1e3};this.leaderboard.updateScores(scores,inputs)}debouncedScoreUpdate(){this.competitionMode&&(this.scoreUpdateTimeout&&clearTimeout(this.scoreUpdateTimeout),this.scoreUpdateTimeout=setTimeout(()=>{this.sendScoreUpdate()},100))}initializeDisplay(){this.updateChart(),this.updateDisplayPlainText(),window.MathJax&&(MathJax.startup&&MathJax.startup.promise?MathJax.startup.promise.then(()=>{this.updateDisplay()}).catch(()=>{console.warn("MathJax failed to load, using plain text equations")}):setTimeout(()=>{this.updateDisplay()},100))}updateDisplayPlainText(){const alpha=parseFloat(this.alphaSlider.value),beta=parseFloat(this.betaSlider.value);this.alphaValue.textContent=alpha.toFixed(1),this.betaValue.textContent=beta.toFixed(2);const alphaSign=alpha>=0?"+":"-",alphaValue=Math.abs(alpha).toFixed(1);this.equation.innerHTML=`y = ${beta.toFixed(2)}x ${alphaSign} ${alphaValue}<div class="equation-label">Fitted Function</div>`;const mse=this.calculateMSE(alpha,beta),mae=this.calculateMAE(alpha,beta),r2=this.calculateR2(alpha,beta);this.mseDisplay.innerHTML=`\\(\\text{MSE} = ${mse.toFixed(2)}\\)<div class="equation-label">Mean Squared Error</div>`,this.maeDisplay.innerHTML=`\\(\\text{MAE} = ${mae.toFixed(2)}\\)<div class="equation-label">Mean Absolute Error</div>`,this.updateR2Display(r2)}updateR2Display(r2){this.r2Display.innerHTML=`\\(R^2 = ${r2.toFixed(3)}\\)<div class="equation-label">Coefficient of Determination</div>`,this.r2Display.classList.remove("r2-poor","r2-moderate","r2-good"),r2<.3?this.r2Display.classList.add("r2-poor"):r2<.7?this.r2Display.classList.add("r2-moderate"):this.r2Display.classList.add("r2-good")}setupEventListeners(){this.alphaSlider.addEventListener("input",()=>{this.updateDisplay(),this.updateChart(),this.debouncedScoreUpdate()}),this.betaSlider.addEventListener("input",()=>{this.updateDisplay(),this.updateChart(),this.debouncedScoreUpdate()}),this.alphaPlusBtn.addEventListener("click",()=>{this.adjustAlpha(.1)}),this.alphaMinusBtn.addEventListener("click",()=>{this.adjustAlpha(-.1)}),this.betaPlusBtn.addEventListener("click",()=>{this.adjustBeta(.01)}),this.betaMinusBtn.addEventListener("click",()=>{this.adjustBeta(-.01)}),this.solutionBtn.addEventListener("click",()=>{this.setOptimalValues()}),this.generateDataBtn.addEventListener("click",()=>{this.generateNewData()}),this.clearDataBtn.addEventListener("click",()=>{this.clearAllData()}),this.structuresBtn.addEventListener("click",()=>{this.loadStructuresData()}),this.geotechBtn.addEventListener("click",()=>{this.loadGeotechData()}),this.transportBtn.addEventListener("click",()=>{this.loadTransportData()}),this.environmentBtn.addEventListener("click",()=>{this.loadEnvironmentData()}),this.canvas.addEventListener("click",event=>{this.handleCanvasClick(event)}),this.showSquaresCheckbox.addEventListener("change",()=>{this.updateChart()}),this.showConfidenceCheckbox.addEventListener("change",()=>{this.updateChart()})}adjustAlpha(delta){const currentValue=parseFloat(this.alphaSlider.value),newValue=Math.max(parseFloat(this.alphaSlider.min),Math.min(parseFloat(this.alphaSlider.max),currentValue+delta));this.alphaSlider.value=newValue,this.updateDisplay(),this.updateChart(),this.debouncedScoreUpdate()}adjustBeta(delta){const currentValue=parseFloat(this.betaSlider.value),newValue=Math.max(parseFloat(this.betaSlider.min),Math.min(parseFloat(this.betaSlider.max),currentValue+delta));this.betaSlider.value=newValue,this.updateDisplay(),this.updateChart(),this.debouncedScoreUpdate()}generateNewData(){this.generateDataPoints(),this.resetToDefaultBounds(),this.updateChart()}clearAllData(){this.dataPoints=[],this.resetToDefaultBounds(),this.updateChart()}resetToDefaultBounds(){this.xMin=-10,this.xMax=10,this.yMin=-100,this.yMax=100,this.xLabel="X",this.yLabel="Y",this.chart.options.scales.x.min=this.xMin,this.chart.options.scales.x.max=this.xMax,this.chart.options.scales.y.min=this.yMin,this.chart.options.scales.y.max=this.yMax,this.chart.options.scales.x.title.text=this.xLabel,this.chart.options.scales.y.title.text=this.yLabel,document.getElementById("dataset-info-box").style.display="none",this.chart.update("none")}setOptimalValues(){if(this.dataPoints.length<2)return void alert("Need at least 2 data points to find optimal solution");const n=this.dataPoints.length;let sumX=0,sumY=0,sumXY=0,sumXX=0;for(const point of this.dataPoints)sumX+=point.x,sumY+=point.y,sumXY+=point.x*point.y,sumXX+=point.x*point.x;const beta=(n*sumXY-sumX*sumY)/(n*sumXX-sumX*sumX),alpha=(sumY-beta*sumX)/n;this.alphaSlider.value=Math.max(this.alphaSlider.min,Math.min(this.alphaSlider.max,alpha)),this.betaSlider.value=Math.max(this.betaSlider.min,Math.min(this.betaSlider.max,beta)),this.updateDisplay(),this.updateChart()}handleCanvasClick(event){}loadStructuresData(){this.loadDataset("structures")}loadGeotechData(){this.loadDataset("geotech")}loadTransportData(){this.loadDataset("transport")}loadEnvironmentData(){this.loadDataset("environment")}async loadDataset(datasetKey){const dataset=this.datasets[datasetKey];try{const response=await fetch(dataset.file),lines=(await response.text()).trim().split("\n"),headers=lines[0].split(",").map(h=>h.trim()),xColIndex=headers.indexOf(dataset.xColumn),yColIndex=headers.indexOf(dataset.yColumn);if(-1===xColIndex||-1===yColIndex)return void console.error("Required columns not found in dataset");this.dataPoints=[];for(let i=1;i<lines.length;i++){const values=lines[i].split(",").map(v=>v.trim()),x=parseFloat(values[xColIndex]),y=parseFloat(values[yColIndex]);isNaN(x)||isNaN(y)||this.dataPoints.push({x:x,y:y})}this.xLabel=dataset.xLabel,this.yLabel=dataset.yLabel,this.chart.options.scales.x.title.text=this.xLabel,this.chart.options.scales.y.title.text=this.yLabel;const xValues=this.dataPoints.map(p=>p.x),yValues=this.dataPoints.map(p=>p.y),xMin=Math.min(...xValues),xMax=Math.max(...xValues),yMin=Math.min(...yValues),yMax=Math.max(...yValues),xPadding=.1*(xMax-xMin),yPadding=.1*(yMax-yMin);this.xMin=xMin-xPadding,this.xMax=xMax+xPadding,this.yMin=yMin-yPadding,this.yMax=yMax+yPadding,this.chart.options.scales.x.min=this.xMin,this.chart.options.scales.x.max=this.xMax,this.chart.options.scales.y.min=this.yMin,this.chart.options.scales.y.max=this.yMax,document.getElementById("dataset-info-title").textContent=dataset.title,document.getElementById("dataset-info-description").textContent=dataset.description,document.getElementById("dataset-info-variables").textContent=dataset.variables,document.getElementById("dataset-info-box").style.display="block",this.updateChart()}catch(error){console.error("Error loading dataset:",error),alert("Error loading dataset. Please check the console for details.")}}calculateMSE(alpha,beta){if(0===this.dataPoints.length)return 0;let sumSquaredErrors=0;for(const point of this.dataPoints){const predicted=beta*point.x+alpha,error=point.y-predicted;sumSquaredErrors+=error*error}return sumSquaredErrors/this.dataPoints.length}calculateMAE(alpha,beta){if(0===this.dataPoints.length)return 0;let sumAbsoluteErrors=0;for(const point of this.dataPoints){const predicted=beta*point.x+alpha;sumAbsoluteErrors+=Math.abs(point.y-predicted)}return sumAbsoluteErrors/this.dataPoints.length}calculateR2(alpha,beta){if(0===this.dataPoints.length)return 0;const yMean=this.dataPoints.reduce((sum,point)=>sum+point.y,0)/this.dataPoints.length;let tss=0,rss=0;for(const point of this.dataPoints){const predicted=beta*point.x+alpha;tss+=Math.pow(point.y-yMean,2),rss+=Math.pow(point.y-predicted,2)}return 0===tss?1:Math.max(0,1-rss/tss)}updateDisplay(){const alpha=parseFloat(this.alphaSlider.value),beta=parseFloat(this.betaSlider.value);this.alphaValue.textContent=alpha.toFixed(1),this.betaValue.textContent=beta.toFixed(2);const alphaSign=alpha>=0?"+":"-",alphaValue=Math.abs(alpha).toFixed(1);this.equation.innerHTML=`$$y = ${beta.toFixed(2)}x ${alphaSign} ${alphaValue}$$<div class="equation-label">Fitted Function</div>`,window.MathJax&&MathJax.typesetPromise&&MathJax.typesetPromise([this.equation]).catch(err=>console.log(err));const mse=this.calculateMSE(alpha,beta),mae=this.calculateMAE(alpha,beta),r2=this.calculateR2(alpha,beta);this.mseDisplay.innerHTML=`$$\\text{MSE} = ${mse.toFixed(2)}$$<div class="equation-label">Mean Squared Error</div>`,this.maeDisplay.innerHTML=`$$\\text{MAE} = ${mae.toFixed(2)}$$<div class="equation-label">Mean Absolute Error</div>`,this.updateR2Display(r2),window.MathJax&&MathJax.typesetPromise&&MathJax.typesetPromise([this.mseDisplay,this.maeDisplay,this.r2Display]).catch(err=>console.log(err))}}let demoInstance;document.addEventListener("DOMContentLoaded",()=>{demoInstance=new LinearRegressionDemo});