class AttentionDemo{constructor(){this.sequenceSelect=document.getElementById("sequence-select"),this.randomizeWeightsBtn=document.getElementById("randomize-weights-btn"),this.qCanvas=document.getElementById("q-canvas"),this.kCanvas=document.getElementById("k-canvas"),this.vCanvas=document.getElementById("v-canvas"),this.attentionCanvas=document.getElementById("attention-canvas"),this.vAttentionCanvas=document.getElementById("v-attention-canvas"),this.inputSequenceContainer=document.getElementById("input-sequence"),this.outputSequenceContainer=document.getElementById("output-sequence"),this.sequences={simple:["The","cat","sat"],greeting:["Hello","world","today"],question:["What","is","attention"],longer:["The","quick","brown","fox","jumps"]},this.currentSequence=[],this.hoveredToken=null,this.hoveredOutputEmbedding=null,this.dModel=4,this.dK=4,this.seqLength=0,this.inputEmbeddings=[],this.WQ=[],this.WK=[],this.WV=[],this.Q=[],this.K=[],this.V=[],this.scores=[],this.attentionWeights=[],this.output=[],this.setupEventListeners(),this.initializeDemo()}setupEventListeners(){this.sequenceSelect.addEventListener("change",e=>{this.loadSequence(e.target.value)}),this.randomizeWeightsBtn.addEventListener("click",()=>this.randomizeWeights()),this.inputSequenceContainer.addEventListener("mouseover",e=>{const token=e.target.closest(".token");token&&(this.hoveredToken=parseInt(token.dataset.index),this.renderQKVMatrices())}),this.inputSequenceContainer.addEventListener("mouseleave",()=>{this.hoveredToken=null,this.renderQKVMatrices()})}initializeDemo(){this.loadSequence("simple")}loadSequence(sequenceKey){this.currentSequence=[...this.sequences[sequenceKey]],this.seqLength=this.currentSequence.length,this.initializeEmbeddings(),this.initializeWeights(),this.computeAllStages()}initializeEmbeddings(){this.inputEmbeddings=[];for(let i=0;i<this.seqLength;i++){const embedding=[];for(let j=0;j<this.dModel;j++)embedding.push(2*(Math.random()-.5));this.inputEmbeddings.push(embedding)}}initializeWeights(){this.WQ=this.createRandomMatrix(this.dModel,this.dK),this.WK=this.createRandomMatrix(this.dModel,this.dK),this.WV=this.createRandomMatrix(this.dModel,this.dModel)}createRandomMatrix(rows,cols){const matrix=[];for(let i=0;i<rows;i++){const row=[];for(let j=0;j<cols;j++)row.push(2*(Math.random()-.5)/Math.sqrt(rows));matrix.push(row)}return matrix}randomizeWeights(){this.initializeWeights(),this.computeAllStages()}matrixMultiply(A,B){const rows=A.length,cols=B[0].length,shared=B.length,result=[];for(let i=0;i<rows;i++){const row=[];for(let j=0;j<cols;j++){let sum=0;for(let k=0;k<shared;k++)sum+=A[i][k]*B[k][j];row.push(sum)}result.push(row)}return result}transpose(matrix){const rows=matrix.length,cols=matrix[0].length,result=[];for(let j=0;j<cols;j++){const row=[];for(let i=0;i<rows;i++)row.push(matrix[i][j]);result.push(row)}return result}softmax(matrix){const result=[];for(let i=0;i<matrix.length;i++){const row=[...matrix[i]],max=Math.max(...row),exponentials=row.map(x=>x-max).map(x=>Math.exp(x)),sum=exponentials.reduce((a,b)=>a+b,0);result.push(exponentials.map(x=>x/sum))}return result}computeQKV(){this.Q=this.matrixMultiply(this.inputEmbeddings,this.WQ),this.K=this.matrixMultiply(this.inputEmbeddings,this.WK),this.V=this.matrixMultiply(this.inputEmbeddings,this.WV)}computeScores(){const KT=this.transpose(this.K),rawScores=this.matrixMultiply(this.Q,KT),scale=1/Math.sqrt(this.dK);this.scores=rawScores.map((row,i)=>row.map((val,j)=>j<=i?val*scale:-1/0))}computeAttentionWeights(){this.attentionWeights=this.softmax(this.scores)}computeOutput(){this.output=this.matrixMultiply(this.attentionWeights,this.V)}computeAllStages(){this.computeQKV(),this.computeScores(),this.computeAttentionWeights(),this.computeOutput(),this.renderAll()}renderAll(){this.renderInputSequence(),this.renderQKVMatrices(),this.renderAttentionWeights(),this.renderOutput()}renderInputSequence(){this.inputSequenceContainer.innerHTML="",this.currentSequence.forEach((token,index)=>{const tokenElement=document.createElement("div");tokenElement.className="token",tokenElement.dataset.index=index;const tokenText=document.createElement("div");tokenText.className="token-text",tokenText.textContent=token;const tokenEmbedding=document.createElement("div");if(tokenEmbedding.className="token-embedding",this.inputEmbeddings[index]){const embStr=this.inputEmbeddings[index].map(val=>val.toFixed(2)).join(", ");tokenEmbedding.textContent=`[${embStr}]`}tokenElement.appendChild(tokenText),tokenElement.appendChild(tokenEmbedding),this.inputSequenceContainer.appendChild(tokenElement)})}renderQKVMatrices(){this.renderMatrix(this.qCanvas,this.Q,"Query"),this.renderMatrix(this.kCanvas,this.K,"Key"),this.renderMatrix(this.vCanvas,this.V,"Value")}renderMatrix(canvas,matrix,title){const ctx=canvas.getContext("2d"),width=canvas.width,height=canvas.height;if(ctx.clearRect(0,0,width,height),!matrix||0===matrix.length)return;const rows=matrix.length,cols=matrix[0].length,cellWidth=width/cols,cellHeight=Math.min(46,(height-40)/rows),topPadding=(height-cellHeight*rows)/2,allValues=matrix.flat(),minVal=Math.min(...allValues),range=Math.max(...allValues)-minVal;for(let i=0;i<rows;i++)for(let j=0;j<cols;j++){const value=matrix[i][j],intensity=0===range?.5:(value-minVal)/range;let color,alpha=.3+.7*intensity;this.hoveredToken===i&&(alpha=Math.min(1,alpha+.3)),this.hoveredOutputEmbedding&&"Value"===title&&j===this.hoveredOutputEmbedding.embeddingIndex&&i<=this.hoveredOutputEmbedding.tokenIndex&&(alpha=Math.min(1,alpha+.3)),color="Query"===title?`rgba(74, 144, 226, ${alpha})`:"Key"===title?`rgba(124, 179, 66, ${alpha})`:`rgba(244, 67, 54, ${alpha})`,ctx.fillStyle=color,ctx.fillRect(j*cellWidth,topPadding+i*cellHeight,cellWidth,cellHeight),this.hoveredToken===i||this.hoveredOutputEmbedding&&"Value"===title&&j===this.hoveredOutputEmbedding.embeddingIndex&&i<=this.hoveredOutputEmbedding.tokenIndex?(ctx.strokeStyle="#333",ctx.lineWidth=2):(ctx.strokeStyle="#ddd",ctx.lineWidth=1),ctx.strokeRect(j*cellWidth,topPadding+i*cellHeight,cellWidth,cellHeight),cellWidth>25&&cellHeight>15&&(ctx.fillStyle=intensity>.5?"white":"black",ctx.font="14px monospace",ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillText(value.toFixed(2),j*cellWidth+cellWidth/2,topPadding+i*cellHeight+cellHeight/2))}}renderAttentionWeights(){this.renderHeatmap(this.attentionCanvas,this.attentionWeights,"Attention Weights"),this.renderMatrix(this.vAttentionCanvas,this.V,"Value")}renderHeatmap(canvas,matrix,title){const ctx=canvas.getContext("2d"),width=canvas.width,height=canvas.height;if(ctx.clearRect(0,0,width,height),!matrix||0===matrix.length)return;const size=matrix.length,availableWidth=width-50,availableHeight=height-40,cellSize=Math.min(availableWidth,availableHeight)/size,startX=50+(availableWidth-cellSize*size)/2,startY=40+(availableHeight-cellSize*size)/2,allValues=matrix.flat(),minVal=Math.min(...allValues),range=Math.max(...allValues)-minVal;for(let i=0;i<size;i++)for(let j=0;j<size;j++){const value=matrix[i][j];if(0===value&&j>i)ctx.fillStyle="#e0e0e0";else{let intensity=0===range?.5:(value-minVal)/range,alpha=.3+.7*intensity;this.hoveredOutputEmbedding&&i===this.hoveredOutputEmbedding.tokenIndex&&j<=i&&(alpha=Math.min(1,alpha+.3)),ctx.fillStyle=`rgba(255, ${255-200*intensity}, ${255-255*intensity}, ${alpha})`}if(ctx.fillRect(startX+j*cellSize,startY+i*cellSize,cellSize,cellSize),!this.hoveredOutputEmbedding||i!==this.hoveredOutputEmbedding.tokenIndex||0===value&&j>i?(ctx.strokeStyle="#666",ctx.lineWidth=1):(ctx.strokeStyle="#333",ctx.lineWidth=2),ctx.strokeRect(startX+j*cellSize,startY+i*cellSize,cellSize,cellSize),cellSize>30)if(0===value&&j>i)ctx.fillStyle="#999",ctx.font="14px monospace",ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillText("Ã—",startX+j*cellSize+cellSize/2,startY+i*cellSize+cellSize/2);else{const intensity=0===range?.5:(value-minVal)/range;ctx.fillStyle=intensity>.6?"white":"black",ctx.font="14px monospace",ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillText(value.toFixed(3),startX+j*cellSize+cellSize/2,startY+i*cellSize+cellSize/2)}}ctx.fillStyle="#333",ctx.font="12px sans-serif",ctx.textAlign="center";for(let j=0;j<size;j++)ctx.fillText(this.currentSequence[j],startX+j*cellSize+cellSize/2,startY-5);ctx.textAlign="right",ctx.textBaseline="middle";for(let i=0;i<size;i++)ctx.fillText(this.currentSequence[i],startX-5,startY+i*cellSize+cellSize/2)}renderOutput(){this.outputSequenceContainer.innerHTML="",this.currentSequence.forEach((token,index)=>{const tokenElement=document.createElement("div");tokenElement.className="token";const tokenText=document.createElement("div");tokenText.className="token-text",tokenText.textContent=token;const embeddingGrid=document.createElement("div");embeddingGrid.style.display="flex",embeddingGrid.style.marginTop="5px",embeddingGrid.style.justifyContent="space-between",embeddingGrid.style.width="100%",this.output[index]&&this.output[index].forEach((val,embIndex)=>{const embSquare=document.createElement("div");embSquare.style.width="60px",embSquare.style.height="30px",embSquare.style.display="flex",embSquare.style.alignItems="center",embSquare.style.justifyContent="center",embSquare.style.fontSize="14px",embSquare.style.fontFamily="monospace",embSquare.style.border="1px solid #ccc",embSquare.style.borderRadius="3px",embSquare.style.cursor="pointer",embSquare.style.transition="all 0.2s ease";const allValues=this.output[index],minVal=Math.min(...allValues),range=Math.max(...allValues)-minVal,alpha=.3+.7*(0===range?.5:(val-minVal)/range);embSquare.style.backgroundColor=`rgba(77, 190, 238, ${alpha})`,embSquare.textContent=val.toFixed(2),embSquare.addEventListener("mouseenter",()=>{embSquare.style.transform="scale(1.1)",embSquare.style.zIndex="10",embSquare.style.boxShadow="0 2px 8px rgba(0,0,0,0.3)",this.hoveredOutputEmbedding={tokenIndex:index,embeddingIndex:embIndex},this.renderAttentionWeights()}),embSquare.addEventListener("mouseleave",()=>{embSquare.style.transform="scale(1)",embSquare.style.zIndex="1",embSquare.style.boxShadow="none",this.hoveredOutputEmbedding=null,this.renderAttentionWeights()}),embeddingGrid.appendChild(embSquare)}),tokenElement.appendChild(tokenText),tokenElement.appendChild(embeddingGrid),this.outputSequenceContainer.appendChild(tokenElement)})}}document.addEventListener("DOMContentLoaded",()=>{new DemoTabController,new AttentionDemo});