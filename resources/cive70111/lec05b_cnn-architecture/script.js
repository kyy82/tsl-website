class CNNMnistDemo{constructor(){this.inputCanvas=document.getElementById("input-canvas"),this.architectureCanvas=document.getElementById("architecture-canvas"),this.conv1Canvas=document.getElementById("conv1-canvas"),this.pool1Canvas=document.getElementById("pool1-canvas"),this.conv2Canvas=document.getElementById("conv2-canvas"),this.pool2Canvas=document.getElementById("pool2-canvas"),this.fc1Canvas=document.getElementById("fc1-canvas"),this.inputCtx=this.inputCanvas.getContext("2d"),this.archCtx=this.architectureCanvas.getContext("2d"),this.conv1Ctx=this.conv1Canvas.getContext("2d"),this.pool1Ctx=this.pool1Canvas.getContext("2d"),this.conv2Ctx=this.conv2Canvas.getContext("2d"),this.pool2Ctx=this.pool2Canvas.getContext("2d"),this.fc1Ctx=this.fc1Canvas.getContext("2d"),this.digitButtons=document.querySelectorAll(".digit-btn"),this.drawBtn=document.getElementById("draw-btn"),this.trainBtn=document.getElementById("train-btn"),this.resetTrainingBtn=document.getElementById("reset-training-btn"),this.predictedDigit=document.getElementById("predicted-digit"),this.currentEpoch=document.getElementById("current-epoch"),this.currentLoss=document.getElementById("current-loss"),this.currentAccuracy=document.getElementById("current-accuracy"),this.currentImage=null,this.currentPrediction=null,this.selectedDigit=null,this.isDrawing=!1,this.isTraining=!1,this.pretrainedData=null,this.currentEpochIndex=0,this.currentFeatureMaps={},this.trainingInterval=null,this.cnnInference=new CNNInference,this.setupCanvas(),this.setupEventListeners(),this.loadPretrainedData()}async loadPretrainedData(){try{console.log("Loading pre-trained data...");const t=await fetch("./data/pretrained_cnn_data.json");if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);this.pretrainedData=await t.json(),console.log("Pre-trained data loaded successfully"),console.log(`Available epochs: ${this.pretrainedData.training_epochs.length}`),console.log(`Sample images: ${this.pretrainedData.samples.length}`),this.currentEpochIndex=0,this.maxEpochIndex=this.pretrainedData.training_epochs.length-1,this.updateDisplayFromEpoch(),this.populateDigitSelector(),this.drawArchitecture(),this.drawInitialImage()}catch(t){console.error("Failed to load pre-trained data:",t),document.body.innerHTML+='\n                <div style="position: fixed; top: 10px; left: 10px; background: #ff6b6b; color: white; padding: 10px; border-radius: 5px; z-index: 1000;">\n                    Error: Could not load pre-trained model data. Please ensure the data file exists.\n                </div>\n            '}}updateDisplayFromEpoch(){if(!this.pretrainedData||!this.pretrainedData.training_epochs[this.currentEpochIndex])return;const t=this.pretrainedData.training_epochs[this.currentEpochIndex];this.currentFeatureMaps=t.feature_maps||{},this.currentEpoch.textContent=t.epoch,this.currentLoss.textContent=0===t.epoch?"N/A":t.loss.toFixed(4),this.currentAccuracy.textContent=`${t.test_accuracy.toFixed(1)}%`,this.drawFeatureMaps(),this.updateTrainButtonText()}populateDigitSelector(){this.pretrainedData&&(this.samplesByDigit={},this.pretrainedData.samples.forEach((t,e)=>{this.samplesByDigit[t.label]||(this.samplesByDigit[t.label]=[]),this.samplesByDigit[t.label].push({...t,index:e})}))}setupCanvas(){[this.inputCanvas,this.architectureCanvas,this.conv1Canvas,this.pool1Canvas,this.conv2Canvas,this.pool2Canvas,this.fc1Canvas].forEach(t=>{const e=t.getBoundingClientRect(),i=window.devicePixelRatio||1;t.width=e.width*i,t.height=e.height*i;t.getContext("2d").scale(i,i)}),this.inputCanvas.addEventListener("mousedown",this.startDrawing.bind(this)),this.inputCanvas.addEventListener("mousemove",this.draw.bind(this)),this.inputCanvas.addEventListener("mouseup",this.stopDrawing.bind(this)),this.inputCanvas.addEventListener("mouseout",this.stopDrawing.bind(this)),this.inputCanvas.addEventListener("touchstart",this.handleTouch.bind(this)),this.inputCanvas.addEventListener("touchmove",this.handleTouch.bind(this)),this.inputCanvas.addEventListener("touchend",this.stopDrawing.bind(this))}setupEventListeners(){this.digitButtons.forEach(t=>{t.addEventListener("click",()=>{const e=parseInt(t.dataset.digit);this.selectDigit(e)})}),this.drawBtn.addEventListener("click",this.enableDrawing.bind(this)),this.trainBtn.addEventListener("click",this.trainOneEpoch.bind(this)),this.resetTrainingBtn.addEventListener("click",this.resetTraining.bind(this))}selectDigit(t){if(console.log(`Selected digit: ${t}`),!this.pretrainedData)return;const e=this.pretrainedData.samples.filter(e=>e.label===t);if(0===e.length)return;const i=e[Math.floor(Math.random()*e.length)];console.log(`Using sample with ${i.image.length} pixels`),this.selectedDigit=t,this.currentImage=i.image,this.drawImageOnCanvas(i.image),this.runAutomaticPrediction(),this.updateDigitButtonStyling(t)}updateDigitButtonStyling(t){this.digitButtons.forEach(e=>{parseInt(e.dataset.digit)===t?(e.style.background="#1976d2",e.style.color="white",e.style.borderColor="#1976d2"):(e.style.background="white",e.style.color="black",e.style.borderColor="#ddd")})}drawImageOnCanvas(t){const e=this.inputCanvas,i=this.inputCtx,n=e.getBoundingClientRect();if(i.clearRect(0,0,n.width,n.height),!t)return;const a=(e,i)=>Array.isArray(t[0])?t[e]&&void 0!==t[e][i]?t[e][i]:0:void 0!==t[28*e+i]?t[28*e+i]:0,r=n.width/28,s=n.height/28;for(let t=0;t<28;t++)for(let e=0;e<28;e++){const n=a(t,e),o=Math.round(255-n);i.fillStyle=`rgb(${o}, ${o}, ${o})`,i.fillRect(e*r,t*s,r,s)}}enableDrawing(){const t=this.inputCanvas.getBoundingClientRect();this.inputCtx.clearRect(0,0,t.width,t.height),this.inputCtx.fillStyle="white",this.inputCtx.fillRect(0,0,t.width,t.height),this.currentImage=Array(28).fill().map(()=>Array(28).fill(0)),this.currentPrediction=null,this.predictedDigit.textContent="-",this.clearFeatureMaps()}startDrawing(t){this.currentImage&&Array.isArray(this.currentImage)&&(this.isDrawing=!0,this.draw(t))}draw(t){if(!this.isDrawing||!this.currentImage)return;const e=this.inputCanvas.getBoundingClientRect(),i=t.clientX-e.left,n=t.clientY-e.top,a=Math.floor(i/e.width*28),r=Math.floor(n/e.height*28);if(r>=0&&r<28&&a>=0&&a<28){for(let t=-1;t<=1;t++)for(let e=-1;e<=1;e++){const i=r+t,n=a+e;if(i>=0&&i<28&&n>=0&&n<28){const a=Math.sqrt(t*t+e*e),r=Math.max(0,255*(1-a/2));this.currentImage[i][n]=Math.min(255,this.currentImage[i][n]+r)}}this.drawImageOnCanvas(this.currentImage)}}stopDrawing(){this.isDrawing=!1,this.currentImage&&Array.isArray(this.currentImage)&&this.runAutomaticPrediction()}handleTouch(t){t.preventDefault();const e=t.touches[0],i=new MouseEvent("touchstart"===t.type?"mousedown":"mousemove",{clientX:e.clientX,clientY:e.clientY});this.inputCanvas.dispatchEvent(i)}trainOneEpoch(){this.pretrainedData&&(this.currentEpochIndex<this.maxEpochIndex&&(this.currentEpochIndex++,this.updateDisplayFromEpoch(),this.runAutomaticPrediction()),this.updateTrainButtonText())}updateTrainButtonText(){this.currentEpochIndex>=this.maxEpochIndex?(this.trainBtn.textContent="Training Complete",this.trainBtn.disabled=!0):(this.trainBtn.textContent="Train Epoch",this.trainBtn.disabled=!1)}resetTraining(){this.currentEpochIndex=0,this.updateDisplayFromEpoch(),this.updateTrainButtonText(),this.runAutomaticPrediction()}async getFeatureMapsFromFrontend(){if(this.currentImage){console.log(`Running frontend CNN inference: epoch=${this.currentEpochIndex}, image_size=${this.currentImage.length}`);try{const t=this.cnnInference.predict(this.currentImage,this.currentEpochIndex,this.pretrainedData);this.currentFeatureMaps={conv1:t.activations.conv1,pool1:t.activations.pool1,conv2:t.activations.conv2,pool2:t.activations.pool2,fc1:t.activations.fc1},this.currentPrediction={predicted_class:t.prediction,confidence:Math.max(...t.probabilities),probabilities:t.probabilities},this.predictedDigit.textContent=t.prediction,console.log(`Prediction: ${t.prediction}, Confidence: ${(100*Math.max(...t.probabilities)).toFixed(1)}%`)}catch(t){console.error("Failed to run frontend CNN inference:",t);const e=this.pretrainedData.training_epochs[this.currentEpochIndex];this.currentFeatureMaps=e.feature_maps||{}}}}async runAutomaticPrediction(){this.currentImage&&this.pretrainedData&&(await this.getFeatureMapsFromFrontend(),this.drawFeatureMaps())}drawArchitecture(){const t=this.architectureCanvas,e=this.archCtx,i=t.getBoundingClientRect();e.clearRect(0,0,i.width,i.height);const n=i.height/2,a=(i.width-30-30)/7,r=[{name:"Input",shape:[1,28,28],color:"#e3f2fd",operation:"Image"},{name:"Conv1",shape:[4,26,26],color:"#bbdefb",operation:"3×3 conv"},{name:"Pool1",shape:[4,13,13],color:"#90caf9",operation:"2×2 pool"},{name:"Conv2",shape:[8,11,11],color:"#64b5f6",operation:"3×3 conv"},{name:"Pool2",shape:[8,5,5],color:"#42a5f5",operation:"2×2 pool"},{name:"Flatten",shape:[200],color:"#2196f3",operation:"200"},{name:"FC1",shape:[128],color:"#1e88e5",operation:"128"},{name:"Output",shape:[10],color:"#1976d2",operation:"10"}];r.forEach((t,i)=>{const s=30+i*a;if(3===t.shape.length){const[i,a,r]=t.shape,o=.8,h=Math.max(12,r/28*28*o),c=Math.max(12,a/28*28*o),l=i<=8?i:8,d=Math.max(1,.08*h);for(let i=0;i<l;i++){const a=i*d;e.fillStyle=t.color,e.fillRect(s-h/2+a,n-c/2+a,h,c),e.strokeStyle="#1976d2",e.lineWidth=1,e.strokeRect(s-h/2+a,n-c/2+a,h,c)}i>8&&(e.fillStyle="#424242",e.font="bold 10px Arial",e.textAlign="center",e.fillText("...",s+l*d+8,n)),e.fillStyle="#1976d2",e.font="bold 14px Arial",e.textAlign="center",e.fillText(t.name,s,n-35),e.fillStyle="#424242",e.font="12px Arial",e.fillText(`${i}×${a}×${r}`,s,n+25),e.fillText(t.operation,s,n+35)}else{const i=t.shape[0],a=16,r=Math.min(50,.25*i);e.fillStyle=t.color,e.fillRect(s-a/2,n-r/2,a,r),e.strokeStyle="#1976d2",e.lineWidth=1,e.strokeRect(s-a/2,n-r/2,a,r),e.fillStyle="#1976d2",e.font="bold 14px Arial",e.textAlign="center",e.fillText(t.name,s,n-35),e.fillStyle="#424242",e.font="12px Arial",e.fillText(t.operation,s,n+35)}if(i<r.length-1){const t=30+(i+1)*a,r=n,o=Math.max(8,Math.min(20,.15*a)),h=s+o,c=t-o,l=Math.max(2,.03*a);c>h+5&&(e.strokeStyle="#666",e.lineWidth=1,e.beginPath(),e.moveTo(h,r),e.lineTo(c-l,r),e.stroke(),e.beginPath(),e.moveTo(c-l,r-l/2),e.lineTo(c,r),e.lineTo(c-l,r+l/2),e.closePath(),e.fillStyle="#666",e.fill())}}),e.fillStyle="#1976d2",e.font="bold 16px Arial",e.textAlign="center",e.fillText("CNN Architecture",i.width/2,18)}drawFeatureMaps(){this.currentFeatureMaps?(this.drawLayerFeatureMap("conv1",this.conv1Canvas,this.conv1Ctx,2,2),this.drawLayerFeatureMap("pool1",this.pool1Canvas,this.pool1Ctx,2,2),this.drawLayerFeatureMap("conv2",this.conv2Canvas,this.conv2Ctx,3,3),this.drawLayerFeatureMap("pool2",this.pool2Canvas,this.pool2Ctx,3,3),this.drawFC1Visualization(),this.drawOutputProbabilities()):this.clearFeatureMaps()}drawLayerFeatureMap(t,e,i,n,a){const r=e.getBoundingClientRect();i.clearRect(0,0,r.width,r.height);const s=this.currentFeatureMaps[t];if(!s||0===s.length)return void this.drawEmptyGrid(i,r,n,a,t);const o=r.width/a,h=r.height/n;i.fillStyle="#1976d2",i.font="bold 12px Arial",i.textAlign="center",i.fillText(t.toUpperCase(),r.width/2,15),s.slice(0,n*a).forEach((t,e)=>{const n=Math.floor(e/a),r=e%a*o+4,s=n*h+4+20,c=o-8,l=h-8-20;this.drawSingleFeatureMap(i,t,r,s,c,l)})}drawSingleFeatureMap(t,e,i,n,a,r){if(!e||0===e.length)return;const s=e.length,o=a/s,h=r/s,c=e.flat(),l=Math.min(...c),d=Math.max(...c)-l||1;for(let a=0;a<s;a++)for(let r=0;r<s;r++){const s=(e[a][r]-l)/d,c=Math.round(255*s);t.fillStyle=`rgb(${c}, ${c}, ${c})`,t.fillRect(i+r*o,n+a*h,o,h)}}drawEmptyGrid(t,e,i,n,a){t.clearRect(0,0,e.width,e.height),t.fillStyle="#1976d2",t.font="bold 12px Arial",t.textAlign="center",t.fillText(a.toUpperCase(),e.width/2,15),t.strokeStyle="#ddd",t.lineWidth=1;const r=e.width/n,s=(e.height-20)/i;for(let e=0;e<i;e++)for(let i=0;i<n;i++){const n=i*r+4,a=e*s+24,o=r-8,h=s-8;t.strokeRect(n,a,o,h)}}drawFC1Visualization(){const t=this.fc1Canvas,e=this.fc1Ctx,i=t.getBoundingClientRect();e.clearRect(0,0,i.width,i.height);const n=this.currentFeatureMaps.fc1;if(!n||0===n.length)return e.fillStyle="#f5f5f5",e.fillRect(0,0,i.width,i.height),e.fillStyle="#1976d2",e.font="bold 12px Arial",e.textAlign="center",void e.fillText("FC1",i.width/2,15);const a=n,r=Math.min(...a),s=Math.max(...a)-r||1;e.fillStyle="#1976d2",e.font="bold 12px Arial",e.textAlign="center",e.fillText("FC1",i.width/2,15);const o=(i.height-25)/128;for(let t=0;t<128;t++){const n=(a[t]-r)/s,h=Math.floor(255*n);e.fillStyle=`rgb(${h}, ${h}, ${h})`,e.fillRect(2,20+t*o,i.width-4,o)}}drawOutputProbabilities(){if(!this.currentPrediction||!this.currentPrediction.probabilities)return;const t=this.currentPrediction.probabilities;for(let e=0;e<10;e++){const i=document.getElementById(`prob-${e}`);if(i){i.textContent=t[e].toFixed(2);const n=Math.max(...t);t[e]===n?(i.style.fontWeight="bold",i.style.color="#1976d2"):(i.style.fontWeight="normal",i.style.color="#000")}}}clearFeatureMaps(){[this.conv1Ctx,this.pool1Ctx,this.conv2Ctx,this.pool2Ctx,this.fc1Ctx].forEach(t=>{const e=t.canvas.getBoundingClientRect();t.clearRect(0,0,e.width,e.height)})}drawInitialImage(){if(this.pretrainedData&&this.pretrainedData.samples.length>0){const t=this.pretrainedData.samples[0];this.currentImage=t.image,this.drawImageOnCanvas(t.image),this.selectedDigit=0,this.runAutomaticPrediction()}}}document.addEventListener("DOMContentLoaded",()=>{new CNNMnistDemo});