class CNNMnistDemo{constructor(){this.inputCanvas=document.getElementById("input-canvas"),this.architectureCanvas=document.getElementById("architecture-canvas"),this.conv1Canvas=document.getElementById("conv1-canvas"),this.pool1Canvas=document.getElementById("pool1-canvas"),this.conv2Canvas=document.getElementById("conv2-canvas"),this.pool2Canvas=document.getElementById("pool2-canvas"),this.fc1Canvas=document.getElementById("fc1-canvas"),this.inputCtx=this.inputCanvas.getContext("2d"),this.archCtx=this.architectureCanvas.getContext("2d"),this.conv1Ctx=this.conv1Canvas.getContext("2d"),this.pool1Ctx=this.pool1Canvas.getContext("2d"),this.conv2Ctx=this.conv2Canvas.getContext("2d"),this.pool2Ctx=this.pool2Canvas.getContext("2d"),this.fc1Ctx=this.fc1Canvas.getContext("2d"),this.digitButtons=document.querySelectorAll(".digit-btn"),this.drawBtn=document.getElementById("draw-btn"),this.trainBtn=document.getElementById("train-btn"),this.resetTrainingBtn=document.getElementById("reset-training-btn"),this.predictedDigit=document.getElementById("predicted-digit"),this.currentEpoch=document.getElementById("current-epoch"),this.currentLoss=document.getElementById("current-loss"),this.currentAccuracy=document.getElementById("current-accuracy"),this.currentImage=null,this.currentPrediction=null,this.selectedDigit=null,this.isDrawing=!1,this.isTraining=!1,this.pretrainedData=null,this.currentEpochIndex=0,this.currentFeatureMaps={},this.trainingInterval=null,this.cnnInference=new CNNInference,this.setupCanvas(),this.setupEventListeners(),this.loadPretrainedData()}async loadPretrainedData(){try{console.log("Loading pre-trained data...");const response=await fetch("./data/pretrained_cnn_data.json");if(!response.ok)throw new Error(`HTTP error! status: ${response.status}`);this.pretrainedData=await response.json(),console.log("Pre-trained data loaded successfully"),console.log(`Available epochs: ${this.pretrainedData.training_epochs.length}`),console.log(`Sample images: ${this.pretrainedData.samples.length}`),this.currentEpochIndex=0,this.maxEpochIndex=this.pretrainedData.training_epochs.length-1,this.updateDisplayFromEpoch(),this.populateDigitSelector(),this.drawArchitecture(),this.drawInitialImage()}catch(error){console.error("Failed to load pre-trained data:",error),document.body.innerHTML+='\n                <div style="position: fixed; top: 10px; left: 10px; background: #ff6b6b; color: white; padding: 10px; border-radius: 5px; z-index: 1000;">\n                    Error: Could not load pre-trained model data. Please ensure the data file exists.\n                </div>\n            '}}updateDisplayFromEpoch(){if(!this.pretrainedData||!this.pretrainedData.training_epochs[this.currentEpochIndex])return;const epochData=this.pretrainedData.training_epochs[this.currentEpochIndex];this.currentFeatureMaps=epochData.feature_maps||{},this.currentEpoch.textContent=epochData.epoch,this.currentLoss.textContent=0===epochData.epoch?"N/A":epochData.loss.toFixed(4),this.currentAccuracy.textContent=`${epochData.test_accuracy.toFixed(1)}%`,this.drawFeatureMaps(),this.updateTrainButtonText()}populateDigitSelector(){this.pretrainedData&&(this.samplesByDigit={},this.pretrainedData.samples.forEach((sample,index)=>{this.samplesByDigit[sample.label]||(this.samplesByDigit[sample.label]=[]),this.samplesByDigit[sample.label].push({...sample,index:index})}))}setupCanvas(){[{canvas:this.inputCanvas,displayWidth:200,displayHeight:200},{canvas:this.architectureCanvas,displayWidth:500,displayHeight:200},{canvas:this.conv1Canvas,displayWidth:200,displayHeight:150},{canvas:this.pool1Canvas,displayWidth:200,displayHeight:150},{canvas:this.conv2Canvas,displayWidth:200,displayHeight:150},{canvas:this.pool2Canvas,displayWidth:200,displayHeight:150},{canvas:this.fc1Canvas,displayWidth:40,displayHeight:320}].forEach(({canvas:canvas,displayWidth:displayWidth,displayHeight:displayHeight})=>{const dpr=window.devicePixelRatio||1;canvas.removeAttribute("width"),canvas.removeAttribute("height"),canvas.style.width=displayWidth+"px",canvas.style.height=displayHeight+"px",canvas.width=displayWidth*dpr,canvas.height=displayHeight*dpr;const ctx=canvas.getContext("2d");ctx.scale(dpr,dpr),ctx.imageSmoothingEnabled=!1,ctx.imageSmoothingEnabled=!0}),this.inputCanvas.addEventListener("mousedown",this.startDrawing.bind(this)),this.inputCanvas.addEventListener("mousemove",this.draw.bind(this)),this.inputCanvas.addEventListener("mouseup",this.stopDrawing.bind(this)),this.inputCanvas.addEventListener("mouseout",this.stopDrawing.bind(this)),this.inputCanvas.addEventListener("touchstart",this.handleTouch.bind(this)),this.inputCanvas.addEventListener("touchmove",this.handleTouch.bind(this)),this.inputCanvas.addEventListener("touchend",this.stopDrawing.bind(this))}setupEventListeners(){this.digitButtons.forEach(button=>{button.addEventListener("click",()=>{const digit=parseInt(button.dataset.digit);this.selectDigit(digit)})}),this.drawBtn.addEventListener("click",this.enableDrawing.bind(this)),this.trainBtn.addEventListener("click",this.trainOneEpoch.bind(this)),this.resetTrainingBtn.addEventListener("click",this.resetTraining.bind(this))}selectDigit(digit){if(console.log(`Selected digit: ${digit}`),!this.pretrainedData)return;const digitSamples=this.pretrainedData.samples.filter(sample=>sample.label===digit);if(0===digitSamples.length)return;const randomSample=digitSamples[Math.floor(Math.random()*digitSamples.length)];console.log(`Using sample with ${randomSample.image.length} pixels`),this.selectedDigit=digit,this.currentImage=randomSample.image,this.drawImageOnCanvas(randomSample.image),this.runAutomaticPrediction(),this.updateDigitButtonStyling(digit)}updateDigitButtonStyling(selectedDigit){this.digitButtons.forEach(button=>{parseInt(button.dataset.digit)===selectedDigit?(button.style.background="#1976d2",button.style.color="white",button.style.borderColor="#1976d2"):(button.style.background="white",button.style.color="black",button.style.borderColor="#ddd")})}drawImageOnCanvas(imageData){const canvas=this.inputCanvas,ctx=this.inputCtx,rect=canvas.getBoundingClientRect();if(ctx.clearRect(0,0,rect.width,rect.height),!imageData)return;const getPixelValue=(row,col)=>Array.isArray(imageData[0])?imageData[row]&&void 0!==imageData[row][col]?imageData[row][col]:0:void 0!==imageData[28*row+col]?imageData[28*row+col]:0,cellWidth=rect.width/28,cellHeight=rect.height/28;for(let row=0;row<28;row++)for(let col=0;col<28;col++){const value=getPixelValue(row,col),gray=Math.round(255-value);ctx.fillStyle=`rgb(${gray}, ${gray}, ${gray})`,ctx.fillRect(col*cellWidth,row*cellHeight,cellWidth,cellHeight)}}enableDrawing(){const rect=this.inputCanvas.getBoundingClientRect();this.inputCtx.clearRect(0,0,rect.width,rect.height),this.inputCtx.fillStyle="white",this.inputCtx.fillRect(0,0,rect.width,rect.height),this.currentImage=Array(28).fill().map(()=>Array(28).fill(0)),this.currentPrediction=null,this.predictedDigit.textContent="-",this.clearFeatureMaps()}startDrawing(e){this.currentImage&&Array.isArray(this.currentImage)&&(this.isDrawing=!0,this.draw(e))}draw(e){if(!this.isDrawing||!this.currentImage)return;const rect=this.inputCanvas.getBoundingClientRect(),x=e.clientX-rect.left,y=e.clientY-rect.top,col=Math.floor(x/rect.width*28),row=Math.floor(y/rect.height*28);if(row>=0&&row<28&&col>=0&&col<28){for(let dr=-1;dr<=1;dr++)for(let dc=-1;dc<=1;dc++){const nr=row+dr,nc=col+dc;if(nr>=0&&nr<28&&nc>=0&&nc<28){const distance=Math.sqrt(dr*dr+dc*dc),intensity=Math.max(0,255*(1-distance/2));this.currentImage[nr][nc]=Math.min(255,this.currentImage[nr][nc]+intensity)}}this.drawImageOnCanvas(this.currentImage)}}stopDrawing(){this.isDrawing=!1,this.currentImage&&Array.isArray(this.currentImage)&&this.runAutomaticPrediction()}handleTouch(e){e.preventDefault();const touch=e.touches[0],mouseEvent=new MouseEvent("touchstart"===e.type?"mousedown":"mousemove",{clientX:touch.clientX,clientY:touch.clientY});this.inputCanvas.dispatchEvent(mouseEvent)}trainOneEpoch(){this.pretrainedData&&(this.currentEpochIndex<this.maxEpochIndex&&(this.currentEpochIndex++,this.updateDisplayFromEpoch(),this.runAutomaticPrediction()),this.updateTrainButtonText())}updateTrainButtonText(){this.currentEpochIndex>=this.maxEpochIndex?(this.trainBtn.textContent="Training Complete",this.trainBtn.disabled=!0):(this.trainBtn.textContent="Train Epoch",this.trainBtn.disabled=!1)}resetTraining(){this.currentEpochIndex=0,this.updateDisplayFromEpoch(),this.updateTrainButtonText(),this.runAutomaticPrediction()}async getFeatureMapsFromFrontend(){if(this.currentImage){console.log(`Running frontend CNN inference: epoch=${this.currentEpochIndex}, image_size=${this.currentImage.length}`);try{const result=this.cnnInference.predict(this.currentImage,this.currentEpochIndex,this.pretrainedData);this.currentFeatureMaps={conv1:result.activations.conv1,pool1:result.activations.pool1,conv2:result.activations.conv2,pool2:result.activations.pool2,fc1:result.activations.fc1},this.currentPrediction={predicted_class:result.prediction,confidence:Math.max(...result.probabilities),probabilities:result.probabilities},this.predictedDigit.textContent=result.prediction,console.log(`Prediction: ${result.prediction}, Confidence: ${(100*Math.max(...result.probabilities)).toFixed(1)}%`)}catch(error){console.error("Failed to run frontend CNN inference:",error);const currentEpoch=this.pretrainedData.training_epochs[this.currentEpochIndex];this.currentFeatureMaps=currentEpoch.feature_maps||{}}}}async runAutomaticPrediction(){this.currentImage&&this.pretrainedData&&(await this.getFeatureMapsFromFrontend(),this.drawFeatureMaps())}drawArchitecture(){const canvas=this.architectureCanvas,ctx=this.archCtx,rect=canvas.getBoundingClientRect();ctx.clearRect(0,0,rect.width,rect.height);const baseY=rect.height/2,spacing=(rect.width-30-30)/7,layers=[{name:"Input",shape:[1,28,28],color:"#e3f2fd",operation:"Image"},{name:"Conv1",shape:[4,26,26],color:"#bbdefb",operation:"3Ã—3 conv"},{name:"Pool1",shape:[4,13,13],color:"#90caf9",operation:"2Ã—2 pool"},{name:"Conv2",shape:[8,11,11],color:"#64b5f6",operation:"3Ã—3 conv"},{name:"Pool2",shape:[8,5,5],color:"#42a5f5",operation:"2Ã—2 pool"},{name:"Flatten",shape:[200],color:"#2196f3",operation:"200"},{name:"FC1",shape:[128],color:"#1e88e5",operation:"128"},{name:"Output",shape:[10],color:"#1976d2",operation:"10"}];layers.forEach((layer,i)=>{const x=30+i*spacing;if(3===layer.shape.length){const[channels,height,width]=layer.shape,scale=.8,rectWidth=Math.max(12,width/28*28*scale),rectHeight=Math.max(12,height/28*28*scale),channelsToShow=channels<=8?channels:8,offset=Math.max(1,.08*rectWidth);for(let j=0;j<channelsToShow;j++){const rectOffset=j*offset;ctx.fillStyle=layer.color,ctx.fillRect(x-rectWidth/2+rectOffset,baseY-rectHeight/2+rectOffset,rectWidth,rectHeight),ctx.strokeStyle="#1976d2",ctx.lineWidth=1,ctx.strokeRect(x-rectWidth/2+rectOffset,baseY-rectHeight/2+rectOffset,rectWidth,rectHeight)}channels>8&&(ctx.fillStyle="#424242",ctx.font="bold 10px Arial",ctx.textAlign="center",ctx.fillText("...",x+channelsToShow*offset+8,baseY)),ctx.fillStyle="#1976d2",ctx.font="bold 14px Arial",ctx.textAlign="center",ctx.fillText(layer.name,x,baseY-35),ctx.fillStyle="#424242",ctx.font="12px Arial",ctx.fillText(`${channels}Ã—${height}Ã—${width}`,x,baseY+25),ctx.fillText(layer.operation,x,baseY+35)}else{const features=layer.shape[0],barWidth=16,barHeight=Math.min(50,.25*features);ctx.fillStyle=layer.color,ctx.fillRect(x-barWidth/2,baseY-barHeight/2,barWidth,barHeight),ctx.strokeStyle="#1976d2",ctx.lineWidth=1,ctx.strokeRect(x-barWidth/2,baseY-barHeight/2,barWidth,barHeight),ctx.fillStyle="#1976d2",ctx.font="bold 14px Arial",ctx.textAlign="center",ctx.fillText(layer.name,x,baseY-35),ctx.fillStyle="#424242",ctx.font="12px Arial",ctx.fillText(layer.operation,x,baseY+35)}if(i<layers.length-1){const nextX=30+(i+1)*spacing,arrowY=baseY,arrowPadding=Math.max(8,Math.min(20,.15*spacing)),startX=x+arrowPadding,endX=nextX-arrowPadding,arrowheadSize=Math.max(2,.03*spacing);endX>startX+5&&(ctx.strokeStyle="#666",ctx.lineWidth=1,ctx.beginPath(),ctx.moveTo(startX,arrowY),ctx.lineTo(endX-arrowheadSize,arrowY),ctx.stroke(),ctx.beginPath(),ctx.moveTo(endX-arrowheadSize,arrowY-arrowheadSize/2),ctx.lineTo(endX,arrowY),ctx.lineTo(endX-arrowheadSize,arrowY+arrowheadSize/2),ctx.closePath(),ctx.fillStyle="#666",ctx.fill())}}),ctx.fillStyle="#1976d2",ctx.font="bold 16px Arial",ctx.textAlign="center",ctx.fillText("CNN Architecture",rect.width/2,18)}drawFeatureMaps(){this.currentFeatureMaps?(this.drawLayerFeatureMap("conv1",this.conv1Canvas,this.conv1Ctx,2,2),this.drawLayerFeatureMap("pool1",this.pool1Canvas,this.pool1Ctx,2,2),this.drawLayerFeatureMap("conv2",this.conv2Canvas,this.conv2Ctx,3,3),this.drawLayerFeatureMap("pool2",this.pool2Canvas,this.pool2Ctx,3,3),this.drawFC1Visualization(),this.drawOutputProbabilities()):this.clearFeatureMaps()}drawLayerFeatureMap(layerName,canvas,ctx,gridRows,gridCols){const rect=canvas.getBoundingClientRect();ctx.clearRect(0,0,rect.width,rect.height);const featureMap=this.currentFeatureMaps[layerName];if(!featureMap||0===featureMap.length)return void this.drawEmptyGrid(ctx,rect,gridRows,gridCols,layerName);const cellWidth=rect.width/gridCols,cellHeight=rect.height/gridRows;ctx.fillStyle="#1976d2",ctx.font="bold 12px Arial",ctx.textAlign="center",ctx.fillText(layerName.toUpperCase(),rect.width/2,15),featureMap.slice(0,gridRows*gridCols).forEach((channel,i)=>{const row=Math.floor(i/gridCols),x=i%gridCols*cellWidth+4,y=row*cellHeight+4+20,width=cellWidth-8,height=cellHeight-8-20;this.drawSingleFeatureMap(ctx,channel,x,y,width,height)})}drawSingleFeatureMap(ctx,channel,x,y,width,height){if(!channel||0===channel.length)return;const mapSize=channel.length,cellWidth=width/mapSize,cellHeight=height/mapSize,flatChannel=channel.flat(),minVal=Math.min(...flatChannel),range=Math.max(...flatChannel)-minVal||1;for(let i=0;i<mapSize;i++)for(let j=0;j<mapSize;j++){const normalized=(channel[i][j]-minVal)/range,intensity=Math.round(255*normalized);ctx.fillStyle=`rgb(${intensity}, ${intensity}, ${intensity})`,ctx.fillRect(x+j*cellWidth,y+i*cellHeight,cellWidth,cellHeight)}}drawEmptyGrid(ctx,rect,rows,cols,layerName){ctx.clearRect(0,0,rect.width,rect.height),ctx.fillStyle="#1976d2",ctx.font="bold 12px Arial",ctx.textAlign="center",ctx.fillText(layerName.toUpperCase(),rect.width/2,15),ctx.strokeStyle="#ddd",ctx.lineWidth=1;const cellWidth=rect.width/cols,cellHeight=(rect.height-20)/rows;for(let row=0;row<rows;row++)for(let col=0;col<cols;col++){const x=col*cellWidth+4,y=row*cellHeight+24,width=cellWidth-8,height=cellHeight-8;ctx.strokeRect(x,y,width,height)}}drawFC1Visualization(){const canvas=this.fc1Canvas,ctx=this.fc1Ctx,rect=canvas.getBoundingClientRect();ctx.clearRect(0,0,rect.width,rect.height);const featureMap=this.currentFeatureMaps.fc1;if(!featureMap||0===featureMap.length)return ctx.fillStyle="#f5f5f5",ctx.fillRect(0,0,rect.width,rect.height),ctx.fillStyle="#1976d2",ctx.font="bold 12px Arial",ctx.textAlign="center",void ctx.fillText("FC1",rect.width/2,15);const fc1Values=featureMap,minVal=Math.min(...fc1Values),range=Math.max(...fc1Values)-minVal||1;ctx.fillStyle="#1976d2",ctx.font="bold 12px Arial",ctx.textAlign="center",ctx.fillText("FC1",rect.width/2,15);const cellHeight=(rect.height-25)/128;for(let i=0;i<128;i++){const normalizedValue=(fc1Values[i]-minVal)/range,greyValue=Math.floor(255*normalizedValue);ctx.fillStyle=`rgb(${greyValue}, ${greyValue}, ${greyValue})`,ctx.fillRect(2,20+i*cellHeight,rect.width-4,cellHeight)}}drawOutputProbabilities(){if(!this.currentPrediction||!this.currentPrediction.probabilities)return;const probabilities=this.currentPrediction.probabilities;for(let i=0;i<10;i++){const probElement=document.getElementById(`prob-${i}`);if(probElement){probElement.textContent=probabilities[i].toFixed(2);const maxProb=Math.max(...probabilities);probabilities[i]===maxProb?(probElement.style.fontWeight="bold",probElement.style.color="#1976d2"):(probElement.style.fontWeight="normal",probElement.style.color="#000")}}}clearFeatureMaps(){[this.conv1Ctx,this.pool1Ctx,this.conv2Ctx,this.pool2Ctx,this.fc1Ctx].forEach(ctx=>{const rect=ctx.canvas.getBoundingClientRect();ctx.clearRect(0,0,rect.width,rect.height)})}drawInitialImage(){if(this.pretrainedData&&this.pretrainedData.samples.length>0){const firstSample=this.pretrainedData.samples[0];this.currentImage=firstSample.image,this.drawImageOnCanvas(firstSample.image),this.selectedDigit=0,this.runAutomaticPrediction()}}}document.addEventListener("DOMContentLoaded",()=>{new DemoTabController({container:".info-tabs",onTabChange:tabName=>{console.log(`Switched to tab: ${tabName}`)}});new CNNMnistDemo});