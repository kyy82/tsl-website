class RNNDemo{constructor(){this.inputCanvas=document.getElementById("input-canvas"),this.rnnCanvas=document.getElementById("rnn-canvas"),this.outputCanvas=document.getElementById("output-canvas"),this.inputCtx=this.inputCanvas.getContext("2d"),this.rnnCtx=this.rnnCanvas.getContext("2d"),this.outputCtx=this.outputCanvas.getContext("2d"),this.sequenceSelect=document.getElementById("sequence-select"),this.inputWeightSlider=document.getElementById("input-weight"),this.hiddenWeightSlider=document.getElementById("hidden-weight"),this.biasSlider=document.getElementById("bias"),this.activationSelect=document.getElementById("activation-select"),this.stepBtn=document.getElementById("step-btn"),this.resetBtn=document.getElementById("reset-btn"),this.inputWeightValue=document.getElementById("input-weight-value"),this.hiddenWeightValue=document.getElementById("hidden-weight-value"),this.biasValue=document.getElementById("bias-value"),this.timestepDisplay=document.getElementById("timestep-display"),this.hiddenStateDisplay=document.getElementById("hidden-state-display"),this.outputDisplay=document.getElementById("output-display"),this.setupHighDPICanvas(this.inputCanvas,this.inputCtx),this.setupHighDPICanvas(this.rnnCanvas,this.rnnCtx),this.setupHighDPICanvas(this.outputCanvas,this.outputCtx),this.sequences={fibonacci:[1,1,2,3,5],linear:[1,2,3,4,5],alternating:[1,-1,1,-1,1],exponential:[1,2,4,8,16],sine:[0,.5,1,.5,0]},this.reset(),this.setupEventListeners(),this.updateDisplay(),this.render()}setupHighDPICanvas(canvas,ctx){const dpr=window.devicePixelRatio||1,displayWidth=canvas.clientWidth||canvas.width,displayHeight=canvas.clientHeight||canvas.height;return canvas.width=displayWidth*dpr,canvas.height=displayHeight*dpr,canvas.style.width=displayWidth+"px",canvas.style.height=displayHeight+"px",ctx.scale(dpr,dpr),ctx.imageSmoothingEnabled=!0,ctx.imageSmoothingQuality="high",{displayWidth:displayWidth,displayHeight:displayHeight}}setupEventListeners(){this.inputWeightSlider.addEventListener("input",()=>{this.inputWeightValue.textContent=parseFloat(this.inputWeightSlider.value).toFixed(1),this.render()}),this.hiddenWeightSlider.addEventListener("input",()=>{this.hiddenWeightValue.textContent=parseFloat(this.hiddenWeightSlider.value).toFixed(1),this.render()}),this.biasSlider.addEventListener("input",()=>{this.biasValue.textContent=parseFloat(this.biasSlider.value).toFixed(1),this.render()}),this.sequenceSelect.addEventListener("change",()=>{this.reset(),this.render()}),this.activationSelect.addEventListener("change",()=>{this.render()}),this.stepBtn.addEventListener("click",()=>this.step()),this.resetBtn.addEventListener("click",()=>{this.reset(),this.render()})}reset(){this.currentTimestep=0,this.hiddenState=0,this.outputs=[],this.hiddenStates=[],this.currentSequence=this.sequences[this.sequenceSelect.value],this.updateDisplay()}step(){if(this.currentTimestep<this.currentSequence.length){const input=this.currentSequence[this.currentTimestep],inputWeight=parseFloat(this.inputWeightSlider.value),hiddenWeight=parseFloat(this.hiddenWeightSlider.value),bias=parseFloat(this.biasSlider.value),preActivation=inputWeight*input+hiddenWeight*this.hiddenState+bias;this.hiddenState=this.applyActivation(preActivation);const output=this.hiddenState;this.outputs.push(output),this.hiddenStates.push(this.hiddenState),this.currentTimestep++,this.updateDisplay(),this.render()}}applyActivation(x){switch(this.activationSelect.value){case"linear":default:return x;case"relu":return Math.max(0,x);case"sigmoid":return 1/(1+Math.exp(-x));case"tanh":return Math.tanh(x)}}updateDisplay(){this.timestepDisplay.textContent=this.currentTimestep,this.hiddenStateDisplay.textContent=this.hiddenState.toFixed(3);const currentOutput=this.outputs.length>0?this.outputs[this.outputs.length-1]:0;this.outputDisplay.textContent=currentOutput.toFixed(3)}render(){this.clearCanvases(),this.drawInputSequence(),this.drawRNNCell(),this.drawOutput()}clearCanvases(){const canvases=[this.inputCanvas,this.rnnCanvas,this.outputCanvas];[this.inputCtx,this.rnnCtx,this.outputCtx].forEach((ctx,i)=>{ctx.clearRect(0,0,canvases[i].clientWidth,canvases[i].clientHeight)})}drawInputSequence(){const ctx=this.inputCtx,canvas=this.inputCanvas,width=canvas.clientWidth,height=canvas.clientHeight,sequence=this.currentSequence,cellWidth=width/sequence.length,startY=(height-60)/2;if(sequence.forEach((value,index)=>{const x=index*cellWidth+.1*cellWidth,y=startY,w=.8*cellWidth;index===this.currentTimestep&&this.currentTimestep<sequence.length?(ctx.fillStyle="#ffd700",ctx.strokeStyle="#ff8c00",ctx.lineWidth=3):index<this.currentTimestep?(ctx.fillStyle="#e3f2fd",ctx.strokeStyle="#1976d2",ctx.lineWidth=2):(ctx.fillStyle="#f5f5f5",ctx.strokeStyle="#ccc",ctx.lineWidth=1),ctx.fillRect(x,y,w,60),ctx.strokeRect(x,y,w,60),ctx.fillStyle="#333",ctx.font="18px Arial",ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillText(value.toString(),x+w/2,y+30),ctx.font="12px Arial",ctx.fillStyle="#666",ctx.fillText(`t=${index}`,x+w/2,y+60+15)}),this.currentTimestep<sequence.length){const arrowX=this.currentTimestep*cellWidth+cellWidth/2,arrowY=startY-20;ctx.fillStyle="#ff6b6b",ctx.beginPath(),ctx.moveTo(arrowX,arrowY),ctx.lineTo(arrowX-8,arrowY-15),ctx.lineTo(arrowX+8,arrowY-15),ctx.closePath(),ctx.fill()}}drawRNNCell(){const ctx=this.rnnCtx,canvas=this.rnnCanvas,centerX=canvas.clientWidth/2,centerY=canvas.clientHeight/2,cellX=centerX-60,cellY=centerY-40;ctx.fillStyle="#f3e5f5",ctx.strokeStyle="#7b1fa2",ctx.lineWidth=3,ctx.fillRect(cellX,cellY,120,80),ctx.strokeRect(cellX,cellY,120,80),ctx.fillStyle="#333",ctx.font="bold 16px Arial",ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillText("RNN",centerX,centerY-15),ctx.font="14px Arial",ctx.fillText(`bias = ${this.biasSlider.value}`,centerX,centerY+5),ctx.fillText(`f = ${this.activationSelect.value}`,centerX,centerY+20);const hiddenPrevX=centerX-150,hiddenPrevY=centerY;ctx.fillStyle="#fff3e0",ctx.strokeStyle="#f57c00",ctx.lineWidth=3,ctx.beginPath(),ctx.arc(hiddenPrevX,hiddenPrevY,25,0,2*Math.PI),ctx.fill(),ctx.stroke(),ctx.fillStyle="#333",ctx.font="bold 16px Arial",ctx.textAlign="center",ctx.fillText("h",hiddenPrevX-8,hiddenPrevY),ctx.font="10px Arial",ctx.fillText("t-1",hiddenPrevX+8,hiddenPrevY+8);const prevHidden=this.hiddenStates.length>1?this.hiddenStates[this.hiddenStates.length-2]:0;ctx.font="13px Arial",ctx.fillStyle="#f57c00",ctx.fillText(prevHidden.toFixed(2),hiddenPrevX,hiddenPrevY+35);const inputX=centerX,inputY=centerY+100;if(ctx.fillStyle="#e3f2fd",ctx.strokeStyle="#1976d2",ctx.lineWidth=3,ctx.beginPath(),ctx.arc(inputX,inputY,25,0,2*Math.PI),ctx.fill(),ctx.stroke(),ctx.fillStyle="#333",ctx.font="bold 18px Arial",ctx.textAlign="center",ctx.fillText("x",inputX-6,inputY),ctx.font="11px Arial",ctx.fillText("t",inputX+6,inputY+6),this.currentTimestep>0&&this.currentTimestep<=this.currentSequence.length){const currentInput=this.currentSequence[this.currentTimestep-1];ctx.font="13px Arial",ctx.fillStyle="#1976d2",ctx.fillText(currentInput.toString(),inputX,inputY+35)}const outputX=centerX+150,outputY=centerY;ctx.fillStyle="#e8f5e8",ctx.strokeStyle="#388e3c",ctx.lineWidth=3,ctx.beginPath(),ctx.arc(outputX,outputY,25,0,2*Math.PI),ctx.fill(),ctx.stroke(),ctx.fillStyle="#333",ctx.font="bold 18px Arial",ctx.textAlign="center",ctx.fillText("h",outputX-6,outputY),ctx.font="11px Arial",ctx.fillText("t",outputX+6,outputY+6),ctx.font="13px Arial",ctx.fillStyle="#388e3c",ctx.fillText(this.hiddenState.toFixed(2),outputX,outputY+35),this.drawConnection(ctx,hiddenPrevX+25,hiddenPrevY,cellX,centerY,`W_{h}=${this.hiddenWeightSlider.value}`,"#f57c00",{x:(hiddenPrevX+25+cellX)/2,y:centerY-15});const inputLabelX=centerX+25,inputLabelY=(inputY-25+cellY+80)/2;this.drawConnection(ctx,inputX,inputY-25,centerX,cellY+80,`W_{i}=${this.inputWeightSlider.value}`,"#1976d2",{x:inputLabelX,y:inputLabelY}),this.drawConnection(ctx,cellX+120,centerY,outputX-25,outputY,"","#388e3c")}drawConnection(ctx,x1,y1,x2,y2,label,color,labelOffset=null){ctx.strokeStyle=color,ctx.lineWidth=2,ctx.beginPath(),ctx.moveTo(x1,y1),ctx.lineTo(x2,y2),ctx.stroke();const angle=Math.atan2(y2-y1,x2-x1);if(ctx.beginPath(),ctx.moveTo(x2,y2),ctx.lineTo(x2-8*Math.cos(angle-Math.PI/6),y2-8*Math.sin(angle-Math.PI/6)),ctx.lineTo(x2-8*Math.cos(angle+Math.PI/6),y2-8*Math.sin(angle+Math.PI/6)),ctx.closePath(),ctx.fillStyle=color,ctx.fill(),label){let labelX,labelY;labelOffset?(labelX=labelOffset.x,labelY=labelOffset.y):(labelX=(x1+x2)/2,labelY=(y1+y2)/2-5),ctx.fillStyle=color,this.drawMathLabel(ctx,label,labelX,labelY)}}drawMathLabel(ctx,label,x,y){if(label.includes("W_{h}=")){const value=label.split("=")[1];ctx.font="bold 12px Arial",ctx.textAlign="center",ctx.fillText("W",x-15,y),ctx.font="9px Arial",ctx.fillText("h",x-7,y+5),ctx.font="12px Arial",ctx.fillText("=",x+2,y),ctx.fillText(value,x+12,y)}else if(label.includes("W_{i}=")){const value=label.split("=")[1];ctx.font="bold 12px Arial",ctx.textAlign="center",ctx.fillText("W",x-15,y),ctx.font="9px Arial",ctx.fillText("i",x-7,y+5),ctx.font="12px Arial",ctx.fillText("=",x+2,y),ctx.fillText(value,x+12,y)}else ctx.font="12px Arial",ctx.textAlign="center",ctx.fillText(label,x,y)}drawOutput(){const ctx=this.outputCtx,canvas=this.outputCanvas,width=canvas.clientWidth,height=canvas.clientHeight;if(0===this.outputs.length)return;this.outputs;const cellWidth=width/this.currentSequence.length,startY=(height-60)/2;this.outputs.forEach((output,index)=>{const x=index*cellWidth+.1*cellWidth,y=startY,w=.8*cellWidth;ctx.fillStyle="#e8f5e8",ctx.strokeStyle="#388e3c",ctx.lineWidth=2,ctx.fillRect(x,y,w,60),ctx.strokeRect(x,y,w,60),ctx.fillStyle="#333",ctx.font="18px Arial",ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillText(output.toFixed(2),x+w/2,y+30),ctx.font="12px Arial",ctx.fillStyle="#666",ctx.fillText(`t=${index}`,x+w/2,y+60+15)});for(let index=this.outputs.length;index<this.currentSequence.length;index++){const x=index*cellWidth+.1*cellWidth,y=startY,w=.8*cellWidth,h=60;ctx.fillStyle="#f5f5f5",ctx.strokeStyle="#ccc",ctx.lineWidth=1,ctx.fillRect(x,y,w,h),ctx.strokeRect(x,y,w,h),ctx.font="12px Arial",ctx.fillStyle="#666",ctx.textAlign="center",ctx.fillText(`t=${index}`,x+w/2,y+h+15)}}}