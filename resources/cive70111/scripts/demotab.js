class DemoTabController{constructor(options={}){this.options={validTabs:options.validTabs||[],defaultTab:options.defaultTab||null,demoId:options.demoId||this.autoDetectDemoId(),onTabChange:options.onTabChange||(()=>{})},this.init()}autoDetectDemoId(){const path=window.location.pathname;let match=path.match(/lec\d+[a-z]_([^\/]+)/);if(match)return match[1].replace("/content.html","");if(match=path.match(/\/([^\/]+)\/content\.html$/),match){const folder=match[1],lecMatch=folder.match(/lec\d+[a-z]_(.+)/);return lecMatch?lecMatch[1]:folder}return"demo"}init(){this.setupTabs()}autoGenerateTabStructure(){const tabHeader=document.querySelector(".tab-header"),existingButtons=document.querySelectorAll(".tab-btn");if(existingButtons.length>0)return this.options.validTabs=Array.from(existingButtons).map(btn=>btn.getAttribute("data-tab")).filter(Boolean),void(this.options.defaultTab=this.options.defaultTab||this.options.validTabs[0]);if(!tabHeader)return void console.warn("DemoTabController: .tab-header not found");const panels=document.querySelectorAll(".tab-panel[data-tab-title]"),generatedTabs=[];panels.forEach((panel,index)=>{const title=panel.getAttribute("data-tab-title"),id=this.generateIdFromTitle(title);panel.id||(panel.id=id);const button=document.createElement("button");button.className="tab-btn"+(0===index?" active":""),button.setAttribute("data-tab",id),button.textContent=title,tabHeader.appendChild(button),generatedTabs.push(id)}),0===this.options.validTabs.length&&(this.options.validTabs=generatedTabs),!this.options.defaultTab&&generatedTabs.length>0&&(this.options.defaultTab=generatedTabs[0])}generateIdFromTitle(title){return title.toLowerCase().replace(/[^a-z0-9\s-]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-").trim()}setupTabs(){this.autoGenerateTabStructure();const tabButtons=document.querySelectorAll(".tab-btn"),tabPanels=document.querySelectorAll(".tab-panel"),switchToTab=targetTab=>{tabButtons.forEach(btn=>btn.classList.remove("active")),tabPanels.forEach(panel=>panel.classList.remove("active"));const targetButton=document.querySelector(`[data-tab="${targetTab}"]`),targetPanel=document.getElementById(targetTab);if(targetButton&&targetPanel){targetButton.classList.add("active"),targetPanel.classList.add("active"),history.replaceState(null,null,"#"+targetTab);try{window.parent&&window.parent!==window&&(window.parent.location.hash=`${this.options.demoId}|${targetTab}`)}catch(e){}this.options.onTabChange(targetTab)}};tabButtons.forEach(button=>{button.addEventListener("click",()=>{const targetTab=button.getAttribute("data-tab");switchToTab(targetTab)})});const handleHashChange=()=>{const currentScrollY=window.scrollY;let hash=window.location.hash.substring(1);if(!hash)try{if(window.parent&&window.parent!==window&&window.parent.location.hash){const parentHash=window.parent.location.hash.substring(1);parentHash.includes("|")&&parentHash.startsWith(`${this.options.demoId}|`)&&(hash=parentHash.split("|")[1])}}catch(e){}hash&&this.options.validTabs.includes(hash)?switchToTab(hash):switchToTab(this.options.defaultTab),setTimeout(()=>{window.scrollTo(0,currentScrollY)},0)};window.addEventListener("hashchange",handleHashChange),setTimeout(()=>{handleHashChange(),this.checkInitialTabState()},100)}checkInitialTabState(){const activePanel=document.querySelector(".tab-panel.active");activePanel&&activePanel.id&&this.options.onTabChange(activePanel.id)}switchToTab(tabName){if(this.options.validTabs.includes(tabName)){const targetButton=document.querySelector(`[data-tab="${tabName}"]`);targetButton&&targetButton.click()}}getCurrentTab(){const activeButton=document.querySelector(".tab-btn.active");return activeButton?activeButton.getAttribute("data-tab"):null}}window.createDemoTabController=options=>new DemoTabController(options),"undefined"!=typeof module&&module.exports&&(module.exports=DemoTabController);