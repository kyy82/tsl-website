class TwoDClassificationDemo{constructor(){this.canvas=document.getElementById("plot"),this.ctx=this.canvas.getContext("2d"),this.w1Slider=document.getElementById("w1"),this.w2Slider=document.getElementById("w2"),this.biasSlider=document.getElementById("bias"),this.w1Value=document.getElementById("w1-value"),this.w2Value=document.getElementById("w2-value"),this.biasValue=document.getElementById("bias-value"),this.boundaryType=document.getElementById("boundary-type"),this.w11Slider=document.getElementById("w11"),this.w22Slider=document.getElementById("w22"),this.w12Slider=document.getElementById("w12"),this.radiusSlider=document.getElementById("radius"),this.centerX1Slider=document.getElementById("center-x1"),this.centerX2Slider=document.getElementById("center-x2"),this.w11Value=document.getElementById("w11-value"),this.w22Value=document.getElementById("w22-value"),this.w12Value=document.getElementById("w12-value"),this.radiusValue=document.getElementById("radius-value"),this.centerX1Value=document.getElementById("center-x1-value"),this.centerX2Value=document.getElementById("center-x2-value"),this.equation=document.getElementById("equation"),this.accuracyDisplay=document.getElementById("accuracy"),this.lossDisplay=document.getElementById("loss"),this.solutionBtn=document.getElementById("solution-btn"),this.classToggle=document.getElementById("class-toggle"),this.generateDataBtn=document.getElementById("generate-data-btn"),this.clearDataBtn=document.getElementById("clear-data-btn"),this.setupHighDPICanvas(),this.plotWidth=this.displayWidth-80,this.plotHeight=this.displayHeight-80,this.plotX=40,this.plotY=40,this.x1Min=-5,this.x1Max=5,this.x2Min=-5,this.x2Max=5,this.generateDataPoints(),this.setupEventListeners(),this.updateControlsVisibility(),this.initializeDisplay()}generateDataPoints(){this.dataPoints=[];const t=["diagonal_clusters","horizontal_vertical","circular_pattern","random_mixed","corner_clusters"];switch(t[Math.floor(Math.random()*t.length)]){case"diagonal_clusters":this.generateDiagonalClusters();break;case"horizontal_vertical":this.generateHorizontalVertical();break;case"circular_pattern":this.generateCircularPattern();break;case"random_mixed":this.generateRandomMixed();break;case"corner_clusters":this.generateCornerClusters()}}generateDiagonalClusters(){for(let t=0;t<12;t++){const t=2.5*Math.random()-3+1.5*(Math.random()-.5),e=2.5*Math.random()-3+1.5*(Math.random()-.5);this.dataPoints.push({x1:t,x2:e,y:0})}for(let t=0;t<12;t++){const t=.5+2.5*Math.random()+1.5*(Math.random()-.5),e=.5+2.5*Math.random()+1.5*(Math.random()-.5);this.dataPoints.push({x1:t,x2:e,y:1})}}generateHorizontalVertical(){const t=Math.random()>.5;for(let e=0;e<12;e++)if(t){const t=8*(Math.random()-.5),e=2*Math.random()-3+.8*(Math.random()-.5);this.dataPoints.push({x1:t,x2:e,y:0})}else{const t=2*Math.random()-3+.8*(Math.random()-.5),e=8*(Math.random()-.5);this.dataPoints.push({x1:t,x2:e,y:0})}for(let e=0;e<12;e++)if(t){const t=8*(Math.random()-.5),e=1+2*Math.random()+.8*(Math.random()-.5);this.dataPoints.push({x1:t,x2:e,y:1})}else{const t=1+2*Math.random()+.8*(Math.random()-.5),e=8*(Math.random()-.5);this.dataPoints.push({x1:t,x2:e,y:1})}}generateCircularPattern(){for(let t=0;t<12;t++){const t=2*Math.random()*Math.PI,e=1.5*Math.random()+.5,i=e*Math.cos(t)+.8*(Math.random()-.5),a=e*Math.sin(t)+.8*(Math.random()-.5);this.dataPoints.push({x1:i,x2:a,y:0})}for(let t=0;t<12;t++){const e=2*Math.random()*Math.PI,i=2.5+1.5*Math.random(),a=i*Math.cos(e)+.8*(Math.random()-.5),s=i*Math.sin(e)+.8*(Math.random()-.5);Math.abs(a)<=4.5&&Math.abs(s)<=4.5?this.dataPoints.push({x1:a,x2:s,y:1}):t--}}generateRandomMixed(){for(let t=0;t<12;t++){const t=4*Math.random()-4+2*(Math.random()-.5),e=4*Math.random()-4+2*(Math.random()-.5);this.dataPoints.push({x1:t,x2:e,y:0})}for(let t=0;t<12;t++){const t=0+4*Math.random()+2*(Math.random()-.5),e=0+4*Math.random()+2*(Math.random()-.5);this.dataPoints.push({x1:t,x2:e,y:1})}}generateCornerClusters(){const t=[{x1:-3,x2:-3},{x1:3,x2:3},{x1:-3,x2:3},{x1:3,x2:-3}];for(let e=0;e<6;e++){const e=t[0],i=e.x1+2*(Math.random()-.5),a=e.x2+2*(Math.random()-.5);this.dataPoints.push({x1:i,x2:a,y:0})}for(let e=0;e<6;e++){const e=t[1],i=e.x1+2*(Math.random()-.5),a=e.x2+2*(Math.random()-.5);this.dataPoints.push({x1:i,x2:a,y:0})}for(let e=0;e<6;e++){const e=t[2],i=e.x1+2*(Math.random()-.5),a=e.x2+2*(Math.random()-.5);this.dataPoints.push({x1:i,x2:a,y:1})}for(let e=0;e<6;e++){const e=t[3],i=e.x1+2*(Math.random()-.5),a=e.x2+2*(Math.random()-.5);this.dataPoints.push({x1:i,x2:a,y:1})}}setupHighDPICanvas(){const t=window.devicePixelRatio||1,e=this.canvas.clientWidth||600,i=this.canvas.clientHeight||400;this.canvas.width=e*t,this.canvas.height=i*t,this.canvas.style.width=e+"px",this.canvas.style.height=i+"px",this.ctx.scale(t,t),this.ctx.imageSmoothingEnabled=!0,this.ctx.imageSmoothingQuality="high",this.dpr=t,this.displayWidth=e,this.displayHeight=i}initializeDisplay(){this.draw(),this.updateDisplayPlainText(),window.MathJax&&(MathJax.startup&&MathJax.startup.promise?MathJax.startup.promise.then((()=>{this.updateDisplay()})).catch((()=>{console.warn("MathJax failed to load, using plain text equations")})):setTimeout((()=>{this.updateDisplay()}),100))}updateDisplayPlainText(){const t=this.getCurrentParameters();this.w1Value.textContent=t.w1.toFixed(1),this.w2Value.textContent=t.w2.toFixed(1),this.biasValue.textContent=t.bias.toFixed(1),this.w11Value&&(this.w11Value.textContent=(t.w11||0).toFixed(1)),this.w22Value&&(this.w22Value.textContent=(t.w22||0).toFixed(1)),this.w12Value&&(this.w12Value.textContent=(t.w12||0).toFixed(1)),this.radiusValue&&(this.radiusValue.textContent=(t.radius||2).toFixed(1)),this.centerX1Value&&(this.centerX1Value.textContent=(t.centerX1||0).toFixed(1)),this.centerX2Value&&(this.centerX2Value.textContent=(t.centerX2||0).toFixed(1));const e=this.getEquationText(t);this.equation.textContent=e;const i=this.calculateAccuracy(),a=this.calculateLoss();this.accuracyDisplay.textContent=`Accuracy = ${(100*i).toFixed(1)}%`,this.lossDisplay.textContent=`Loss = ${a.toFixed(3)}`}getEquationText(t){switch(t.type){case"linear":default:return this.getLinearEquation(t);case"quadratic":return this.getQuadraticEquation(t);case"circular":return this.getCircularEquation(t)}}getLinearEquation(t){const e=t.bias>=0?"+":"-";return`f(x) = σ(${t.w1.toFixed(1)}x₁ + ${t.w2.toFixed(1)}x₂ ${e} ${Math.abs(t.bias).toFixed(1)})`}getQuadraticEquation(t){let e=[];if(0!==t.w1&&e.push(`${t.w1.toFixed(1)}x₁`),0!==t.w2&&e.push(`${t.w2.toFixed(1)}x₂`),t.w11&&0!==t.w11&&e.push(`${t.w11.toFixed(1)}x₁²`),t.w22&&0!==t.w22&&e.push(`${t.w22.toFixed(1)}x₂²`),t.w12&&0!==t.w12&&e.push(`${t.w12.toFixed(1)}x₁x₂`),0!==t.bias&&e.push(`${t.bias.toFixed(1)}`),0===e.length)return"f(x) = σ(0)";let i=e[0];for(let t=1;t<e.length;t++){const a=e[t];a.startsWith("-")?i+=` - ${a.substring(1)}`:i+=` + ${a}`}return`f(x) = σ(${i})`}getCircularEquation(t){const e=t.centerX1.toFixed(1),i=t.centerX2.toFixed(1);return`f(x) = σ(${t.radius.toFixed(1)} - √[(${t.centerX1>=0?`x₁ - ${e}`:`x₁ + ${Math.abs(t.centerX1).toFixed(1)}`})² + (${t.centerX2>=0?`x₂ - ${i}`:`x₂ + ${Math.abs(t.centerX2).toFixed(1)}`})²])`}getLatexEquation(t){switch(t.type){case"linear":default:return this.getLinearLatex(t);case"quadratic":return this.getQuadraticLatex(t);case"circular":return this.getCircularLatex(t)}}getLinearLatex(t){const e=t.bias>=0?"+":"-";return`$$f(\\mathbf{x}) = \\sigma(${t.w1.toFixed(1)}x_1 + ${t.w2.toFixed(1)}x_2 ${e} ${Math.abs(t.bias).toFixed(1)})$$`}getQuadraticLatex(t){let e=[];if(0!==t.w1&&e.push(`${t.w1.toFixed(1)}x_1`),0!==t.w2&&e.push(`${t.w2.toFixed(1)}x_2`),t.w11&&0!==t.w11&&e.push(`${t.w11.toFixed(1)}x_1^2`),t.w22&&0!==t.w22&&e.push(`${t.w22.toFixed(1)}x_2^2`),t.w12&&0!==t.w12&&e.push(`${t.w12.toFixed(1)}x_1 x_2`),0!==t.bias&&e.push(`${t.bias.toFixed(1)}`),0===e.length)return"$$f(\\mathbf{x}) = \\sigma(0)$$";let i=e[0];for(let t=1;t<e.length;t++){const a=e[t];a.startsWith("-")?i+=` - ${a.substring(1)}`:i+=` + ${a}`}return`$$f(\\mathbf{x}) = \\sigma(${i})$$`}getCircularLatex(t){const e=t.centerX1.toFixed(1),i=t.centerX2.toFixed(1);return`$$f(\\mathbf{x}) = \\sigma\\left(${t.radius.toFixed(1)} - \\sqrt{(${t.centerX1>=0?`x_1 - ${e}`:`x_1 + ${Math.abs(t.centerX1).toFixed(1)}`})^2 + (${t.centerX2>=0?`x_2 - ${i}`:`x_2 + ${Math.abs(t.centerX2).toFixed(1)}`})^2}\\right)$$`}setupEventListeners(){this.w1Slider.addEventListener("input",(()=>{this.updateDisplay(),this.draw()})),this.w2Slider.addEventListener("input",(()=>{this.updateDisplay(),this.draw()})),this.biasSlider.addEventListener("input",(()=>{this.updateDisplay(),this.draw()})),this.solutionBtn.addEventListener("click",(()=>{this.setOptimalValues()})),this.generateDataBtn.addEventListener("click",(()=>{this.generateNewData()})),this.clearDataBtn.addEventListener("click",(()=>{this.clearAllData()})),this.canvas.addEventListener("click",(t=>{this.handleCanvasClick(t)})),this.boundaryType.addEventListener("change",(()=>{this.updateControlsVisibility(),this.updateDisplay(),this.draw()})),[this.w11Slider,this.w22Slider,this.w12Slider,this.radiusSlider,this.centerX1Slider,this.centerX2Slider].forEach((t=>{t&&t.addEventListener("input",(()=>{this.updateDisplay(),this.draw()}))}))}updateControlsVisibility(){const t=this.boundaryType.value;switch(["w1-group","w2-group","bias-group","w11-group","w22-group","w12-group","radius-group","center-x1-group","center-x2-group"].forEach((t=>{const e=document.getElementById(t);e&&(e.style.display="none")})),t){case"linear":document.getElementById("w1-group").style.display="block",document.getElementById("w2-group").style.display="block",document.getElementById("bias-group").style.display="block";break;case"quadratic":document.getElementById("w1-group").style.display="block",document.getElementById("w2-group").style.display="block",document.getElementById("bias-group").style.display="block",document.getElementById("w11-group").style.display="block",document.getElementById("w22-group").style.display="block",document.getElementById("w12-group").style.display="block";break;case"circular":document.getElementById("radius-group").style.display="block",document.getElementById("center-x1-group").style.display="block",document.getElementById("center-x2-group").style.display="block"}}updateDisplay(){const t=this.getCurrentParameters();this.w1Value.textContent=t.w1.toFixed(1),this.w2Value.textContent=t.w2.toFixed(1),this.biasValue.textContent=t.bias.toFixed(1),this.w11Value&&(this.w11Value.textContent=(t.w11||0).toFixed(1)),this.w22Value&&(this.w22Value.textContent=(t.w22||0).toFixed(1)),this.w12Value&&(this.w12Value.textContent=(t.w12||0).toFixed(1)),this.radiusValue&&(this.radiusValue.textContent=(t.radius||2).toFixed(1)),this.centerX1Value&&(this.centerX1Value.textContent=(t.centerX1||0).toFixed(1)),this.centerX2Value&&(this.centerX2Value.textContent=(t.centerX2||0).toFixed(1));const e=this.getLatexEquation(t);this.equation.innerHTML=e,window.MathJax&&MathJax.typesetPromise([this.equation]).catch((t=>console.log(t)));const i=this.calculateAccuracy(),a=this.calculateLoss();this.accuracyDisplay.innerHTML=`$$\\text{Accuracy} = ${(100*i).toFixed(1)}\\%$$`,this.lossDisplay.innerHTML=`$$\\text{Loss} = ${a.toFixed(3)}$$`,window.MathJax&&MathJax.typesetPromise([this.accuracyDisplay,this.lossDisplay]).catch((t=>console.log(t)))}sigmoid(t){return 1/(1+Math.exp(-t))}predict(t,e,i=null){i||(i=this.getCurrentParameters());const a=this.computeLinearCombination(t,e,i);return this.sigmoid(a)}classify(t,e,i=null){return this.predict(t,e,i)>.5?1:0}getCurrentParameters(){const t=this.boundaryType.value,e={type:t,w1:parseFloat(this.w1Slider.value),w2:parseFloat(this.w2Slider.value),bias:parseFloat(this.biasSlider.value)};switch(t){case"quadratic":e.w11=this.w11Slider?parseFloat(this.w11Slider.value):0,e.w22=this.w22Slider?parseFloat(this.w22Slider.value):0,e.w12=this.w12Slider?parseFloat(this.w12Slider.value):0;break;case"circular":e.radius=this.radiusSlider?parseFloat(this.radiusSlider.value):2,e.centerX1=this.centerX1Slider?parseFloat(this.centerX1Slider.value):0,e.centerX2=this.centerX2Slider?parseFloat(this.centerX2Slider.value):0}return e}computeLinearCombination(t,e,i){let a=i.w1*t+i.w2*e+i.bias;switch(i.type){case"quadratic":a+=i.w11*t*t+i.w22*e*e+i.w12*t*e;break;case"circular":const s=t-i.centerX1,h=e-i.centerX2,n=Math.sqrt(s*s+h*h);a=i.radius-n}return a}dataToCanvas(t,e){return{x:this.plotX+(t-this.x1Min)/(this.x1Max-this.x1Min)*this.plotWidth,y:this.plotY+this.plotHeight-(e-this.x2Min)/(this.x2Max-this.x2Min)*this.plotHeight}}drawAxes(){this.ctx.strokeStyle="#333",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(this.plotX,this.plotY+this.plotHeight),this.ctx.lineTo(this.plotX+this.plotWidth,this.plotY+this.plotHeight),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.moveTo(this.plotX,this.plotY),this.ctx.lineTo(this.plotX,this.plotY+this.plotHeight),this.ctx.stroke(),this.drawGrid(),this.drawLabels()}drawGrid(){this.ctx.strokeStyle="#e0e0e0",this.ctx.lineWidth=1;for(let t=this.x1Min;t<=this.x1Max;t+=1){const e=this.dataToCanvas(t,0);this.ctx.beginPath(),this.ctx.moveTo(e.x,this.plotY),this.ctx.lineTo(e.x,this.plotY+this.plotHeight),this.ctx.stroke()}for(let t=this.x2Min;t<=this.x2Max;t+=1){const e=this.dataToCanvas(0,t);this.ctx.beginPath(),this.ctx.moveTo(this.plotX,e.y),this.ctx.lineTo(this.plotX+this.plotWidth,e.y),this.ctx.stroke()}}drawLabels(){this.ctx.fillStyle="#666",this.ctx.font="12px Arial",this.ctx.textAlign="center";for(let t=this.x1Min;t<=this.x1Max;t+=1){const e=this.dataToCanvas(t,0);this.ctx.fillText(t.toString(),e.x,this.plotY+this.plotHeight+20)}this.ctx.textAlign="right";for(let t=this.x2Min;t<=this.x2Max;t+=1){const e=this.dataToCanvas(0,t);this.ctx.fillText(t.toString(),this.plotX-10,e.y+4)}this.ctx.fillStyle="#333",this.ctx.font="14px Arial",this.ctx.textAlign="center",this.ctx.fillText("X₁",this.plotX+this.plotWidth/2,this.displayHeight-10),this.ctx.save(),this.ctx.translate(15,this.plotY+this.plotHeight/2),this.ctx.rotate(-Math.PI/2),this.ctx.fillText("X₂",0,0),this.ctx.restore()}drawDataPoints(){this.dataPoints.forEach((t=>{const e=this.dataToCanvas(t.x1,t.x2);0===t.y?(this.ctx.fillStyle="#ff6b6b",this.ctx.strokeStyle="#d63447"):(this.ctx.fillStyle="#4ecdc4",this.ctx.strokeStyle="#26a69a"),this.ctx.lineWidth=2,this.ctx.beginPath(),0===t.y?this.ctx.arc(e.x,e.y,5,0,2*Math.PI):this.ctx.rect(e.x-5,e.y-5,10,10),this.ctx.fill(),this.ctx.stroke()}))}drawDecisionBoundary(){const t=this.getCurrentParameters();this.drawNonlinearBoundary(t)}drawNonlinearBoundary(t){this.ctx.strokeStyle="#4ecdc4",this.ctx.lineWidth=3;const e=this.findContourLines(.5,100,t);this.drawContourLines(e,"#4ecdc4",3,[]);const i=this.findContourLines(.25,100,t),a=this.findContourLines(.75,100,t);this.drawContourLines(i,"rgba(78, 205, 196, 0.6)",2,[5,5]),this.drawContourLines(a,"rgba(78, 205, 196, 0.6)",2,[5,5]),this.ctx.setLineDash([])}findContourLines(t,e,i){const a=[],s=(this.x1Max-this.x1Min)/e;for(let h=0;h<e-1;h++)for(let n=0;n<e-1;n++){const e=this.x1Min+h*s,r=this.x1Min+(h+1)*s,o=this.x2Min+n*s,l=this.x2Min+(n+1)*s,d=this.predict(e,o,i),c=this.predict(r,o,i),x=this.predict(e,l,i),u=this.predict(r,l,i),p=Math.min(d,c,x,u),m=Math.max(d,c,x,u);if(p<=t&&m>=t){const i=[];if((d-t)*(c-t)<=0){const a=(t-d)/(c-d);i.push({x1:e+a*s,x2:o})}if((c-t)*(u-t)<=0){const e=(t-c)/(u-c);i.push({x1:r,x2:o+e*s})}if((u-t)*(x-t)<=0){const a=(t-x)/(u-x);i.push({x1:e+a*s,x2:l})}if((x-t)*(d-t)<=0){const a=(t-d)/(x-d);i.push({x1:e,x2:o+a*s})}i.length>=2&&a.push({start:i[0],end:i[1]})}}return a}drawContourLines(t,e,i,a){this.ctx.strokeStyle=e,this.ctx.lineWidth=i,this.ctx.setLineDash(a),t.forEach((t=>{const e=this.dataToCanvas(t.start.x1,t.start.x2),i=this.dataToCanvas(t.end.x1,t.end.x2);this.ctx.beginPath(),this.ctx.moveTo(e.x,e.y),this.ctx.lineTo(i.x,i.y),this.ctx.stroke()}))}drawLinearBoundary(t,e,i){if(Math.abs(e)<.001){if(Math.abs(t)>.001){const e=-i/t;if(e>=this.x1Min&&e<=this.x1Max){const t=this.dataToCanvas(e,this.x2Min),i=this.dataToCanvas(e,this.x2Max);this.ctx.strokeStyle="#4ecdc4",this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(i.x,i.y),this.ctx.stroke()}}}else{const a=this.x1Min,s=-(t*a+i)/e,h=this.x1Max,n=-(t*h+i)/e;if(s>=this.x2Min&&s<=this.x2Max||n>=this.x2Min&&n<=this.x2Max||s<this.x2Min&&n>this.x2Max||s>this.x2Max&&n<this.x2Min){const t=this.dataToCanvas(a,s),e=this.dataToCanvas(h,n);this.ctx.strokeStyle="#4ecdc4",this.ctx.lineWidth=3,this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke()}}}drawSigmoidContours(t,e,i){this.ctx.strokeStyle="#4ecdc4",this.ctx.lineWidth=3,this.drawLinearBoundary(t,e,i),this.ctx.strokeStyle="rgba(78, 205, 196, 0.6)",this.ctx.lineWidth=2,this.ctx.setLineDash([5,5]);[.25,.75].forEach((a=>{const s=Math.log(a/(1-a)),h=i-s;if(Math.abs(e)>.001){const i=this.x1Min,a=-(t*i+h)/e,s=this.x1Max,n=-(t*s+h)/e;if(a>=this.x2Min&&a<=this.x2Max||n>=this.x2Min&&n<=this.x2Max||a<this.x2Min&&n>this.x2Max||a>this.x2Max&&n<this.x2Min){const t=this.dataToCanvas(i,a),e=this.dataToCanvas(s,n);this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke()}}})),this.ctx.setLineDash([])}calculateAccuracy(){if(0===this.dataPoints.length)return 0;let t=0;return this.dataPoints.forEach((e=>{this.classify(e.x1,e.x2)===e.y&&t++})),t/this.dataPoints.length}calculateLoss(){if(0===this.dataPoints.length)return 0;let t=0;return this.dataPoints.forEach((e=>{const i=this.predict(e.x1,e.x2),a=Math.max(1e-15,Math.min(1-1e-15,i));t+=-(e.y*Math.log(a)+(1-e.y)*Math.log(1-a))})),t/this.dataPoints.length}resetParametersToDefault(){this.w1Slider.value="0.1",this.w2Slider.value="0.1",this.biasSlider.value="0.0",this.w11Slider&&(this.w11Slider.value="0.0"),this.w22Slider&&(this.w22Slider.value="0.0"),this.w12Slider&&(this.w12Slider.value="0.0"),this.radiusSlider&&(this.radiusSlider.value="2.0"),this.centerX1Slider&&(this.centerX1Slider.value="0.0"),this.centerX2Slider&&(this.centerX2Slider.value="0.0")}setParametersFromObject(t){this.w1Slider.value=t.w1.toFixed(1),this.w2Slider.value=t.w2.toFixed(1),this.biasSlider.value=t.bias.toFixed(1),void 0!==t.w11&&this.w11Slider&&(this.w11Slider.value=t.w11.toFixed(1)),void 0!==t.w22&&this.w22Slider&&(this.w22Slider.value=t.w22.toFixed(1)),void 0!==t.w12&&this.w12Slider&&(this.w12Slider.value=t.w12.toFixed(1)),void 0!==t.radius&&this.radiusSlider&&(this.radiusSlider.value=t.radius.toFixed(1)),void 0!==t.centerX1&&this.centerX1Slider&&(this.centerX1Slider.value=t.centerX1.toFixed(1)),void 0!==t.centerX2&&this.centerX2Slider&&(this.centerX2Slider.value=t.centerX2.toFixed(1))}calculateAccuracyWithParams(t){if(0===this.dataPoints.length)return 0;let e=0;return this.dataPoints.forEach((i=>{(this.predict(i.x1,i.x2,t)>.5?1:0)===i.y&&e++})),e/this.dataPoints.length}setOptimalValues(){if(0===this.dataPoints.length)return;const t=this.boundaryType.value;this.optimizeForBoundaryType(t).then((t=>{this.setParametersFromObject(t),this.updateDisplay(),this.draw()}))}async optimizeForBoundaryType(t){switch(t){case"linear":default:return this.optimizeLinear();case"quadratic":return this.optimizeQuadratic();case"circular":return this.optimizeCircular()}}optimizeLinear(){return new Promise((t=>{let e=parseFloat(this.w1Slider.value),i=parseFloat(this.w2Slider.value),a=parseFloat(this.biasSlider.value);for(let t=0;t<1e3;t++){let t=0,s=0,h=0;if(this.dataPoints.forEach((n=>{const r=e*n.x1+i*n.x2+a,o=this.sigmoid(r)-n.y;t+=o*n.x1,s+=o*n.x2,h+=o})),t/=this.dataPoints.length,s/=this.dataPoints.length,h/=this.dataPoints.length,e-=.1*t,i-=.1*s,a-=.1*h,Math.abs(t)<.001&&Math.abs(s)<.001&&Math.abs(h)<.001)break}t({type:"linear",w1:Math.max(-5,Math.min(5,e)),w2:Math.max(-5,Math.min(5,i)),bias:Math.max(-10,Math.min(10,a))})}))}optimizeQuadratic(){return new Promise((t=>{let e=parseFloat(this.w1Slider.value),i=parseFloat(this.w2Slider.value),a=parseFloat(this.biasSlider.value),s=0,h=0,n=0;const r=.05;for(let t=0;t<1e3;t++){let t=0,o=0,l=0,d=0,c=0,x=0;this.dataPoints.forEach((r=>{const u=e*r.x1+i*r.x2+s*r.x1*r.x1+h*r.x2*r.x2+n*r.x1*r.x2+a,p=this.sigmoid(u)-r.y;t+=p*r.x1,o+=p*r.x2,d+=p*r.x1*r.x1,c+=p*r.x2*r.x2,x+=p*r.x1*r.x2,l+=p}));const u=this.dataPoints.length;if(t/=u,o/=u,l/=u,d/=u,c/=u,x/=u,e-=r*t,i-=r*o,s-=r*d,h-=r*c,n-=r*x,a-=r*l,Math.abs(t)<.001&&Math.abs(o)<.001&&Math.abs(d)<.001&&Math.abs(c)<.001&&Math.abs(x)<.001&&Math.abs(l)<.001)break}t({type:"quadratic",w1:Math.max(-5,Math.min(5,e)),w2:Math.max(-5,Math.min(5,i)),w11:Math.max(-2,Math.min(2,s)),w22:Math.max(-2,Math.min(2,h)),w12:Math.max(-2,Math.min(2,n)),bias:Math.max(-10,Math.min(10,a))})}))}optimizeCircular(){return new Promise((t=>{let e=0,i={type:"circular",w1:0,w2:0,bias:0,radius:2,centerX1:0,centerX2:0};for(let t=-3;t<=3;t+=.5)for(let a=-3;a<=3;a+=.5)for(let s=.5;s<=4;s+=.3){const h={type:"circular",w1:0,w2:0,bias:0,radius:s,centerX1:t,centerX2:a},n=this.calculateAccuracyWithParams(h);n>e&&(e=n,i=h)}t(i)}))}generateNewData(){this.clearAllData(),this.generateDataPoints(),this.updateDisplay(),this.draw()}clearAllData(){this.dataPoints=[],this.updateDisplay(),this.draw()}handleCanvasClick(t){const e=this.canvas.getBoundingClientRect(),i=t.clientX-e.left,a=t.clientY-e.top,s=this.canvasToData(i,a);if(this.isWithinPlotArea(i,a)){const t=parseInt(this.classToggle.value);this.dataPoints.push({x1:s.x1,x2:s.x2,y:t}),this.updateDisplay(),this.draw()}}canvasToData(t,e){return{x1:this.x1Min+(t-this.plotX)/this.plotWidth*(this.x1Max-this.x1Min),x2:this.x2Max-(e-this.plotY)/this.plotHeight*(this.x2Max-this.x2Min)}}isWithinPlotArea(t,e){return t>=this.plotX&&t<=this.plotX+this.plotWidth&&e>=this.plotY&&e<=this.plotY+this.plotHeight}draw(){this.ctx.clearRect(0,0,this.displayWidth,this.displayHeight),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.drawAxes(),this.drawDecisionBoundary(),this.drawDataPoints()}}document.addEventListener("DOMContentLoaded",(()=>{new TwoDClassificationDemo}));