class TwoDClassificationDemo{constructor(){this.canvas=document.getElementById("plot"),this.overlayCanvas=document.getElementById("overlay-canvas"),this.overlayCtx=this.overlayCanvas.getContext("2d"),this.chart=null,this.w1Slider=document.getElementById("w1"),this.w2Slider=document.getElementById("w2"),this.biasSlider=document.getElementById("bias"),this.w1Value=document.getElementById("w1-value"),this.w2Value=document.getElementById("w2-value"),this.biasValue=document.getElementById("bias-value"),this.boundaryType=document.getElementById("boundary-type"),this.w11Slider=document.getElementById("w11"),this.w22Slider=document.getElementById("w22"),this.w12Slider=document.getElementById("w12"),this.w11Value=document.getElementById("w11-value"),this.w22Value=document.getElementById("w22-value"),this.w12Value=document.getElementById("w12-value"),this.equation=document.getElementById("equation"),this.accuracyDisplay=document.getElementById("accuracy"),this.lossDisplay=document.getElementById("loss"),this.solutionBtn=document.getElementById("solution-btn"),this.classToggle=document.getElementById("class-toggle"),this.generateDataBtn=document.getElementById("generate-data-btn"),this.clearDataBtn=document.getElementById("clear-data-btn"),this.structuresBtn=document.getElementById("structures-btn"),this.geotechBtn=document.getElementById("geotech-btn"),this.transportBtn=document.getElementById("transport-btn"),this.environmentBtn=document.getElementById("environment-btn"),this.datasetInfoBox=document.getElementById("dataset-info-box"),this.datasetInfoTitle=document.getElementById("dataset-info-title"),this.datasetInfoDescription=document.getElementById("dataset-info-description"),this.datasetInfoVariables=document.getElementById("dataset-info-variables"),this.defaultXLabel="X₁",this.defaultYLabel="X₂",this.xLabel=this.defaultXLabel,this.yLabel=this.defaultYLabel,this.datasets={structures:{name:"Structures - Concrete Grade",file:"example-data/structures.csv",xLabel:"Cement (kg/m³)",yLabel:"Water (kg/m³)",xColumn:"Cement",yColumn:"Water",title:"Structures: Concrete Grade Classification",description:"Classify whether concrete mix designs achieve C30 grade strength (≥30 MPa) based on cement and water content.",variables:"Variables: Cement content (kg/m³) vs Water content (kg/m³)",sliders:{w1:{min:-1,max:1,step:.001},w2:{min:-1,max:1,step:.001},bias:{min:-5,max:5,step:.01}},optimalSolution:{w1:.016,w2:-.02,bias:0}},geotech:{name:"Geotechnics - Soil Shear Strength",file:"example-data/geotechnics.csv",xLabel:"Clay (%)",yLabel:"Silt (%)",xColumn:"Clay",yColumn:"Silt",title:"Geotechnics: Soil Shear Strength Classification",description:"Classify soil samples based on shear strength characteristics (friction angle φ ≥ 30°) using particle size distribution.",variables:"Variables: Clay percentage (%) vs Silt percentage (%)",sliders:{w1:{min:-5,max:5,step:.01},w2:{min:-1,max:1,step:.001},bias:{min:-10,max:10,step:.01}},optimalSolution:{w1:-.15,w2:-.007,bias:1.86}},transport:{name:"Transport - EV Market Segmentation",file:"example-data/transport.csv",xLabel:"Acceleration (0-100 km/h, s)",yLabel:"Battery (kWh)",xColumn:"Acceleration",yColumn:"Battery",title:"Transport: Electric Vehicle Market Segmentation",description:"Classify electric vehicles into standard vs luxury market segments (UK price ≥ £40k) based on performance and battery specifications.",variables:"Variables: 0-100 km/h acceleration time (s) vs Battery capacity (kWh)",sliders:{w1:{min:-3,max:3,step:.01},w2:{min:-1,max:1,step:.01},bias:{min:-5,max:5,step:.01}},optimalSolution:{w1:-.84,w2:.1,bias:-.31}},environment:{name:"Environment - Wastewater Pollution",file:"example-data/environment.csv",xLabel:"Nitrogen (mg/L)",yLabel:"Temperature (°C)",xColumn:"Nitrogen",yColumn:"Temperature",title:"Environment: Wastewater Pollution Classification",description:"Classify wastewater pollution levels (BOD ≥ 360 mg/L) based on nitrogen content and temperature.",variables:"Variables: Total nitrogen concentration (mg/L) vs Water temperature (°C)",sliders:{w1:{min:-1,max:1,step:.001},w2:{min:-1,max:1,step:.001},bias:{min:-5,max:5,step:.01}},optimalSolution:{w1:.01,w2:-.03,bias:-.14}}},this.activeDatasetKey=null,this.hideDatasetInfo(),this.x1Min=-5,this.x1Max=5,this.x2Min=-5,this.x2Max=5,this.generateDataPoints(),this.initializeChart(),requestAnimationFrame(()=>{this.setupOverlayCanvas(),this.updateChart()}),this.setupEventListeners(),this.tabController=new DemoTabController,this.updateControlsVisibility(),this.initializeDisplay()}roundRangeToNiceValues(rawMin,rawMax){const minAbs=Math.abs(rawMin),maxAbs=Math.abs(rawMax),referenceMagnitude=Math.min(minAbs,maxAbs);if(0===referenceMagnitude)return{min:0,max:this.roundSingleValue(maxAbs,!0)};const roundingUnit=5*(Math.pow(10,Math.floor(Math.log10(referenceMagnitude)))/10),min=Math.floor(minAbs/roundingUnit)*roundingUnit,max=Math.ceil(maxAbs/roundingUnit)*roundingUnit;return{min:rawMin<0?-max:min,max:rawMax<0?-min:max}}roundSingleValue(value,roundUp){const roundingUnit=5*Math.pow(10,Math.floor(Math.log10(value)))/10;return roundUp?Math.ceil(value/roundingUnit)*roundingUnit:Math.floor(value/roundingUnit)*roundingUnit}roundStepToNiceFactor(rawStep,range){const magnitude=Math.pow(10,Math.floor(Math.log10(rawStep))),niceMultipliers=[1,2,2.5,5,10],candidates=[];for(let exp=-1;exp<=1;exp++){const scale=magnitude*Math.pow(10,exp);niceMultipliers.forEach(mult=>{const candidate=mult*scale,divisions=range/candidate;Math.abs(divisions-Math.round(divisions))<.01&&divisions>=5&&divisions<=2e4&&candidates.push({value:candidate,distance:Math.abs(candidate-rawStep),divisions:Math.round(divisions)})})}if(0===candidates.length){return Math.round(rawStep/magnitude)*magnitude}return candidates.sort((a,b)=>a.distance-b.distance),candidates[0].value}formatParameterValue(value){const absValue=Math.abs(value);if(0===absValue)return"0";let decimals;decimals=absValue>=100||absValue>=10||absValue>=1?1:absValue>=.01?2:absValue>=.001?3:4;return value.toFixed(decimals).replace(/(\.\d*?[1-9])0+$/,"$1").replace(/\.0+$/,"")}adaptSlidersToDataset(){const R1=this.x1Max-this.x1Min,R2=this.x2Max-this.x2Min,w1_scale=10/R1,w2_scale=10/R2,w11_scale=Math.pow(10/R1,2),w22_scale=Math.pow(10/R2,2),w12_scale=10/R1*(10/R2),bias_scale=Math.sqrt(w1_scale*w2_scale);this.updateSliderWithNiceValues(this.w1Slider,-20,20,1e-6,w1_scale),this.updateSliderWithNiceValues(this.w2Slider,-20,20,1e-6,w2_scale),this.updateSliderWithNiceValues(this.biasSlider,-40,40,2e-6,bias_scale),this.w11Slider&&this.updateSliderWithNiceValues(this.w11Slider,-4,4,2e-10,w11_scale),this.w22Slider&&this.updateSliderWithNiceValues(this.w22Slider,-4,4,2e-10,w22_scale),this.w12Slider&&this.updateSliderWithNiceValues(this.w12Slider,-4,4,2e-10,w12_scale)}updateSliderWithNiceValues(slider,refMin,refMax,refStep,scale){const rawMin=refMin/scale,rawMax=refMax/scale,rawStep=refStep/scale,roundedRange=this.roundRangeToNiceValues(rawMin,rawMax),range=roundedRange.max-roundedRange.min,niceStep=this.roundStepToNiceFactor(rawStep,range);slider.setAttribute("min",roundedRange.min),slider.setAttribute("max",roundedRange.max),slider.setAttribute("step",niceStep);const currentValue=parseFloat(slider.value);(currentValue<roundedRange.min||currentValue>roundedRange.max)&&(slider.value=0)}resetSlidersToDefaultRanges(){this.w1Slider.setAttribute("min",-20),this.w1Slider.setAttribute("max",20),this.w1Slider.setAttribute("step",.002),this.w2Slider.setAttribute("min",-20),this.w2Slider.setAttribute("max",20),this.w2Slider.setAttribute("step",.002),this.biasSlider.setAttribute("min",-40),this.biasSlider.setAttribute("max",40),this.biasSlider.setAttribute("step",.004),this.w11Slider&&(this.w11Slider.setAttribute("min",-4),this.w11Slider.setAttribute("max",4),this.w11Slider.setAttribute("step",4e-4)),this.w22Slider&&(this.w22Slider.setAttribute("min",-4),this.w22Slider.setAttribute("max",4),this.w22Slider.setAttribute("step",4e-4)),this.w12Slider&&(this.w12Slider.setAttribute("min",-4),this.w12Slider.setAttribute("max",4),this.w12Slider.setAttribute("step",4e-4))}generateDataPoints(){this.dataPoints=[];const patterns=["diagonal_clusters","horizontal_vertical","random_mixed","corner_clusters"];switch(patterns[Math.floor(Math.random()*patterns.length)]){case"diagonal_clusters":this.generateDiagonalClusters();break;case"horizontal_vertical":this.generateHorizontalVertical();break;case"random_mixed":this.generateRandomMixed();break;case"corner_clusters":this.generateCornerClusters()}}generateDiagonalClusters(){for(let i=0;i<12;i++){const x1=2.5*Math.random()-3+1.5*(Math.random()-.5),x2=2.5*Math.random()-3+1.5*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:0})}for(let i=0;i<12;i++){const x1=.5+2.5*Math.random()+1.5*(Math.random()-.5),x2=.5+2.5*Math.random()+1.5*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:1})}}generateHorizontalVertical(){const isHorizontal=Math.random()>.5;for(let i=0;i<12;i++)if(isHorizontal){const x1=8*(Math.random()-.5),x2=2*Math.random()-3+.8*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:0})}else{const x1=2*Math.random()-3+.8*(Math.random()-.5),x2=8*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:0})}for(let i=0;i<12;i++)if(isHorizontal){const x1=8*(Math.random()-.5),x2=1+2*Math.random()+.8*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:1})}else{const x1=1+2*Math.random()+.8*(Math.random()-.5),x2=8*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:1})}}generateRandomMixed(){for(let i=0;i<12;i++){const x1=4*Math.random()-4+2*(Math.random()-.5),x2=4*Math.random()-4+2*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:0})}for(let i=0;i<12;i++){const x1=0+4*Math.random()+2*(Math.random()-.5),x2=0+4*Math.random()+2*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:1})}}generateCornerClusters(){const corners=[{x1:-3,x2:-3},{x1:3,x2:3},{x1:-3,x2:3},{x1:3,x2:-3}];for(let i=0;i<6;i++){const corner=corners[0],x1=corner.x1+2*(Math.random()-.5),x2=corner.x2+2*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:0})}for(let i=0;i<6;i++){const corner=corners[1],x1=corner.x1+2*(Math.random()-.5),x2=corner.x2+2*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:0})}for(let i=0;i<6;i++){const corner=corners[2],x1=corner.x1+2*(Math.random()-.5),x2=corner.x2+2*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:1})}for(let i=0;i<6;i++){const corner=corners[3],x1=corner.x1+2*(Math.random()-.5),x2=corner.x2+2*(Math.random()-.5);this.dataPoints.push({x1:x1,x2:x2,y:1})}}initializeChart(){this.canvas.parentElement;this.canvas.style.width="100%",this.canvas.style.height="100%";this.chart=new Chart(this.canvas.getContext("2d"),{type:"scatter",plugins:[{id:"customPointStyles",afterDatasetsDraw:chart=>{const ctx=chart.ctx;chart.data.datasets.forEach((dataset,i)=>{const meta=chart.getDatasetMeta(i);meta.hidden||meta.data.forEach((element,index)=>{if("rectRounded"===dataset.pointStyle){ctx.fillStyle=dataset.backgroundColor,ctx.strokeStyle=dataset.borderColor,ctx.lineWidth=dataset.borderWidth||2;const x=element.x,y=element.y,size=element.options.radius||5;ctx.fillRect(x-size,y-size,2*size,2*size),ctx.strokeRect(x-size,y-size,2*size,2*size)}})})}}],data:{datasets:[{label:"Class 0",data:[],backgroundColor:"#ff6b6b",borderColor:"#d63447",borderWidth:2,pointRadius:5,pointHoverRadius:7,pointStyle:"circle"},{label:"Class 1",data:[],backgroundColor:"#4ecdc4",borderColor:"#26a69a",borderWidth:2,pointRadius:5,pointHoverRadius:7,pointStyle:"rectRounded"}]},options:{responsive:!0,maintainAspectRatio:!1,scales:{x:{type:"linear",position:"bottom",min:this.x1Min,max:this.x1Max,title:{display:!0,text:this.xLabel},grid:{color:"#e0e0e0"}},y:{type:"linear",position:"left",min:this.x2Min,max:this.x2Max,title:{display:!0,text:this.yLabel},grid:{color:"#e0e0e0"}}},plugins:{legend:{display:!0,position:"top"},tooltip:{callbacks:{label:context=>{const point=context.raw;return`X₁: ${point.x.toFixed(2)}, X₂: ${point.y.toFixed(2)}`}}}},onClick:(event,activeElements)=>{this.handleChartClick(event)},animation:{duration:0}}})}setupOverlayCanvas(){const dpr=window.devicePixelRatio||1,chartCanvas=this.chart.canvas,displayWidth=chartCanvas.clientWidth,displayHeight=chartCanvas.clientHeight;this.overlayCanvas.width=displayWidth*dpr,this.overlayCanvas.height=displayHeight*dpr,this.overlayCanvas.style.width=displayWidth+"px",this.overlayCanvas.style.height=displayHeight+"px",this.overlayCtx.scale(dpr,dpr),this.overlayCtx.imageSmoothingEnabled=!0,this.overlayCtx.imageSmoothingQuality="high",this.overlayWidth=displayWidth,this.overlayHeight=displayHeight,this.dpr=dpr}updateChart(){if(!this.chart)return;this.updateChartScales();const class0Points=this.dataPoints.filter(p=>0===p.y).map(p=>({x:p.x1,y:p.x2})),class1Points=this.dataPoints.filter(p=>1===p.y).map(p=>({x:p.x1,y:p.x2}));this.chart.data.datasets[0].data=class0Points,this.chart.data.datasets[1].data=class1Points,this.chart.update("none"),this.drawOverlayBoundaries(),this.updateDisplay()}updateChartScales(){if(!this.chart)return;const xScaleOptions=this.chart.options.scales.x,yScaleOptions=this.chart.options.scales.y;xScaleOptions.min=this.x1Min,xScaleOptions.max=this.x1Max,xScaleOptions.title.text=this.xLabel,yScaleOptions.min=this.x2Min,yScaleOptions.max=this.x2Max,yScaleOptions.title.text=this.yLabel}drawOverlayBoundaries(){if(!this.overlayCtx)return;this.overlayCtx.clearRect(0,0,this.overlayWidth,this.overlayHeight);const params=this.getCurrentParameters();this.drawNonlinearBoundaryOnOverlay(params)}drawNonlinearBoundaryOnOverlay(params){this.overlayCtx.strokeStyle="#4ecdc4",this.overlayCtx.lineWidth=3;const contourLines=this.findContourLines(.5,500,params);this.drawContourLinesOnOverlay(contourLines,"#4ecdc4",3,[]);const contour25=this.findContourLines(.25,500,params),contour75=this.findContourLines(.75,500,params);this.drawContourLinesOnOverlay(contour25,"rgba(78, 205, 196, 0.6)",2,[5,5]),this.drawContourLinesOnOverlay(contour75,"rgba(78, 205, 196, 0.6)",2,[5,5]),this.overlayCtx.setLineDash([])}drawContourLinesOnOverlay(lines,color,width,dashPattern){this.overlayCtx.strokeStyle=color,this.overlayCtx.lineWidth=width,this.overlayCtx.setLineDash(dashPattern),lines.forEach(line=>{const start=this.dataToOverlayCoords(line.start.x1,line.start.x2),end=this.dataToOverlayCoords(line.end.x1,line.end.x2);this.overlayCtx.beginPath(),this.overlayCtx.moveTo(start.x,start.y),this.overlayCtx.lineTo(end.x,end.y),this.overlayCtx.stroke()})}dataToOverlayCoords(x1,x2){const xScale=this.chart.scales.x,yScale=this.chart.scales.y;return{x:xScale.getPixelForValue(x1),y:yScale.getPixelForValue(x2)}}overlayToDataCoords(canvasX,canvasY){const xScale=this.chart.scales.x,yScale=this.chart.scales.y;return{x1:xScale.getValueForPixel(canvasX),x2:yScale.getValueForPixel(canvasY)}}handleChartClick(event){const rect=this.canvas.getBoundingClientRect(),canvasX=event.native.clientX-rect.left,canvasY=event.native.clientY-rect.top,coords=this.overlayToDataCoords(canvasX,canvasY),selectedClass=parseInt(this.classToggle.value);this.dataPoints.push({x1:coords.x1,x2:coords.x2,y:selectedClass}),this.updateChart()}initializeDisplay(){this.updateChart(),this.updateDisplayPlainText(),window.MathJax&&(MathJax.startup&&MathJax.startup.promise?MathJax.startup.promise.then(()=>{this.updateDisplay()}).catch(()=>{console.warn("MathJax failed to load, using plain text equations")}):setTimeout(()=>{this.updateDisplay()},100))}updateDisplayPlainText(){const params=this.getCurrentParameters();this.w1Value.textContent=this.formatParameterValue(params.w1),this.w2Value.textContent=this.formatParameterValue(params.w2),this.biasValue.textContent=this.formatParameterValue(params.bias),this.w11Value&&(this.w11Value.textContent=this.formatParameterValue(params.w11||0)),this.w22Value&&(this.w22Value.textContent=this.formatParameterValue(params.w22||0)),this.w12Value&&(this.w12Value.textContent=this.formatParameterValue(params.w12||0));const equationText=this.getEquationText(params);this.equation.textContent=equationText;const accuracy=this.calculateAccuracy(),loss=this.calculateLoss();this.accuracyDisplay.textContent=`Accuracy = ${(100*accuracy).toFixed(1)}%`,this.lossDisplay.textContent=`Loss = ${loss.toFixed(3)}`}getEquationText(params){switch(params.type){case"linear":default:return this.getLinearEquation(params);case"quadratic":return this.getQuadraticEquation(params)}}getLinearEquation(params){const biasSign=params.bias>=0?"+":"-";return`f(x) = σ(${this.formatParameterValue(params.w1)}x₁ + ${this.formatParameterValue(params.w2)}x₂ ${biasSign} ${this.formatParameterValue(Math.abs(params.bias))})`}getQuadraticEquation(params){let terms=[];if(0!==params.w1&&terms.push(`${this.formatParameterValue(params.w1)}x₁`),0!==params.w2&&terms.push(`${this.formatParameterValue(params.w2)}x₂`),params.w11&&0!==params.w11&&terms.push(`${this.formatParameterValue(params.w11)}x₁²`),params.w22&&0!==params.w22&&terms.push(`${this.formatParameterValue(params.w22)}x₂²`),params.w12&&0!==params.w12&&terms.push(`${this.formatParameterValue(params.w12)}x₁x₂`),0!==params.bias&&terms.push(`${this.formatParameterValue(params.bias)}`),0===terms.length)return"f(x) = σ(0)";let equation=terms[0];for(let i=1;i<terms.length;i++){const term=terms[i];term.startsWith("-")?equation+=` - ${term.substring(1)}`:equation+=` + ${term}`}return`f(x) = σ(${equation})`}getLatexEquation(params){switch(params.type){case"linear":default:return this.getLinearLatex(params);case"quadratic":return this.getQuadraticLatex(params)}}getLinearLatex(params){const biasSign=params.bias>=0?"+":"-";return`$$f(\\mathbf{x}) = \\sigma(${this.formatParameterValue(params.w1)}x_1 + ${this.formatParameterValue(params.w2)}x_2 ${biasSign} ${this.formatParameterValue(Math.abs(params.bias))})$$`}getQuadraticLatex(params){let terms=[];if(0!==params.w1&&terms.push(`${this.formatParameterValue(params.w1)}x_1`),0!==params.w2&&terms.push(`${this.formatParameterValue(params.w2)}x_2`),params.w11&&0!==params.w11&&terms.push(`${this.formatParameterValue(params.w11)}x_1^2`),params.w22&&0!==params.w22&&terms.push(`${this.formatParameterValue(params.w22)}x_2^2`),params.w12&&0!==params.w12&&terms.push(`${this.formatParameterValue(params.w12)}x_1 x_2`),0!==params.bias&&terms.push(`${this.formatParameterValue(params.bias)}`),0===terms.length)return"$$f(\\mathbf{x}) = \\sigma(0)$$";let equation=terms[0];for(let i=1;i<terms.length;i++){const term=terms[i];term.startsWith("-")?equation+=` - ${term.substring(1)}`:equation+=` + ${term}`}return`$$f(\\mathbf{x}) = \\sigma(${equation})$$`}setupEventListeners(){this.w1Slider.addEventListener("input",()=>{this.updateDisplay(),this.updateChart()}),this.w2Slider.addEventListener("input",()=>{this.updateDisplay(),this.updateChart()}),this.biasSlider.addEventListener("input",()=>{this.updateDisplay(),this.updateChart()}),this.solutionBtn.addEventListener("click",()=>{this.setOptimalValues()}),this.generateDataBtn.addEventListener("click",()=>{this.generateNewData()}),this.clearDataBtn.addEventListener("click",()=>{this.clearAllData()}),this.boundaryType.addEventListener("change",()=>{this.updateControlsVisibility(),this.updateDisplay(),this.updateChart()}),[this.w11Slider,this.w22Slider,this.w12Slider].forEach(slider=>{slider&&slider.addEventListener("input",()=>{this.updateDisplay(),this.updateChart()})}),this.structuresBtn&&this.structuresBtn.addEventListener("click",()=>{this.loadStructuresData()}),this.geotechBtn&&this.geotechBtn.addEventListener("click",()=>{this.loadGeotechData()}),this.transportBtn&&this.transportBtn.addEventListener("click",()=>{this.loadTransportData()}),this.environmentBtn&&this.environmentBtn.addEventListener("click",()=>{this.loadEnvironmentData()})}updateControlsVisibility(){const boundaryType=this.boundaryType.value;switch(["w1-group","w2-group","bias-group","w11-group","w22-group","w12-group"].forEach(id=>{const element=document.getElementById(id);element&&(element.style.display="none")}),boundaryType){case"linear":document.getElementById("w1-group").style.display="block",document.getElementById("w2-group").style.display="block",document.getElementById("bias-group").style.display="block";break;case"quadratic":document.getElementById("w1-group").style.display="block",document.getElementById("w2-group").style.display="block",document.getElementById("bias-group").style.display="block",document.getElementById("w11-group").style.display="block",document.getElementById("w22-group").style.display="block",document.getElementById("w12-group").style.display="block"}}updateDisplay(){const params=this.getCurrentParameters();this.w1Value.textContent=this.formatParameterValue(params.w1),this.w2Value.textContent=this.formatParameterValue(params.w2),this.biasValue.textContent=this.formatParameterValue(params.bias),this.w11Value&&(this.w11Value.textContent=this.formatParameterValue(params.w11||0)),this.w22Value&&(this.w22Value.textContent=this.formatParameterValue(params.w22||0)),this.w12Value&&(this.w12Value.textContent=this.formatParameterValue(params.w12||0));const latexEquation=this.getLatexEquation(params);this.equation.innerHTML=latexEquation,window.MathJax&&MathJax.typesetPromise&&MathJax.typesetPromise([this.equation]).catch(err=>console.log(err));const accuracy=this.calculateAccuracy(),loss=this.calculateLoss();this.accuracyDisplay.innerHTML=`$$\\text{Accuracy} = ${(100*accuracy).toFixed(1)}\\%$$`,this.lossDisplay.innerHTML=`$$\\text{Loss} = ${loss.toFixed(3)}$$`,window.MathJax&&MathJax.typesetPromise&&MathJax.typesetPromise([this.accuracyDisplay,this.lossDisplay]).catch(err=>console.log(err))}sigmoid(x){return 1/(1+Math.exp(-x))}predict(x1,x2,parameters=null){parameters||(parameters=this.getCurrentParameters());const linear=this.computeLinearCombination(x1,x2,parameters);return this.sigmoid(linear)}classify(x1,x2,parameters=null){return this.predict(x1,x2,parameters)>.5?1:0}getCurrentParameters(){const boundaryType=this.boundaryType.value,params={type:boundaryType,w1:parseFloat(this.w1Slider.value),w2:parseFloat(this.w2Slider.value),bias:parseFloat(this.biasSlider.value)};if("quadratic"===boundaryType)params.w11=this.w11Slider?parseFloat(this.w11Slider.value):0,params.w22=this.w22Slider?parseFloat(this.w22Slider.value):0,params.w12=this.w12Slider?parseFloat(this.w12Slider.value):0;return params}computeLinearCombination(x1,x2,params){let result=params.w1*x1+params.w2*x2+params.bias;if("quadratic"===params.type)result+=params.w11*x1*x1+params.w22*x2*x2+params.w12*x1*x2;return result}findContourLines(targetProb,resolution,params){const lines=[],step=(this.x1Max-this.x1Min)/resolution;for(let i=0;i<resolution-1;i++)for(let j=0;j<resolution-1;j++){const x1a=this.x1Min+i*step,x1b=this.x1Min+(i+1)*step,x2a=this.x2Min+j*step,x2b=this.x2Min+(j+1)*step,v00=this.predict(x1a,x2a,params),v10=this.predict(x1b,x2a,params),v01=this.predict(x1a,x2b,params),v11=this.predict(x1b,x2b,params),getIntersection=(val1,val2,x1Start,x2Start,x1End,x2End)=>{if(Math.abs(val1-val2)<1e-10)return null;const t=(targetProb-val1)/(val2-val1);return{x1:x1Start+t*(x1End-x1Start),x2:x2Start+t*(x2End-x2Start)}};let bottom,right,top,left;switch((v00>=targetProb?1:0)|(v10>=targetProb?2:0)|(v11>=targetProb?4:0)|(v01>=targetProb?8:0)){case 1:case 14:bottom=getIntersection(v00,v10,x1a,x2a,x1b,x2a),left=getIntersection(v00,v01,x1a,x2a,x1a,x2b),bottom&&left&&lines.push({start:bottom,end:left});break;case 2:case 13:bottom=getIntersection(v00,v10,x1a,x2a,x1b,x2a),right=getIntersection(v10,v11,x1b,x2a,x1b,x2b),bottom&&right&&lines.push({start:bottom,end:right});break;case 3:case 12:left=getIntersection(v00,v01,x1a,x2a,x1a,x2b),right=getIntersection(v10,v11,x1b,x2a,x1b,x2b),left&&right&&lines.push({start:left,end:right});break;case 4:case 11:right=getIntersection(v10,v11,x1b,x2a,x1b,x2b),top=getIntersection(v01,v11,x1a,x2b,x1b,x2b),right&&top&&lines.push({start:right,end:top});break;case 5:bottom=getIntersection(v00,v10,x1a,x2a,x1b,x2a),left=getIntersection(v00,v01,x1a,x2a,x1a,x2b),right=getIntersection(v10,v11,x1b,x2a,x1b,x2b),top=getIntersection(v01,v11,x1a,x2b,x1b,x2b),bottom&&left&&lines.push({start:bottom,end:left}),right&&top&&lines.push({start:right,end:top});break;case 6:case 9:bottom=getIntersection(v00,v10,x1a,x2a,x1b,x2a),top=getIntersection(v01,v11,x1a,x2b,x1b,x2b),bottom&&top&&lines.push({start:bottom,end:top});break;case 7:case 8:left=getIntersection(v00,v01,x1a,x2a,x1a,x2b),top=getIntersection(v01,v11,x1a,x2b,x1b,x2b),left&&top&&lines.push({start:left,end:top});break;case 10:bottom=getIntersection(v00,v10,x1a,x2a,x1b,x2a),right=getIntersection(v10,v11,x1b,x2a,x1b,x2b),left=getIntersection(v00,v01,x1a,x2a,x1a,x2b),top=getIntersection(v01,v11,x1a,x2b,x1b,x2b),bottom&&right&&lines.push({start:bottom,end:right}),left&&top&&lines.push({start:left,end:top})}}return lines}calculateAccuracy(){if(0===this.dataPoints.length)return 0;let correct=0;return this.dataPoints.forEach(point=>{this.classify(point.x1,point.x2)===point.y&&correct++}),correct/this.dataPoints.length}calculateLoss(){if(0===this.dataPoints.length)return 0;let totalLoss=0;return this.dataPoints.forEach(point=>{const prediction=this.predict(point.x1,point.x2),clippedPred=Math.max(1e-15,Math.min(1-1e-15,prediction));totalLoss+=-(point.y*Math.log(clippedPred)+(1-point.y)*Math.log(1-clippedPred))}),totalLoss/this.dataPoints.length}resetParametersToDefault(){this.w1Slider.value="0.1",this.w2Slider.value="0.1",this.biasSlider.value="0.0",this.w11Slider&&(this.w11Slider.value="0.0"),this.w22Slider&&(this.w22Slider.value="0.0"),this.w12Slider&&(this.w12Slider.value="0.0")}setParametersFromObject(params){this.w1Slider.value=params.w1,this.w2Slider.value=params.w2,this.biasSlider.value=params.bias,void 0!==params.w11&&this.w11Slider&&(this.w11Slider.value=params.w11),void 0!==params.w22&&this.w22Slider&&(this.w22Slider.value=params.w22),void 0!==params.w12&&this.w12Slider&&(this.w12Slider.value=params.w12)}setOptimalValues(){if(0===this.dataPoints.length)return;const boundaryType=this.boundaryType.value;if(this.activeDatasetKey&&"linear"===boundaryType){const dataset=this.datasets[this.activeDatasetKey];if(dataset&&dataset.optimalSolution)return this.setParametersFromObject({type:"linear",...dataset.optimalSolution}),this.updateDisplay(),void this.updateChart()}this.optimizeForBoundaryType(boundaryType).then(params=>{this.setParametersFromObject(params),this.updateDisplay(),this.updateChart()})}async optimizeForBoundaryType(boundaryType){switch(boundaryType){case"linear":default:return this.optimizeLinear();case"quadratic":return this.optimizeQuadratic()}}optimizeLinear(){return new Promise(resolve=>{let w1=0,w2=0,bias=0;for(let iter=0;iter<1e3;iter++){let w1Grad=0,w2Grad=0,biasGrad=0;if(this.dataPoints.forEach(point=>{const z=w1*point.x1+w2*point.x2+bias,error=this.sigmoid(z)-point.y;w1Grad+=error*point.x1,w2Grad+=error*point.x2,biasGrad+=error}),w1Grad/=this.dataPoints.length,w2Grad/=this.dataPoints.length,biasGrad/=this.dataPoints.length,w1-=.1*w1Grad,w2-=.1*w2Grad,bias-=.1*biasGrad,Math.abs(w1Grad)<.001&&Math.abs(w2Grad)<.001&&Math.abs(biasGrad)<.001)break}const w1Min=parseFloat(this.w1Slider.getAttribute("min")),w1Max=parseFloat(this.w1Slider.getAttribute("max")),w2Min=parseFloat(this.w2Slider.getAttribute("min")),w2Max=parseFloat(this.w2Slider.getAttribute("max")),biasMin=parseFloat(this.biasSlider.getAttribute("min")),biasMax=parseFloat(this.biasSlider.getAttribute("max"));resolve({type:"linear",w1:Math.max(w1Min,Math.min(w1Max,w1)),w2:Math.max(w2Min,Math.min(w2Max,w2)),bias:Math.max(biasMin,Math.min(biasMax,bias))})})}optimizeQuadratic(){return new Promise(resolve=>{let w1=0,w2=0,bias=0,w11=0,w22=0,w12=0;for(let iter=0;iter<1e3;iter++){let w1Grad=0,w2Grad=0,biasGrad=0,w11Grad=0,w22Grad=0,w12Grad=0;this.dataPoints.forEach(point=>{const z=w1*point.x1+w2*point.x2+w11*point.x1*point.x1+w22*point.x2*point.x2+w12*point.x1*point.x2+bias,error=this.sigmoid(z)-point.y;w1Grad+=error*point.x1,w2Grad+=error*point.x2,w11Grad+=error*point.x1*point.x1,w22Grad+=error*point.x2*point.x2,w12Grad+=error*point.x1*point.x2,biasGrad+=error});const n=this.dataPoints.length;if(w1Grad/=n,w2Grad/=n,biasGrad/=n,w11Grad/=n,w22Grad/=n,w12Grad/=n,w1-=.05*w1Grad,w2-=.05*w2Grad,w11-=.05*w11Grad,w22-=.05*w22Grad,w12-=.05*w12Grad,bias-=.05*biasGrad,Math.abs(w1Grad)<.001&&Math.abs(w2Grad)<.001&&Math.abs(w11Grad)<.001&&Math.abs(w22Grad)<.001&&Math.abs(w12Grad)<.001&&Math.abs(biasGrad)<.001)break}const w1Min=parseFloat(this.w1Slider.getAttribute("min")),w1Max=parseFloat(this.w1Slider.getAttribute("max")),w2Min=parseFloat(this.w2Slider.getAttribute("min")),w2Max=parseFloat(this.w2Slider.getAttribute("max")),w11Min=parseFloat(this.w11Slider.getAttribute("min")),w11Max=parseFloat(this.w11Slider.getAttribute("max")),w22Min=parseFloat(this.w22Slider.getAttribute("min")),w22Max=parseFloat(this.w22Slider.getAttribute("max")),w12Min=parseFloat(this.w12Slider.getAttribute("min")),w12Max=parseFloat(this.w12Slider.getAttribute("max")),biasMin=parseFloat(this.biasSlider.getAttribute("min")),biasMax=parseFloat(this.biasSlider.getAttribute("max"));resolve({type:"quadratic",w1:Math.max(w1Min,Math.min(w1Max,w1)),w2:Math.max(w2Min,Math.min(w2Max,w2)),w11:Math.max(w11Min,Math.min(w11Max,w11)),w22:Math.max(w22Min,Math.min(w22Max,w22)),w12:Math.max(w12Min,Math.min(w12Max,w12)),bias:Math.max(biasMin,Math.min(biasMax,bias))})})}generateNewData(){this.dataPoints=[],this.generateDataPoints(),this.resetToDefaultBounds(),this.updateDisplay(),this.updateChart()}clearAllData(){this.dataPoints=[],this.resetToDefaultBounds(),this.updateDisplay(),this.updateChart()}resetToDefaultBounds(){this.x1Min=-5,this.x1Max=5,this.x2Min=-5,this.x2Max=5,this.xLabel=this.defaultXLabel,this.yLabel=this.defaultYLabel,this.activeDatasetKey=null,this.hideDatasetInfo(),this.enableQuadraticBoundary(),this.resetSlidersToDefaultRanges(),this.updateChartScales()}showDatasetInfo(dataset){this.datasetInfoBox&&(this.datasetInfoTitle&&(this.datasetInfoTitle.textContent=dataset.title),this.datasetInfoDescription&&(this.datasetInfoDescription.textContent=dataset.description),this.datasetInfoVariables&&(this.datasetInfoVariables.textContent=dataset.variables),this.datasetInfoBox.style.display="block")}hideDatasetInfo(){this.datasetInfoBox&&(this.datasetInfoBox.style.display="none",this.datasetInfoTitle&&(this.datasetInfoTitle.textContent=""),this.datasetInfoDescription&&(this.datasetInfoDescription.textContent=""),this.datasetInfoVariables&&(this.datasetInfoVariables.textContent=""))}async loadDataset(datasetKey){const dataset=this.datasets[datasetKey];if(dataset)try{const response=await fetch(dataset.file);if(!response.ok)throw new Error(`Failed to fetch dataset (status ${response.status})`);const lines=(await response.text()).split("\n").map(line=>line.trim()).filter(line=>line.length>0);if(lines.length<=1)throw new Error("Dataset is empty or missing rows.");const headers=lines[0].split(",").map(h=>h.trim()),xColIndex=headers.indexOf(dataset.xColumn),yColIndex=headers.indexOf(dataset.yColumn),labelColIndex=headers.indexOf("Label");if(-1===xColIndex||-1===yColIndex||-1===labelColIndex)throw new Error(`Expected columns "${dataset.xColumn}", "${dataset.yColumn}", and "Label" were not found.`);const parsedPoints=[],maxIndex=Math.max(xColIndex,yColIndex,labelColIndex);for(let i=1;i<lines.length;i++){const values=lines[i].split(",").map(value=>value.trim());if(values.length<=maxIndex)continue;const x1=Number.parseFloat(values[xColIndex]),x2=Number.parseFloat(values[yColIndex]),labelRaw=values[labelColIndex],label=Number.parseInt(labelRaw,10);Number.isFinite(x1)&&Number.isFinite(x2)&&(!Number.isInteger(label)||0!==label&&1!==label||parsedPoints.push({x1:x1,x2:x2,y:label}))}if(0===parsedPoints.length)throw new Error("No valid data rows found in dataset.");this.dataPoints=parsedPoints,this.activeDatasetKey=datasetKey,this.xLabel=dataset.xLabel,this.yLabel=dataset.yLabel;const x1Values=this.dataPoints.map(point=>point.x1),x2Values=this.dataPoints.map(point=>point.x2),x1Min=Math.min(...x1Values),x1Max=Math.max(...x1Values),x2Min=Math.min(...x2Values),x2Max=Math.max(...x2Values),getPadding=(min,max)=>{const range=max-min;if(!Number.isFinite(range))return 1;if(0===range){return.1*Math.max(Math.abs(min),Math.abs(max),1)}return.1*range},x1Padding=getPadding(x1Min,x1Max),x2Padding=getPadding(x2Min,x2Max);this.x1Min=x1Min-x1Padding,this.x1Max=x1Max+x1Padding,this.x2Min=x2Min-x2Padding,this.x2Max=x2Max+x2Padding,this.showDatasetInfo(dataset),this.disableQuadraticBoundary(),this.applyDatasetSliderSettings(dataset),this.updateChart()}catch(error){console.error("Error loading dataset:",error),"undefined"!=typeof window&&window.alert&&alert(`Error loading dataset: ${error.message}\nCheck the console for details.`)}else console.warn(`Dataset configuration for key "${datasetKey}" not found.`)}disableQuadraticBoundary(){const quadraticOption=this.boundaryType.querySelector('option[value="quadratic"]');quadraticOption&&(quadraticOption.disabled=!0),"quadratic"===this.boundaryType.value&&(this.boundaryType.value="linear",this.updateControlsVisibility(),this.updateDisplay())}enableQuadraticBoundary(){const quadraticOption=this.boundaryType.querySelector('option[value="quadratic"]');quadraticOption&&(quadraticOption.disabled=!1)}applyDatasetSliderSettings(dataset){if(!dataset.sliders)return void console.warn("No slider configuration found for dataset");const sliders=dataset.sliders;if(sliders.w1){this.w1Slider.setAttribute("min",sliders.w1.min),this.w1Slider.setAttribute("max",sliders.w1.max),this.w1Slider.setAttribute("step",sliders.w1.step);const currentValue=parseFloat(this.w1Slider.value);(currentValue<sliders.w1.min||currentValue>sliders.w1.max)&&(this.w1Slider.value=0)}if(sliders.w2){this.w2Slider.setAttribute("min",sliders.w2.min),this.w2Slider.setAttribute("max",sliders.w2.max),this.w2Slider.setAttribute("step",sliders.w2.step);const currentValue=parseFloat(this.w2Slider.value);(currentValue<sliders.w2.min||currentValue>sliders.w2.max)&&(this.w2Slider.value=0)}if(sliders.bias){this.biasSlider.setAttribute("min",sliders.bias.min),this.biasSlider.setAttribute("max",sliders.bias.max),this.biasSlider.setAttribute("step",sliders.bias.step);const currentValue=parseFloat(this.biasSlider.value);(currentValue<sliders.bias.min||currentValue>sliders.bias.max)&&(this.biasSlider.value=0)}}loadStructuresData(){this.loadDataset("structures")}loadGeotechData(){this.loadDataset("geotech")}loadTransportData(){this.loadDataset("transport")}loadEnvironmentData(){this.loadDataset("environment")}}document.addEventListener("DOMContentLoaded",()=>{new TwoDClassificationDemo});