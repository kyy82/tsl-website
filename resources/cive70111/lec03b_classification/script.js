class ClassificationDemo{constructor(){this.canvas=document.getElementById("plot"),this.ctx=this.canvas.getContext("2d"),this.alphaSlider=document.getElementById("alpha"),this.betaSlider=document.getElementById("beta"),this.alphaValue=document.getElementById("alpha-value"),this.betaValue=document.getElementById("beta-value"),this.equation=document.getElementById("equation"),this.accuracyDisplay=document.getElementById("accuracy"),this.lossDisplay=document.getElementById("loss"),this.sigmoidToggle=document.getElementById("sigmoid-toggle"),this.solutionBtn=document.getElementById("solution-btn"),this.generateDataBtn=document.getElementById("generate-data-btn"),this.clearDataBtn=document.getElementById("clear-data-btn"),this.setupHighDPICanvas(),this.plotWidth=this.displayWidth-80,this.plotHeight=this.displayHeight-80,this.plotX=40,this.plotY=40,this.xMin=-10,this.xMax=10,this.yMin=-.5,this.yMax=1.5,this.generateDataPoints(),this.setupEventListeners(),this.initializeDisplay()}generateDataPoints(){this.dataPoints=[];const t=8*(Math.random()-.5);for(let i=0;i<8;i++){const i=t+4*(Math.random()-.8)+1.5*(Math.random()-.5);this.dataPoints.push({x:i,y:0})}for(let i=0;i<8;i++){const i=t+4*(Math.random()+.2)+1.5*(Math.random()-.5);this.dataPoints.push({x:i,y:1})}}setupHighDPICanvas(){const t=window.devicePixelRatio||1,i=this.canvas.clientWidth||600,s=this.canvas.clientHeight||400;this.canvas.width=i*t,this.canvas.height=s*t,this.canvas.style.width=i+"px",this.canvas.style.height=s+"px",this.ctx.scale(t,t),this.ctx.imageSmoothingEnabled=!0,this.ctx.imageSmoothingQuality="high",this.dpr=t,this.displayWidth=i,this.displayHeight=s}initializeDisplay(){this.draw(),this.updateDisplayPlainText(),window.MathJax&&(MathJax.startup&&MathJax.startup.promise?MathJax.startup.promise.then((()=>{this.updateDisplay()})).catch((()=>{console.warn("MathJax failed to load, using plain text equations")})):setTimeout((()=>{this.updateDisplay()}),100))}updateDisplayPlainText(){const t=parseFloat(this.alphaSlider.value),i=parseFloat(this.betaSlider.value),s=this.sigmoidToggle.checked;this.alphaValue.textContent=t.toFixed(1),this.betaValue.textContent=i.toFixed(1);const a=i>=0?"+":"-",e=s?"σ(x)":"f(x)";this.equation.textContent=`${e} = ${s?"σ(":""}${t.toFixed(1)}x ${a} ${Math.abs(i).toFixed(1)}${s?")":""}`;const h=this.calculateAccuracy(t,i,s),o=this.calculateLoss(t,i,s);this.accuracyDisplay.textContent=`Accuracy = ${(100*h).toFixed(1)}%`,this.lossDisplay.textContent=`Loss = ${o.toFixed(3)}`}setupEventListeners(){this.alphaSlider.addEventListener("input",(()=>{this.updateDisplay(),this.draw()})),this.betaSlider.addEventListener("input",(()=>{this.updateDisplay(),this.draw()})),this.sigmoidToggle.addEventListener("change",(()=>{this.updateDisplay(),this.draw()})),this.solutionBtn.addEventListener("click",(()=>{this.setOptimalValues()})),this.generateDataBtn.addEventListener("click",(()=>{this.generateNewData()})),this.clearDataBtn.addEventListener("click",(()=>{this.clearAllData()})),this.canvas.addEventListener("click",(t=>{this.handleCanvasClick(t)}))}updateDisplay(){const t=parseFloat(this.alphaSlider.value),i=parseFloat(this.betaSlider.value),s=this.sigmoidToggle.checked;this.alphaValue.textContent=t.toFixed(1),this.betaValue.textContent=i.toFixed(1);const a=i>=0?"+":"-",e=Math.abs(i).toFixed(1),h=`${t.toFixed(1)}x ${a} ${e}`;this.equation.innerHTML=s?`$$f(x) = \\sigma(${h})$$`:`$$f(x) = ${h}$$`,window.MathJax&&MathJax.typesetPromise([this.equation]).catch((t=>console.log(t)));const o=this.calculateAccuracy(t,i,s),l=this.calculateLoss(t,i,s);this.accuracyDisplay.innerHTML=`$$\\text{Accuracy} = ${(100*o).toFixed(1)}\\%$$`,this.lossDisplay.innerHTML=`$$\\text{Loss} = ${l.toFixed(3)}$$`,window.MathJax&&MathJax.typesetPromise([this.accuracyDisplay,this.lossDisplay]).catch((t=>console.log(t)))}sigmoid(t){return 1/(1+Math.exp(-t))}predict(t,i,s,a){const e=i*t+s;return a?this.sigmoid(e):e}classify(t,i,s,a){const e=this.predict(t,i,s,a);return a?e>.5?1:0:e>0?1:0}dataToCanvas(t,i){return{x:this.plotX+(t-this.xMin)/(this.xMax-this.xMin)*this.plotWidth,y:this.plotY+this.plotHeight-(i-this.yMin)/(this.yMax-this.yMin)*this.plotHeight}}drawAxes(){this.ctx.strokeStyle="#333",this.ctx.lineWidth=2,this.ctx.beginPath(),this.ctx.moveTo(this.plotX,this.plotY+this.plotHeight),this.ctx.lineTo(this.plotX+this.plotWidth,this.plotY+this.plotHeight),this.ctx.stroke(),this.ctx.beginPath(),this.ctx.moveTo(this.plotX,this.plotY),this.ctx.lineTo(this.plotX,this.plotY+this.plotHeight),this.ctx.stroke(),this.drawGrid(),this.drawLabels()}drawGrid(){this.ctx.strokeStyle="#e0e0e0",this.ctx.lineWidth=1;for(let t=this.xMin;t<=this.xMax;t+=2){const i=this.dataToCanvas(t,0);this.ctx.beginPath(),this.ctx.moveTo(i.x,this.plotY),this.ctx.lineTo(i.x,this.plotY+this.plotHeight),this.ctx.stroke()}for(let t=0;t<=1;t+=.5){const i=this.dataToCanvas(0,t);this.ctx.beginPath(),this.ctx.moveTo(this.plotX,i.y),this.ctx.lineTo(this.plotX+this.plotWidth,i.y),this.ctx.stroke()}}drawLabels(){this.ctx.fillStyle="#666",this.ctx.font="12px Arial",this.ctx.textAlign="center";for(let t=this.xMin;t<=this.xMax;t+=2){const i=this.dataToCanvas(t,0);this.ctx.fillText(t.toString(),i.x,this.plotY+this.plotHeight+20)}this.ctx.textAlign="right";for(let t=0;t<=1;t+=.5){const i=this.dataToCanvas(0,t);this.ctx.fillText(t.toString(),this.plotX-10,i.y+4)}this.ctx.fillStyle="#333",this.ctx.font="14px Arial",this.ctx.textAlign="center",this.ctx.fillText("X",this.plotX+this.plotWidth/2,this.displayHeight-10),this.ctx.save(),this.ctx.translate(15,this.plotY+this.plotHeight/2),this.ctx.rotate(-Math.PI/2),this.ctx.fillText("Class",0,0),this.ctx.restore()}drawDataPoints(){this.dataPoints.forEach((t=>{const i=this.dataToCanvas(t.x,t.y);0===t.y?(this.ctx.fillStyle="#ff6b6b",this.ctx.strokeStyle="#d63447"):(this.ctx.fillStyle="#4ecdc4",this.ctx.strokeStyle="#26a69a"),this.ctx.lineWidth=2,this.ctx.beginPath(),0===t.y?this.ctx.arc(i.x,i.y,5,0,2*Math.PI):this.ctx.rect(i.x-5,i.y-5,10,10),this.ctx.fill(),this.ctx.stroke()}))}drawDecisionBoundary(){const t=parseFloat(this.alphaSlider.value),i=parseFloat(this.betaSlider.value);if(this.sigmoidToggle.checked){this.ctx.strokeStyle="#4ecdc4",this.ctx.lineWidth=3,this.ctx.beginPath();let s=!0;for(let a=this.xMin;a<=this.xMax;a+=.1){const e=this.predict(a,t,i,!0),h=this.dataToCanvas(a,e);s?(this.ctx.moveTo(h.x,h.y),s=!1):this.ctx.lineTo(h.x,h.y)}this.ctx.stroke(),this.ctx.strokeStyle="#ff9800",this.ctx.lineWidth=2,this.ctx.setLineDash([5,5]);const a=this.dataToCanvas(this.xMin,.5),e=this.dataToCanvas(this.xMax,.5);this.ctx.beginPath(),this.ctx.moveTo(a.x,a.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke(),this.ctx.setLineDash([])}else{this.ctx.strokeStyle="#4ecdc4",this.ctx.lineWidth=3,this.ctx.beginPath();const s=this.xMin,a=t*s+i,e=this.xMax,h=t*e+i,o=this.dataToCanvas(s,a),l=this.dataToCanvas(e,h);this.ctx.moveTo(o.x,o.y),this.ctx.lineTo(l.x,l.y),this.ctx.stroke(),this.ctx.strokeStyle="#ff9800",this.ctx.lineWidth=2,this.ctx.setLineDash([5,5]);const n=this.dataToCanvas(this.xMin,0),c=this.dataToCanvas(this.xMax,0);this.ctx.beginPath(),this.ctx.moveTo(n.x,n.y),this.ctx.lineTo(c.x,c.y),this.ctx.stroke(),this.ctx.setLineDash([])}}calculateAccuracy(t,i,s){if(0===this.dataPoints.length)return 0;let a=0;return this.dataPoints.forEach((e=>{this.classify(e.x,t,i,s)===e.y&&a++})),a/this.dataPoints.length}calculateLoss(t,i,s){if(0===this.dataPoints.length)return 0;let a=0;return this.dataPoints.forEach((e=>{const h=this.predict(e.x,t,i,s);if(s){const t=1e-15,i=Math.max(t,Math.min(1-t,h));a+=-(e.y*Math.log(i)+(1-e.y)*Math.log(1-i))}else a+=Math.pow(e.y-h,2)})),a/this.dataPoints.length}setOptimalValues(){if(0===this.dataPoints.length)return;this.sigmoidToggle.checked?this.optimizeForClassification():this.optimizeForRegression(),this.updateDisplay(),this.draw()}optimizeForRegression(){const t=this.dataPoints.length;let i=0,s=0,a=0,e=0;this.dataPoints.forEach((t=>{i+=t.x,s+=t.y,a+=t.x*t.y,e+=t.x*t.x}));const h=(t*a-i*s)/(t*e-i*i),o=(s-h*i)/t,l=Math.max(-5,Math.min(5,h)),n=Math.max(-10,Math.min(10,o));this.alphaSlider.value=l.toFixed(1),this.betaSlider.value=n.toFixed(1)}optimizeForClassification(){let t=parseFloat(this.alphaSlider.value),i=parseFloat(this.betaSlider.value);for(let s=0;s<1e3;s++){let s=0,a=0;if(this.dataPoints.forEach((e=>{const h=t*e.x+i,o=this.sigmoid(h)-e.y;s+=o*e.x,a+=o})),s/=this.dataPoints.length,a/=this.dataPoints.length,t-=.1*s,i-=.1*a,Math.abs(s)<.001&&Math.abs(a)<.001)break}const s=Math.max(-5,Math.min(5,t)),a=Math.max(-10,Math.min(10,i));this.alphaSlider.value=s.toFixed(1),this.betaSlider.value=a.toFixed(1)}generateNewData(){this.clearAllData(),this.generateDataPoints(),this.updateDisplay(),this.draw()}clearAllData(){this.dataPoints=[],this.updateDisplay(),this.draw()}handleCanvasClick(t){const i=this.canvas.getBoundingClientRect(),s=t.clientX-i.left,a=t.clientY-i.top,e=this.canvasToData(s,a);if(this.isWithinPlotArea(s,a)){const t=e.y>.5?1:0;this.dataPoints.push({x:e.x,y:t}),this.updateDisplay(),this.draw()}}canvasToData(t,i){return{x:this.xMin+(t-this.plotX)/this.plotWidth*(this.xMax-this.xMin),y:this.yMax-(i-this.plotY)/this.plotHeight*(this.yMax-this.yMin)}}isWithinPlotArea(t,i){return t>=this.plotX&&t<=this.plotX+this.plotWidth&&i>=this.plotY&&i<=this.plotY+this.plotHeight}draw(){this.ctx.clearRect(0,0,this.displayWidth,this.displayHeight),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.drawAxes(),this.drawDecisionBoundary(),this.drawDataPoints()}}document.addEventListener("DOMContentLoaded",(()=>{new ClassificationDemo}));